{"version":3,"sources":["add-data-on-change.js","add-data-to-tabs.js","add-tab-data.js","add-warning-msg.js","bottom-table.js","canvas.js","check-box.js","color-manager.js","create-canvas-elements.js","create-field.js","engine.js","fabric-events.js","image_assets.js","interface.js","load-plate.js","main.js","overlay.js","plate-layout.js","preset.js","tabs.js","undo-redo-manager.js","well-area.js"],"names":["plateLayOutWidget","$","fabric","addDataOnChange","_addAllData","data","this","allSelectedObjects","noOfSelectedObjects","length","wells","objectIndex","well","tile","index","engine","derivative","extend","defaultWell","processedData","processWellData","wellEmpty","emptyWellWithDefaultVal","disableAddDeleteWell","wellCopy","JSON","parse","stringify","defaultValue","key","_applyFieldData","_getAllMultipleVal","applyFieldWarning","_colorMixer","derivativeChange","newData","curWell","wellList","id","v","undefined","multi","curData","preData","newDt","_getMultiData","push","fieldId","addNew","added","removed","value","add","listIdx","toString","map","val","subFieldId","indexOf","removeIndex","removeListIndex","newPreData","idx","parseInt","undoRedoActive","createObject","addToUndoRedo","searchAndStack","applyColors","mainFabricCanvas","renderAll","_trigger","checkboxes","globalSelectedAttributes","slice","selectedAreas","focalWell","requiredField","jQuery","addDataToFields","_addDataToTabFields","values","fieldMap","setValue","addTabData","fieldList","autoId","_addTabData","tabData","options","attributes","tabs","that","multiplexFieldArray","forEach","tab","tabPointer","tabFields","fieldArray","field","field_val","console","log","type","_makeMultiplexField","_makeRegularField","allDataTabs","multipleFieldList","_makeSubField","wrapperDiv","_createElement","addClass","wrapperDivLeftSide","wrapperDivRightSide","nameContainer","text","name","fieldContainer","append","root","required","checkbox","_addCheckBox","_createField","onChange","getValue","subFieldList","requiredSubField","subFieldKey","multiplexFields","subFieldData","subField","multiplexId","subFields","subfield","mainMultiplexField","mainRefField","curId","singleSelectValue","curVal","returnVal","_changeMultiFieldValue","curDataLs","detailData","addWarningMsg","fieldWarningMsg","include","imgId","img","html","_assets","warningImg","attr","find","prepend","popText","hover","e","style","display","hide","remove","removeWarningMsg","fieldData","i","applyMultiplexSubFieldColor","Array","bottomTable","_bottomScreen","bottomContainer","bottomTableContainer","bottomTableHead","bottomTableBody","container","addBottomTableHeadings","row","singleField","rowCounter","empty","adjustFieldWidth","bottomRow","tileAttrText","getText","addBottomTableRow","color","singleStack","modelTile","allTiles","plateIdDiv","numberText","click","evt","addressToSelect","addressIdx","indexToAddress","ctrlKey","getSelectedAddress","setSelectedWell","selectedAddress","colorPairs","colorStops","css","dataDiv","bottomForFirstTime","createExportButton","downloadCSV","csv","filename","csvFile","downloadLink","Blob","document","createElement","download","href","window","URL","createObjectURL","body","appendChild","exportData","format","rows","querySelectorAll","colorLocMap","colorLocIdxMap","stackUpWithColor","dim","getDimensions","colorIdx","locIdx","cols","j","innerText","replace","loc","join","overlayContainer","descriptionDiv","buttonContainer","exportButton","resetExportText","classList","setTimeout","clipboardButton","clipboard","ClipboardJS","get","resetClipboardText","on","canvas","allPreviouslySelectedObjects","colorPointer","goldenRatio","_createCanvas","normalCanvas","canvasContainer","_initiateFabricCanvas","w","width","h","height","_setCanvasArea","Canvas","backgroundColor","selection","stateful","hoverCursor","renderOnAddRemove","setWidth","setHeight","checkBox","checkImage","dontImg","_applyCheckboxHandler","checkBoxImage","machineClick","changes","changeCheckboxes","changeSubFieldsCheckboxes","subFieldToInclude","clicked","Boolean","doImg","gsa","multiplexCheckedSubField","globalSelectedMultiplexSubfield","_clearPresetSelection","setSubFieldCheckboxes","fieldIds","setCheckboxes","colorManager","createCanvasElements","scaleFactor","baseSizes","spacing","tile_radius","center_radius_complete","center_radius_incomplete","label_size","label_spacing","text_size","stroke","gap","Math","min","dimensions","sizes","prop","_canvas","_fixRowAndColumn","_putCircles","d1","d2","fontSize","top","left","tempFabricText","IText","fill","originX","originY","fontFamily","selectable","fontWeight","rowIndex","tileCounter","col","_createTile","background","highlight","circle","circleCenter","circleText","_addLargeRectangleOverlay","_fabricEvents","visible","colorIndex","address","Circle","radius","hasControls","hasBorders","lockMovementX","lockMovementY","evented","setGradient","x1","x2","y1","y2","r1","r2","0","1","Rect","strokeWidth","lockScalingX","lockScalingY","setTileComplete","complete","setTileVisible","setTileColor","String","overLay","opacity","createField","_createTextField","_createNumericField","_createSelectField","_createMultiSelectField","_createBooleanField","_createMultiplexField","input","parseValue","trim","disabled","bool","parseText","generated","_createOpts","config","opts","allowClear","placeholder","minimumResultsForSearch","data_specified","ajax","optMap","opt","select2","trigger","one","preventDefault","multiple","_parseOne","_parseMany","vals","multiOnChange","params","_createDeleteButton","units","defaultUnit","unitInput","hasUnits","unitText","selected","unit","setUnitOpts","newUnits","curUnit","cleanUnit","newOpts","isPlainObject","parseRegularValue","parseUnit","getRegularValue","isNaN","getUnit","hasMultiplexUnit","unitTypeKey","unitMap","setUnit","setRegularValue","Number","toLowerCase","u","getRegularText","textVal","removeClass","nameContainer1","fieldContainer1","singleSelect","appendTo","multiselectSetValue","setSingleSelectOptions","selected_v","hasClass","singleSelectChange","updateSubFieldUnitOpts","curSubField","readOnlyHandler","newSubFieldValue","subFieldName","multiselectValues","newOptions","valMap","curOpts","hasOwnProperty","unitOptions","curIds","curOpt","newMultiplexVal","selectList","selectedVal","newVal","selectVal","checkedSubfields","valIdx","subV","subText","optId","x","checkMultiplexCompletion","valList","valCount","completionPct","getSubfieldStatus","req","subFieldWarningMap","warningStatus","multiplexVals","multiplexIdx","updateSubFieldWarningMap","mainFieldStatus","warningText","mainFieldWarning","parseMainFieldVal","_deleteDialog","valToRemove","allSelectedMultipleVal","Object","keys","dialogDiv","killDialog","dialogContent","tableArea","buttonRow","table","_deleteDialogTable","readOnly","deleteCheckedButton","each","decideSelectedFields","cancelButton","show","onclick","event","target","colName","thead","tbody","tr","deleteButton","THIS","colorMap","Map","stackPointer","isArray","derivativeJson","wellData","selectedSubFields","curMultiplexVals","isEmptyObject","k","parseFloat","sort","a","b","refDerivativeIndex","referenceDerivative","arr","wholeNoTiles","wholePercentage","tileIndex","set","completion","checkCompletion","floor","overLayTextContainer","multiplexStatus","fabricEvents","colorToIndex","startCoords","y","_clickCoords","rect","getBoundingClientRect","clientX","clientY","getPlates","selecting","coords","areas","_wellToCoords","_coordsToRect","_coordsToWell","shiftKey","_rectToArea","setSelection","endCoords","area","scrollToGroup","selectObjectInBottomTab","_areasToTiles","_setSelectedTiles","_setFocalWellRect","activeElement","blur","flag","locToAddress","r","c","addressAllowToEdit","setFieldsDisabled","_areaToRect","_wellToArea","focalWellRect","selectedTiles","_getSelectedWells","_getCommonFields","referenceWell","referenceFields","fields","refArr","agrArr","containsObject","inArray","obj","list","equality","evaluate","listKey","_getCommonWell","multiplexField","curMultipleVal","multipleVal","getDifferentWellsVals","wellsHash","wellId","differentWellsVals","commonWell","allFieldVal","fieldIdx","wellIdx","diffWellVal","curWellData","commonVal","curMultiVal","getWellSetAddressWithData","assets","interface","_createInterface","divIdentifier","topSection","topLeft","topRight","overLayContainer","_createOverLay","element","_createTabAtRight","_createTabs","_placePresetTabs","_setShortcuts","keyup","_handleShortcuts","_configureUndoRedoArray","addEventListener","copyCriteria","clearCriteria","pasteCriteria","keyCode","metaKey","redo","undo","loadPlate","sanitizeWell","sanitizeAreas","sanitized","setData","minCol","_coordIndex","maxCol","minRow","maxRow","max","_wellInArea","newWell","GET_PLATES","IS_READ_ONLY","IS_DISABLE_ADD_DELETE_WELL","GET_SELECTED_OBJECT","SETSELECTEDWELL","scrollTo","to","duration","perTick","scrollTop","overlay","overLayButtonContainer","clearCriteriaButton","copyCriteriaButton","pasteCriteriaButton","undoButton","redoButton","hasWellUpdate","alert","widget","addressToLoc","layoutAddress","m","exec","toUpperCase","row_v","charCodeAt","locToIndex","t","addressToIndex","_rowKey","c1","c2","code","fromCharCode","indexToLoc","_create","numRows","numCols","component","className","isReadOnly","_init","addData","getTextDerivative","wellsData","textDerivative","textValWell","textFieldIdWell","textFieldVal","getWellsDifferences","isDisableAddDeleteWell","column_with_default_val","actionPointer","undoRedoArray","getSelectedObject","selectedObjects","selectedObjectAddress","trs","tds","children","isSelected","querySelector","innerHTML","offsetTop","getSelectedIndex","selectedObj","addressList","locMap","apply","preset","me","presets","wellAttrContainer","tabContainer","presetTabContainer","divText","title","presetButton","_selectPreset","allTabs","tabHead","tabIndex","_tabClickHandler","tabDataContainer","_addDataTabs","clickedTab","selectedTab","previouslyClickedTabIndex","clickedTabIndex","undoRedoManager","splice","shiftUndoRedo","pointerDiff","pointer","setUndoRedo","wellArea","reduce","tiles","_encodeArea","_encodeAreas","_decodeWell","wellAddress","match","adRx","RegExp","_decodeArea","areaAddress","split","_decodeAreas","areasAddress","abs","count","coord","center","hw","right","bottom"],"mappings":"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","file":"plate-map.min.js","sourcesContent":["var plateLayOutWidget = plateLayOutWidget || {};\n\n(function($, fabric) {\n\n  plateLayOutWidget.addDataOnChange = function() {\n    // This object is invoked when something in the tab fields change\n    return {\n\n      _addAllData: function(data) {\n        // Method to add data when something changes in the tabs. Its going to be tricky , just starting.\n        if (this.allSelectedObjects) {\n          var noOfSelectedObjects = this.allSelectedObjects.length;\n          var wells = [];\n          for (var objectIndex = 0; objectIndex < noOfSelectedObjects; objectIndex++) {\n            var tile = this.allSelectedObjects[objectIndex];\n            var well;\n            if (tile.index in this.engine.derivative) {\n              well = this.engine.derivative[tile.index];\n            } else {\n              well = $.extend(true, {}, this.defaultWell);\n              this.engine.derivative[tile.index] = well;\n            }\n            var processedData = this.processWellData(data, well, noOfSelectedObjects, wells);\n            wells = processedData.wells;\n            well = processedData.well;\n            var empty = this.engine.wellEmpty(well);\n            if (empty) {\n              if (this.emptyWellWithDefaultVal && this.disableAddDeleteWell) {\n                var wellCopy = JSON.parse(JSON.stringify(well));\n                var defaultValue = this.emptyWellWithDefaultVal;\n                for (var key in defaultValue) {\n                  if (key in wellCopy) {\n                    wellCopy[key] = defaultValue[key];\n                    this._applyFieldData(key, defaultValue[key]);\n                  }\n                }\n                this.engine.derivative[tile.index] = wellCopy;\n              } else {\n                delete this.engine.derivative[tile.index];\n              }\n            }\n          }\n        }\n        // update multiplex remove all field\n        this._getAllMultipleVal(wells);\n        this.applyFieldWarning(wells);\n        // create well when default field is sent for the cases when user delete all fields during disabledNewDeleteWell mode\n        this._colorMixer();\n        this.derivativeChange();\n      },\n\n      processWellData: function(newData, curWell, noOfSelectedObjects, wellList) {\n\n        if (!wellList) {\n          wellList = [];\n        }\n        for (var id in newData) {\n          var v;\n          if (newData[id] !== undefined && newData[id] !== null) {\n            if (newData[id].multi) {\n              var curData = newData[id];\n              var preData = curWell[id];\n              var newDt = this._getMultiData(preData, curData, id, noOfSelectedObjects);\n              // need to replace newData\n              v = JSON.parse(JSON.stringify(newDt));\n            } else {\n              v = JSON.parse(JSON.stringify(newData[id]));\n            }\n          } else {\n            v = JSON.parse(JSON.stringify(newData[id]));\n          }\n          curWell[id] = v;\n          wellList.push(curWell);\n        }\n\n        return {\n          well: curWell,\n          wells: wellList\n        }\n      },\n\n      _getMultiData: function(preData, curData, fieldId, noOfSelectedObjects) {\n        var addNew = curData.added;\n        var removed = curData.removed;\n        if (addNew) {\n          if (preData) {\n            if (addNew.value) {\n              var add = true;\n              for (var listIdx in preData) {\n                var multiplexData = preData[listIdx];\n                // for cases when the add new data exist in well\n                if (multiplexData[fieldId].toString() === addNew.id.toString()) {\n                  add = false;\n                  // update subfield value\n                  preData = preData.map(function(val) {\n                    if (val[fieldId].toString() === addNew.id.toString()) {\n                      for (var subFieldId in val) {\n                        // over write previous data if only one well is selected\n                        if (subFieldId in addNew.value && subFieldId !== fieldId) {\n                          if (noOfSelectedObjects === 1) {\n                            val[subFieldId] = addNew.value[subFieldId];\n                          } else if (addNew.value[subFieldId]) {\n                            val[subFieldId] = addNew.value[subFieldId];\n                          }\n                        }\n                      }\n                    }\n                    return val;\n                  })\n                }\n              }\n              if (add) {\n                preData.push(addNew.value);\n              }\n            } else if (preData.indexOf(addNew) < 0) {\n              preData.push(addNew);\n            }\n          } else {\n            preData = [];\n            if (addNew.value) {\n              preData.push(addNew.value);\n            } else if (addNew) {\n              preData.push(addNew);\n            }\n          }\n        }\n\n        var removeListIndex = function(preData, removeIndex) {\n          var newPreData = [];\n          for (var idx in preData) {\n            if (parseInt(idx) !== parseInt(removeIndex)) {\n              newPreData.push(preData[idx]);\n            }\n          }\n          return newPreData;\n        };\n\n        if (removed) {\n          var removeIndex;\n          // for multiplex field\n          if (removed.value) {\n            for (var listIdx in preData) {\n              var multiplexData = preData[listIdx];\n              if (multiplexData[fieldId].toString() === removed.id.toString()) {\n                removeIndex = listIdx;\n              }\n            }\n            // remove nested element\n            preData = removeListIndex(preData, removeIndex);\n          } else {\n            if (preData) {\n              removeIndex = preData.indexOf(removed);\n              if (removeIndex >= 0) {\n                preData = removeListIndex(preData, removeIndex);\n              }\n            }\n          }\n        }\n        if (preData && (preData.length == 0)) {\n          preData = null;\n        }\n        return preData\n      },\n\n      _colorMixer: function() {\n        if (!this.undoRedoActive) {\n          var data = this.createObject();\n          this.addToUndoRedo(data);\n        }\n        this.engine.searchAndStack();\n        this.engine.applyColors();\n        this.mainFabricCanvas.renderAll();\n      },\n\n      derivativeChange: function() {\n        this._trigger(\"updateWells\", null, this.createObject());\n      },\n\n      createObject: function() {\n        var derivative = $.extend(true, {}, this.engine.derivative);\n        var checkboxes = this.globalSelectedAttributes.slice();\n        var selectedAreas = this.selectedAreas.slice();\n        var focalWell = this.focalWell;\n\n        return {\n          \"derivative\": derivative,\n          \"checkboxes\": checkboxes,\n          \"selectedAreas\": selectedAreas,\n          \"focalWell\": focalWell,\n          \"requiredField\": this.requiredField\n        };\n      }\n    };\n  }\n})(jQuery, fabric);","var plateLayOutWidget = plateLayOutWidget || {};\n\n(function($, fabric) {\n\n  plateLayOutWidget.addDataToFields = function() {\n\n    return {\n\n      _addDataToTabFields: function(values) {\n        // Configure how data is added to tab fields\n        for (var id in values) {\n          this._applyFieldData(id, values[id]);\n        }\n      },\n\n      _applyFieldData: function(id, v) {\n        this.fieldMap[id].setValue(v);\n      }\n    }\n  }\n})(jQuery, fabric)","var plateLayOutWidget = plateLayOutWidget || {};\n\n(function($, fabric) {\n\n  plateLayOutWidget.addTabData = function() {\n\n    return {\n\n      fieldList: [],\n      fieldMap: {},\n      autoId: 1,\n\n      _addTabData: function() {\n        // Here we may need more changes because attributes format likely to change\n        var tabData = this.options.attributes.tabs;\n        var that = this;\n        this.requiredField = [];\n        var multiplexFieldArray = [];\n        tabData.forEach(function(tab, tabPointer) {\n          if (tab[\"fields\"]) {\n            var tabFields = tab[\"fields\"];\n            var fieldArray = [];\n            var fieldArrayIndex = 0;\n            // Now we look for fields in the json\n            for (var field in tabFields) {\n              var data = tabFields[field];\n\n              if (!data.id) {\n                data.id = \"Auto\" + that.autoId++;\n                console.log(\"Field autoassigned id \" + data.id);\n              }\n              if (!data.type) {\n                data.type = \"text\";\n                console.log(\"Field \" + data.id + \" autoassigned type \" + data.type);\n              }\n\n              var field_val;\n              if (data.type === \"multiplex\") {\n                field_val = that._makeMultiplexField(data, tabPointer, fieldArray);\n                multiplexFieldArray.push(field_val);\n              } else {\n                field_val = that._makeRegularField(data, tabPointer, fieldArray, true);\n                if (data.type === \"multiselect\") {\n                  multiplexFieldArray.push(field_val);\n                }\n              }\n              ;\n            }\n\n            that.allDataTabs[tabPointer][\"fields\"] = fieldArray;\n          } else {\n            console.log(\"unknown format in field initialization\");\n          }\n        });\n        that.multipleFieldList = multiplexFieldArray;\n      },\n\n      _makeSubField: function(data, tabPointer, fieldArray) {\n        var that = this;\n        if (!data.id) {\n          data.id = \"Auto\" + that.autoId++;\n          console.log(\"Field autoassigned id \" + data.id);\n        }\n        if (!data.type) {\n          data.type = \"text\";\n          console.log(\"Field \" + data.id + \" autoassigned type \" + data.type);\n        }\n        var wrapperDiv = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-default-field\");\n        var wrapperDivLeftSide = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-left-side\");\n        var wrapperDivRightSide = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-right-side\");\n        var nameContainer = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-name\").text(data.name);\n        var fieldContainer = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-container\");\n\n        $(wrapperDivRightSide).append(nameContainer);\n        $(wrapperDivRightSide).append(fieldContainer);\n        $(wrapperDiv).append(wrapperDivLeftSide);\n        $(wrapperDiv).append(wrapperDivRightSide);\n        $(that.allDataTabs[tabPointer]).append(wrapperDiv);\n\n        var field = {\n          id: data.id,\n          name: data.name,\n          root: wrapperDiv,\n          data: data,\n          required: data.required || false\n        };\n\n        fieldArray.push(field);\n        that.fieldMap[data.id] = field;\n\n        return field;\n      },\n\n      _makeRegularField: function(data, tabPointer, fieldArray, checkbox) {\n        var that = this;\n        var wrapperDiv = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-default-field\");\n        var wrapperDivLeftSide = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-left-side\");\n        var wrapperDivRightSide = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-right-side \");\n        var nameContainer = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-name\").text(data.name);\n        var fieldContainer = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-container\");\n\n        wrapperDivRightSide.append(nameContainer);\n        wrapperDivRightSide.append(fieldContainer);\n        wrapperDiv.append(wrapperDivLeftSide);\n        wrapperDiv.append(wrapperDivRightSide);\n        that.allDataTabs[tabPointer].append(wrapperDiv);\n\n        var field = {\n          id: data.id,\n          name: data.name,\n          root: wrapperDiv,\n          data: data,\n          required: data.required\n        };\n\n        if (field.required) {\n          that.requiredField.push(field.id);\n        }\n\n        fieldArray.push(field);\n        that.fieldList.push(field);\n        that.fieldMap[field.id] = field;\n\n        // Adding checkbox\n        if (checkbox) {\n          that._addCheckBox(field);\n        }\n        that._createField(field);\n\n        field.onChange = function() {\n          var v = field.getValue();\n          var data = {};\n          data[field.id] = v;\n          that._addAllData(data);\n        };\n        return field;\n      },\n\n      _makeMultiplexField: function(data, tabPointer, fieldArray) {\n        var that = this;\n        var wrapperDiv = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-default-field\");\n        var wrapperDivLeftSide = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-left-side\");\n        var wrapperDivRightSide = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-right-side \");\n        var nameContainer = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-name\").text(data.name);\n        var fieldContainer = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-container\");\n\n        wrapperDivRightSide.append(nameContainer);\n        wrapperDivRightSide.append(fieldContainer);\n        wrapperDiv.append(wrapperDivLeftSide);\n        wrapperDiv.append(wrapperDivRightSide);\n        that.allDataTabs[tabPointer].append(wrapperDiv);\n\n        var field = {\n          id: data.id,\n          name: data.name,\n          root: wrapperDiv,\n          data: data,\n          required: data.required\n        };\n\n        fieldArray.push(field);\n        that.fieldList.push(field);\n        that.fieldMap[data.id] = field;\n\n        var subFieldList = [];\n        //create subfields\n        var requiredSubField = [];\n        for (var subFieldKey in data.multiplexFields) {\n          var subFieldData = data.multiplexFields[subFieldKey];\n          var subField = that._makeSubField(subFieldData, tabPointer, fieldArray);\n          subFieldList.push(subField);\n\n          // stores required  subField\n          if (subFieldData.required) {\n            requiredSubField.push(subField.id);\n          }\n        }\n\n        //store required field\n        if (field.required || requiredSubField.length) {\n          this.requiredField.push({\n            multiplexId: field.id,\n            subFields: requiredSubField\n          });\n        }\n\n        field.subFieldList = subFieldList;\n        that._createField(field);\n        that._addCheckBox(field);\n\n        subFieldList.forEach(function(subfield) {\n          subfield.mainMultiplexField = field;\n          fieldArray.push(subfield);\n          that._createField(subfield);\n          that._addCheckBox(subfield);\n          delete that.defaultWell[subfield.id];\n          // overwrite subField setvalue\n          subfield.onChange = function() {\n            var v = subfield.getValue();\n            var mainRefField = subfield.mainMultiplexField;\n            var curId = mainRefField.singleSelectValue();\n            //var curDataLs = mainRefField.detailData;\n            var curVal = {};\n            curVal[mainRefField.id] = curId;\n            //append subfields\n            curVal[subfield.id] = v;\n            var returnVal = {\n              id: curId,\n              value: curVal\n            };\n\n            field._changeMultiFieldValue(returnVal, null);\n            var curDataLs = mainRefField.detailData;\n            if (curDataLs !== null) {\n              curId = mainRefField.singleSelectValue();\n              curDataLs = curDataLs.map(function(curData) {\n                if (curData[mainRefField.id] === curId) {\n                  curData[subfield.id] = v;\n                }\n                return curData;\n              });\n            }\n            mainRefField.detailData = curDataLs;\n          };\n\n        });\n\n        return field;\n      }\n    }\n  }\n\n})(jQuery, fabric);\n","var plateLayOutWidget = plateLayOutWidget || {};\n\n(function($, fabric) {\n\n  plateLayOutWidget.addWarningMsg = function() {\n    // For those check boxes associated with every field in the tab\n    return {\n      fieldWarningMsg: function(field, text, include) {\n        var that = this;\n        var imgId = \"fieldWarning\" + field.id;\n        var img = $(\"<span>\").html(that._assets.warningImg).attr(\"id\", imgId).addClass(\"plate-field-warning-image\");\n        //field.root.find(\".plate-setup-tab-name\").append('<img id=\"theImg\" src=\"theImg.png\" />')\n        if (include) {\n          if (field.root.find(\"#\" + imgId).length <= 0) {\n            field.root.find(\".plate-setup-tab-name\").text(\" \" + field.name);\n            field.root.find(\".plate-setup-tab-name\").prepend(img);\n\n            var popText = $(\"<div/>\").addClass(\"pop-out-text\");\n            popText.text(text);\n            field.root.find(\".plate-setup-tab-name\").append(popText);\n\n            $(\"#\" + imgId).hover(function(e) {\n              popText[0].style.display = 'flex';\n            }, function() {\n              popText.hide();\n            });\n          }\n\n\n        } else {\n          if (field.root.find(\"#\" + imgId).length > 0) {\n            field.root.find(\".plate-setup-tab-name\").text(field.name);\n            $(\"#\" + imgId).remove();\n          }\n        }\n      },\n\n      removeWarningMsg: function(field, text, include) {\n        var that = this;\n        var imgId = \"fieldWarning\" + field.id;\n        var img = $(\"<span>\").html(that._assets.warningImg).attr(\"id\", imgId).addClass(\"plate-field-warning-image\");\n        //field.root.find(\".plate-setup-tab-name\").append('<img id=\"theImg\" src=\"theImg.png\" />')\n        if (include) {\n          field.root.find(\".plate-setup-tab-name\").append(img);\n\n          var popText = $(\"<div/>\").addClass(\"pop-out-text\");\n          popText.text(text);\n          field.root.find(\".plate-setup-tab-name\").append(popText);\n\n          $(\"#\" + imgId).hover(function(e) {\n            popText[0].style.display = 'inline-block';\n          }, function() {\n            popText.hide();\n          });\n\n        } else {\n          $(\"#\" + imgId).remove();\n          if (field.root.find(\"#\" + imgId).length > 0) {\n            //field.root.find(\".plate-setup-tab-name\").remove(img);\n            $(\"#\" + imgId).remove();\n          }\n        }\n      },\n\n      applyFieldWarning: function(wells) {\n        var that = this;\n        var req = 0;\n        var fill = 0;\n        var fieldData = {};\n        that.fieldList.forEach(function(field) {\n          fieldData[field.id] = [];\n        });\n        wells.forEach(function(well) {\n          if (!that.engine.wellEmpty(well)) {\n            for (var fieldId in fieldData) {\n              if (fieldId in well) {\n                fieldData[fieldId].push(well[fieldId]);\n              } else {\n                fieldData[fieldId].push(null);\n              }\n            }\n          }\n        });\n        for (var i = 0; i < that.fieldList.length; i++) {\n          var field = that.fieldList[i];\n          if (field.applyMultiplexSubFieldColor) {\n            field.applyMultiplexSubFieldColor(fieldData[field.id]);\n          } else {\n            if (field.required) {\n              var include = false;\n              fieldData[field.id].forEach(function(val) {\n                // for multiselect\n                if (val instanceof Array) {\n                  if (val.length === 0) {\n                    include = true;\n                  }\n                } else {\n                  if (val === null) {\n                    include = true;\n                  }\n                }\n              });\n              //field.root.find(\".plate-setup-tab-name\").css(\"background\", color);\n              that.fieldWarningMsg(field, \"required field\", include);\n            }\n          }\n        }\n      }\n    }\n  }\n})(jQuery, fabric);","var plateLayOutWidget = plateLayOutWidget || {};\n\n(function($, fabric) {\n\n  plateLayOutWidget.bottomTable = function() {\n    // for bottom table\n    return {\n      _bottomScreen: function() {\n        this.bottomContainer = this._createElement(\"<div></div>\").addClass(\"plate-setup-bottom-container\");\n        this.bottomTableContainer = this._createElement(\"<div></div>\").addClass(\"plate-setup-bottom-table-container\");\n        this.bottomTable = this._createElement(\"<table></table>\").addClass(\"plate-setup-bottom-table\");\n        this.bottomTableHead = this._createElement(\"<thead></thead>\");\n        this.bottomTableBody = this._createElement(\"<tbody></tbody>\");\n        this.bottomTable.append(this.bottomTableHead);\n        this.bottomTable.append(this.bottomTableBody);\n        this.bottomTableContainer.append(this.bottomTable);\n        this.bottomContainer.append(this.bottomTableContainer);\n        this.container.append(this.bottomContainer);\n      },\n\n      addBottomTableHeadings: function() {\n\n        var row = this._createElement(\"<tr></tr>\");\n\n        var singleField = this._createElement(\"<th></th>\")\n          .text(\"Group\");\n        row.prepend(singleField);\n\n        this.rowCounter = 1;\n\n        for (var i = 0; i < this.globalSelectedAttributes.length; i++) {\n          var attr = this.globalSelectedAttributes[i];\n          var field = this.fieldMap[attr];\n          var singleField = this._createElement(\"<th></th>\").text(field.name);\n          row.append(singleField);\n          this.rowCounter = this.rowCounter + 1;\n        }\n\n        // Now we append all the captions at the place.\n        this.bottomTableBody.empty();\n        this.bottomTableHead.empty();\n        this.bottomTableHead.append(row);\n        this.adjustFieldWidth(this.bottomRow);\n      },\n\n      tileAttrText: function(tile, attr) {\n        var well = this.engine.derivative[tile.index];\n        var field = this.fieldMap[attr];\n        return field.getText(well[attr]);\n      },\n\n      addBottomTableRow: function(color, singleStack) {\n        var that = this;\n        var modelTile = this.allTiles[singleStack[0]];\n        var row = this._createElement(\"<tr></tr>\");\n        var plateIdDiv = this._createElement(\"<td></td>\").addClass(\"plate-setup-bottom-id\");\n        var numberText = this._createElement(\"<button/>\");\n        numberText.addClass(\"plate-setup-color-text\");\n        numberText.text(color);\n        plateIdDiv.append(numberText);\n\n        numberText.click(function(evt) {\n          var addressToSelect = singleStack.map(function(addressIdx) {\n            return that.indexToAddress(addressIdx)\n          });\n          if (evt.ctrlKey) {\n            that.getSelectedAddress().forEach(function(val) {\n              if (addressToSelect.indexOf(val) < 0) {\n                addressToSelect.push(val);\n              }\n            })\n          }\n          that.setSelectedWell(addressToSelect);\n          that._trigger(\"selectedWells\", null, {selectedAddress: that.getSelectedAddress()});\n        });\n\n        if (color > 0) {\n          color = ((color - 1) % (this.colorPairs.length - 1)) + 1;\n        }\n        var colorStops = this.colorPairs[color];\n\n        plateIdDiv.css(\"background\", \"linear-gradient(to right, \" + colorStops[0] + \" , \" + colorStops[1] + \")\");\n\n        row.append(plateIdDiv);\n\n        for (var i = 0; i < this.globalSelectedAttributes.length; i++) {\n          var attr = this.globalSelectedAttributes[i];\n          var text = this.tileAttrText(modelTile, attr);\n          var dataDiv = this._createElement(\"<td></td>\").text(text);\n          row.append(dataDiv);\n        }\n        this.bottomTableBody.append(row);\n        this.adjustFieldWidth(row);\n      },\n\n      bottomForFirstTime: function() {\n        this.addBottomTableHeadings();\n        // This is executed for the very first time.. !\n        var row = this._createElement(\"<tr></tr>\");\n\n        var colorStops = this.colorPairs[0];\n        var plateIdDiv = this._createElement(\"<td></td>\");\n        plateIdDiv.css(\"background\", \"-webkit-linear-gradient(left, \" + colorStops[0] + \" , \" + colorStops[1] + \")\");\n        row.append(plateIdDiv);\n        this.bottomTableBody.append(row);\n        this.createExportButton();\n      },\n\n      adjustFieldWidth: function(row) {\n\n        var length = this.rowCounter;\n        if ((length) * 150 > 1024) {\n          row.css(\"width\", (length) * 152 + \"px\");\n        }\n      },\n\n      downloadCSV: function(csv, filename) {\n        var csvFile;\n        var downloadLink;\n\n        // CSV file\n        csvFile = new Blob([csv], {\n          type: \"text/csv\"\n        });\n\n        // Download link\n        downloadLink = document.createElement(\"a\");\n\n        // File name\n        downloadLink.download = filename;\n\n        // Create a link to the file\n        downloadLink.href = window.URL.createObjectURL(csvFile);\n\n        // Hide download link\n        downloadLink.style.display = \"none\";\n\n        // Add the link to DOM\n        document.body.appendChild(downloadLink);\n\n        // Click download link\n        downloadLink.click();\n      },\n\n      exportData: function(format) {\n        var data = [];\n        var rows = document.querySelectorAll(\"table tr\");\n\n        var colorLocMap = {};\n        var colorLocIdxMap = this.engine.stackUpWithColor;\n        var dim = this.getDimensions();\n        var that = this;\n        for (var colorIdx in colorLocIdxMap) {\n          colorLocMap[colorIdx] = colorLocIdxMap[colorIdx].map(function(locIdx) {\n            return that.indexToAddress(locIdx, dim);\n          })\n        }\n\n        for (var i = 0; i < rows.length; i++) {\n          var row = [],\n            cols = rows[i].querySelectorAll(\"td, th\");\n\n          for (var j = 0; j < cols.length; j++) {\n            var v = \"\";\n            if (cols[j].innerText) {\n              if (format === \"csv\") {\n                v = '\"' + cols[j].innerText.replace(/\"/g, '\"\"') + '\"';\n              } else {\n                v = cols[j].innerText;\n              }\n            }\n            row.push(v);\n\n            // add location column\n            if (i === 0 && j === 0) {\n              if (format === \"csv\") {\n                row.push('\"Location\"');\n              } else if (format === 'clipboard') {\n                row.push(\"Location\");\n              }\n\n            }\n            if (i !== 0 && j === 0) {\n              var loc = '';\n              if (colorLocMap[parseInt(cols[j].innerText)]) {\n                if (format === \"csv\") {\n                  loc = '\"' + colorLocMap[parseInt(cols[j].innerText)].join(\",\") + '\"';\n                } else if (format === 'clipboard') {\n                  loc = colorLocMap[parseInt(cols[j].innerText)].join(\",\");\n                }\n              }\n              row.push(loc);\n            }\n          }\n\n          if (format === \"csv\") {\n            data.push(row.join(\",\"));\n          } else if (format === 'clipboard') {\n            data.push(row.join(\"\\t\"));\n            //data.push(row);   // for text type\n          }\n\n        }\n        if (format === \"csv\") {\n          // Download CSV file\n          this.downloadCSV(data.join(\"\\n\"), 'table.csv');\n        } else if (format === 'clipboard') {\n          //return formatTableToString(data);   // for text type\n          return data.join(\"\\n\");\n        }\n      },\n\n      createExportButton: function() {\n        var that = this;\n        var overlayContainer = $(\"<div>\").addClass(\"plate-setup-bottom-control-container\");\n\n        var descriptionDiv = $(\"<div>\").addClass(\"plate-setup-overlay-text-container\");\n        descriptionDiv.text(\"Color groups\");\n        overlayContainer.append(descriptionDiv);\n\n        var buttonContainer = $(\"<div>\").addClass(\"plate-setup-overlay-bottom-button-container\");\n\n        // create export csv option\n        var exportButton = $(\"<button/>\").addClass(\"plate-setup-button\");\n        exportButton.text(\"Export CSV\");\n        buttonContainer.append(exportButton);\n\n        exportButton.click(function() {\n          that.exportData('csv');\n          exportButton.text(\"Exported\");\n          exportButton[0].classList.remove(\"plate-setup-button\");\n          exportButton.addClass(\"plate-setup-clicked-button\");\n          setTimeout(resetExportText, 3000);\n        });\n\n        function resetExportText() {\n          exportButton.text(\"Export CSV\");\n          exportButton[0].classList.remove(\"plate-setup-clicked-button\");\n          exportButton.addClass(\"plate-setup-button\");\n        }\n\n        // creat clipboard option, CLipboard is an external js file located in vendor/asset/javascripts\n        var clipboardButton = $(\"<button/>\").addClass(\"plate-setup-button\");\n        clipboardButton.text(\"Copy To Clipboard\");\n        buttonContainer.append(clipboardButton);\n\n        var clipboard = new ClipboardJS(clipboardButton.get(0), {\n          text: function() {\n            return that.exportData(\"clipboard\");\n          }\n        });\n\n        clipboard.on('success', function(e) {\n          clipboardButton.text(\"Copied as tab-delimited format\");\n          clipboardButton[0].classList.remove(\"plate-setup-button\");\n          clipboardButton.addClass(\"plate-setup-clicked-button\");\n          setTimeout(resetClipboardText, 3000);\n        });\n\n        function resetClipboardText() {\n          clipboardButton.text(\"Copy To Clipboard\");\n          clipboardButton[0].classList.remove(\"plate-setup-clicked-button\");\n          clipboardButton.addClass(\"plate-setup-button\");\n        }\n\n        clipboard.on('error', function(e) {\n          clipboardButton.text(\"Failed to copy table to clipboard: browser may be incompatible\");\n          setTimeout(resetClipboardText, 3000);\n        });\n\n        overlayContainer.append(buttonContainer);\n        this.bottomContainer.prepend(overlayContainer);\n      }\n    };\n  }\n})(jQuery, fabric);","var plateLayOutWidget = plateLayOutWidget || {};\n\n(function($, fabric) {\n\n  plateLayOutWidget.canvas = function() {\n    //\n    return {\n\n      allSelectedObjects: null, // Contains all the selected objets, when click and drag.\n\n      allPreviouslySelectedObjects: null,\n\n      colorPointer: 0,\n\n      goldenRatio: 0.618033988749895,\n\n      _createCanvas: function() {\n        this.normalCanvas = this._createElement(\"<canvas>\").attr(\"id\", \"DNAcanvas\");\n        $(this.canvasContainer).append(this.normalCanvas);\n      },\n\n      _initiateFabricCanvas: function() {\n        var w = this.canvasContainer.width();\n        var h = this.canvasContainer.height();\n\n        this._setCanvasArea(w, h);\n\n        this.mainFabricCanvas = new fabric.Canvas('DNAcanvas', {\n          backgroundColor: '#f5f5f5',\n          selection: false,\n          stateful: false,\n          hoverCursor: \"pointer\",\n          renderOnAddRemove: false,\n        })\n          .setWidth(w)\n          .setHeight(h);\n      },\n\n    };\n  }\n})(jQuery, fabric);","var plateLayOutWidget = plateLayOutWidget || {};\n\n(function($, fabric) {\n\n  plateLayOutWidget.checkBox = function() {\n    // For those check boxes associated with every field in the tab\n    return {\n\n      globalSelectedAttributes: [],\n\n      _addCheckBox: function(field) {\n        var checkImage = $(\"<span>\").html(this._assets.dontImg).addClass(\"plate-setup-tab-check-box bg-light\")\n          .data(\"clicked\", false);\n        checkImage.data(\"linkedFieldId\", field.id);\n        field.root.find(\".plate-setup-tab-field-left-side\").empty().append(checkImage);\n        this._applyCheckboxHandler(checkImage); // Adding handler for change the image when clicked\n        field.checkbox = checkImage;\n      },\n\n      _applyCheckboxHandler: function(checkBoxImage) {\n        // We add checkbox handler here, thing is it s not checkbox , its an image and we change\n        // source\n        var that = this;\n        checkBoxImage.click(function(evt, machineClick) {\n          var checkBox = $(this);\n\n          var changes = {};\n          changes[checkBox.data(\"linkedFieldId\")] = !checkBox.data(\"clicked\");\n\n          that.changeCheckboxes(changes);\n        });\n      },\n\n      changeSubFieldsCheckboxes: function(field, changes) {\n        var that = this;\n        var subFieldToInclude = [];\n\n        field.subFieldList.forEach(function(subField) {\n          var checkImage = subField.checkbox;\n          var fieldId = checkImage.data(\"linkedFieldId\");\n          var clicked = checkImage.data(\"clicked\");\n          if (fieldId in changes) {\n            clicked = Boolean(changes[fieldId]);\n          }\n          checkImage.data(\"clicked\", clicked);\n          if (clicked) {\n            checkImage.html(that._assets.doImg);\n            subFieldToInclude.push(subField.id);\n          } else {\n            checkImage.html(that._assets.dontImg);\n          }\n        });\n        return subFieldToInclude;\n      },\n\n      changeCheckboxes: function(changes) {\n        var gsa = [];\n        var multiplexCheckedSubField = {};\n        for (var i = 0; i < this.fieldList.length; i++) {\n          var field = this.fieldList[i];\n          if (field.checkbox) {\n            if (field.subFieldList) {\n              multiplexCheckedSubField[field.id] = this.changeSubFieldsCheckboxes(field, changes);\n            }\n\n            var checkImage = field.checkbox;\n            var fieldId = checkImage.data(\"linkedFieldId\");\n            var clicked = checkImage.data(\"clicked\");\n            if (fieldId in changes) {\n              clicked = Boolean(changes[fieldId]);\n            }\n            checkImage.data(\"clicked\", clicked);\n            if (clicked) {\n              gsa.push(fieldId);\n              checkImage.html(this._assets.doImg);\n            } else {\n              checkImage.html(this._assets.dontImg);\n            }\n          }\n        }\n        this.globalSelectedMultiplexSubfield = multiplexCheckedSubField;\n        this.globalSelectedAttributes = gsa;\n        this._clearPresetSelection();\n        this._colorMixer();\n      },\n\n      setSubFieldCheckboxes: function(field, fieldIds) {\n        var that = this;\n        var subFieldToInclude = [];\n        field.subFieldList.forEach(function(subField) {\n          var checkImage = subField.checkbox;\n          var fieldId = checkImage.data(\"linkedFieldId\");\n          var clicked = fieldIds.indexOf(fieldId) >= 0;\n          checkImage.data(\"clicked\", clicked);\n          if (clicked) {\n            checkImage.html(that._assets.doImg);\n            subFieldToInclude.push(subField.id);\n          } else {\n            checkImage.html(that._assets.dontImg);\n          }\n        });\n        return subFieldToInclude;\n      },\n\n      setCheckboxes: function(fieldIds) {\n        fieldIds = fieldIds || [];\n        var gsa = [];\n        var multiplexCheckedSubField = {};\n\n        for (var i = 0; i < this.fieldList.length; i++) {\n          var field = this.fieldList[i];\n          if (field.checkbox) {\n            // special handling for multiplex field\n            if (field.subFieldList) {\n              multiplexCheckedSubField[field.id] = this.setSubFieldCheckboxes(field, fieldIds);\n            }\n\n            var checkImage = field.checkbox;\n            var fieldId = checkImage.data(\"linkedFieldId\");\n            var clicked = fieldIds.indexOf(fieldId) >= 0;\n            checkImage.data(\"clicked\", clicked);\n            if (clicked) {\n              gsa.push(fieldId);\n              checkImage.html(this._assets.doImg);\n            } else {\n\n              checkImage.html(this._assets.dontImg);\n            }\n          }\n        }\n        this.globalSelectedMultiplexSubfield = multiplexCheckedSubField;\n        this.globalSelectedAttributes = gsa;\n        this._clearPresetSelection();\n        this._colorMixer();\n      }\n\n    };\n  }\n})(jQuery, fabric);","var plateLayOutWidget = plateLayOutWidget || {};\n\n(function($, fabric) {\n\n  plateLayOutWidget.colorManager = function() {\n\n    return {\n      // See these are color pairs for the gradient.\n      colorPairs: [\n        [\"#e6e6e6\", \"#808080\"],\n        [\"#66e8ff\", \"#0082c8\"],\n        [\"#ff7fb1\", \"#e6194b\"],\n        [\"#a2ffb1\", \"#3cb44b\"],\n        [\"#f784ff\", \"#911eb4\"],\n        [\"#ffe897\", \"#f58231\"],\n        [\"#6666ff\", \"#0000FF\"],\n        [\"#ffff7f\", \"#ffe119\"],\n        [\"#acffff\", \"#46f0f0\"],\n        [\"#ff98ff\", \"#f032e6\"],\n        [\"#ffffa2\", \"#d2f53c\"],\n        [\"#ffffff\", \"#fabebe\"],\n        [\"#66e6e6\", \"#008080\"],\n        [\"#ffffff\", \"#e6beff\"],\n        [\"#ffd48e\", \"#aa6e28\"],\n        [\"#e66666\", \"#800000\"],\n        [\"#ffffff\", \"#aaffc3\"],\n        [\"#e6e666\", \"#808000\"],\n        [\"#ffffff\", \"#ffd8b1\"],\n        [\"#66a9ef\", \"#004389\"],\n        [\"#ff6672\", \"#a7000c\"],\n        [\"#66db72\", \"#00750c\"],\n        [\"#b866db\", \"#520075\"],\n        [\"#ffa966\", \"#b64300\"],\n        [\"#ffff66\", \"#c0a200\"],\n        [\"#6dffff\", \"#07b1b1\"],\n        [\"#ff66ff\", \"#b100a7\"],\n        [\"#f9ff66\", \"#93b600\"],\n        [\"#ffe5e5\", \"#bb7f7f\"],\n        [\"#66a7a7\", \"#004141\"],\n        [\"#ffe5ff\", \"#a77fc0\"],\n        [\"#d19566\", \"#6b2f00\"],\n        [\"#ffffef\", \"#c0bb89\"],\n        [\"#d1ffea\", \"#6bc084\"],\n        [\"#a7a766\", \"#414100\"],\n        [\"#ffffd8\", \"#c09972\"],\n        [\"#a5ffff\", \"#3fc1ff\"],\n        [\"#ffbef0\", \"#ff588a\"],\n        [\"#e1fff0\", \"#7bf38a\"],\n        [\"#ffc3ff\", \"#d05df3\"],\n        [\"#ffffd6\", \"#ffc170\"],\n        [\"#a5a5ff\", \"#3f3fff\"],\n        [\"#ffffbe\", \"#ffff58\"],\n        [\"#ebffff\", \"#85ffff\"],\n        [\"#ffd7ff\", \"#ff71ff\"],\n        [\"#a5ffff\", \"#3fbfbf\"],\n        [\"#ffffcd\", \"#e9ad67\"],\n        [\"#ffa5a5\", \"#bf3f3f\"],\n        [\"#ffffa5\", \"#bfbf3f\"]\n      ]\n    }\n  }\n\n})(jQuery, fabric);","var plateLayOutWidget = plateLayOutWidget || {};\n\n(function($, fabric) {\n\n  plateLayOutWidget.createCanvasElements = function() {\n    // this class manages creating all the elements within canvas\n    return {\n\n      scaleFactor: 1,\n\n      baseSizes: {\n        spacing: 48,\n        tile_radius: 22,\n        center_radius_complete: 10,\n        center_radius_incomplete: 14,\n        label_size: 14,\n        label_spacing: 24,\n        text_size: 13,\n        stroke: 0.5,\n        gap: 2\n      },\n\n      _setCanvasArea: function(w, h) {\n        this.scaleFactor = Math.min(\n          h / (this.dimensions.rows * this.baseSizes.spacing + this.baseSizes.label_spacing),\n          w / (this.dimensions.cols * this.baseSizes.spacing + this.baseSizes.label_spacing));\n\n        var sizes = {};\n        for (var prop in this.baseSizes) {\n          sizes[prop] = this.baseSizes[prop] * this.scaleFactor;\n        }\n        this.sizes = sizes;\n      },\n\n      _canvas: function() {\n        // Those 1,2,3 s and A,B,C s\n        this._fixRowAndColumn();\n\n        // All those circles in the canvas.\n        this._putCircles();\n      },\n\n      _fixRowAndColumn: function() {\n        var cols = this.dimensions.cols;\n        var rows = this.dimensions.rows;\n\n        var spacing = this.sizes.spacing;\n        var d1 = this.sizes.label_spacing / 2;\n        var d2 = this.sizes.label_spacing + this.sizes.spacing / 2;\n        var fontSize = this.sizes.label_size;\n\n        // For column\n        var top = d1;\n        var left = d2;\n        for (var i = 1; i <= cols; i++) {\n          var tempFabricText = new fabric.IText(i.toString(), {\n            fill: 'black',\n            originX: 'center',\n            originY: 'center',\n            fontSize: fontSize,\n            top: top,\n            left: left,\n            fontFamily: 'sans-serif',\n            selectable: false,\n            fontWeight: \"400\"\n          });\n          left += spacing;\n\n          this.mainFabricCanvas.add(tempFabricText);\n        }\n\n        // for row\n        top = d2;\n        left = d1;\n        for (var i = 1; i <= rows; i++) {\n          var tempFabricText = new fabric.IText(this.rowIndex[i - 1], {\n            fill: 'black',\n            originX: 'center',\n            originY: 'center',\n            fontSize: fontSize,\n            top: top,\n            left: left,\n            fontFamily: 'sans-serif',\n            selectable: false,\n            fontWeight: \"400\"\n          });\n          top += spacing;\n\n          this.mainFabricCanvas.add(tempFabricText);\n        }\n      },\n\n      _putCircles: function() {\n        var cols = this.dimensions.cols;\n        var rows = this.dimensions.rows;\n\n        var tileCounter = 0;\n        for (var row = 0; row < rows; row++) {\n          for (var col = 0; col < cols; col++) {\n            var index = this.allTiles.length;\n            var tile = this._createTile(row, col);\n            tile.index = tileCounter++;\n            this.allTiles.push(tile);\n            this.mainFabricCanvas.add(tile.background);\n            this.mainFabricCanvas.add(tile.highlight);\n            this.mainFabricCanvas.add(tile.circle);\n            this.mainFabricCanvas.add(tile.circleCenter);\n            this.mainFabricCanvas.add(tile.circleText);\n          }\n        }\n\n        this._addLargeRectangleOverlay();\n        this._fabricEvents();\n      },\n\n      _createTile: function(row, col) {\n        var tile = {};\n\n        tile.visible = false;\n        tile.colorIndex = null;\n        tile.row = row;\n        tile.col = col;\n        tile.address = this.rowIndex[row] + (col + 1);\n\n        var top = (row + 1) * this.sizes.spacing;\n        var left = (col + 1) * this.sizes.spacing;\n\n        tile.background = new fabric.Circle({\n          top: top,\n          left: left,\n          radius: this.sizes.tile_radius,\n          originX: 'center',\n          originY: 'center',\n          hasControls: false,\n          hasBorders: false,\n          lockMovementX: true,\n          lockMovementY: true,\n          evented: false,\n        });\n\n        tile.background.setGradient(\"fill\", {\n          type: \"radial\",\n          x1: this.sizes.tile_radius,\n          x2: this.sizes.tile_radius,\n          y1: this.sizes.tile_radius + this.sizes.gap,\n          y2: this.sizes.tile_radius + this.sizes.gap,\n          r1: this.sizes.tile_radius - this.sizes.gap,\n          r2: this.sizes.tile_radius,\n          colorStops: {\n            0: 'rgba(0,0,0,0.1)',\n            1: 'rgba(0,0,0,0.2)'\n          }\n        });\n\n        tile.highlight = new fabric.Rect({\n          originX: 'center',\n          originY: 'center',\n          top: top,\n          left: left,\n          width: this.sizes.spacing,\n          height: this.sizes.spacing,\n          fill: \"rgba(0,0,0,0.4)\",\n          evented: false,\n          visible: false\n        });\n\n        tile.circle = new fabric.Circle({\n          originX: 'center',\n          originY: 'center',\n          top: top,\n          left: left,\n          radius: this.sizes.tile_radius,\n          stroke: 'gray',\n          strokeWidth: this.sizes.stroke,\n          evented: false,\n          visible: false\n        });\n\n        tile.circleCenter = new fabric.Circle({\n          originX: 'center',\n          originY: 'center',\n          top: top,\n          left: left,\n          radius: this.sizes.center_radius_incomplete,\n          fill: \"white\",\n          stroke: 'gray',\n          strokeWidth: this.sizes.stroke,\n          evented: false,\n          visible: false\n        });\n\n        tile.circleText = new fabric.IText(\"\", {\n          originX: 'center',\n          originY: 'center',\n          top: top,\n          left: left,\n          fill: 'black',\n          fontFamily: 'sans-serif',\n          fontSize: this.sizes.text_size,\n          lockScalingX: true,\n          lockScalingY: true,\n          evented: false,\n          visible: false\n        });\n\n        return tile;\n      },\n\n      setTileComplete: function(tile, complete) {\n        if (complete) {\n          tile.circleCenter.radius = this.sizes.center_radius_complete;\n          tile.circleText.fill = \"black\";\n          tile.circleText.fontWeight = 'normal';\n        } else {\n          tile.circleCenter.radius = this.sizes.center_radius_incomplete;\n          tile.circleText.fill = \"red\";\n          tile.circleText.fontWeight = 'bold';\n        }\n      },\n\n      setTileVisible: function(tile, visible) {\n        tile.visible = visible;\n        tile.circle.visible = tile.visible;\n        tile.circleCenter.visible = tile.visible;\n        tile.circleText.visible = tile.visible;\n      },\n\n      setTileColor: function(tile, color) {\n        this.setTileVisible(tile, true);\n        tile.colorIndex = parseInt(color);\n        tile.circleText.text = String(tile.colorIndex);\n\n        if (color > 0) {\n          color = ((color - 1) % (this.colorPairs.length - 1)) + 1;\n        }\n        var colorStops = this.colorPairs[color];\n\n        tile.circle.setGradient(\"fill\", {\n          y2: 2 * this.sizes.tile_radius,\n          colorStops: colorStops\n        });\n      },\n\n      _addLargeRectangleOverlay: function() {\n\n        this.overLay = new fabric.Rect({\n          width: 632,\n          height: 482,\n          left: 0,\n          top: 0,\n          opacity: 0.0,\n          originX: 'left',\n          originY: 'top',\n          lockMovementY: true,\n          lockMovementX: true,\n          selectable: false\n        });\n\n        this.mainFabricCanvas.add(this.overLay);\n      }\n    };\n  }\n})(jQuery, fabric);\n","var plateLayOutWidget = plateLayOutWidget || {};\n\n(function($, fabric) {\n\n  plateLayOutWidget.createField = function() {\n    // It creates those fields in the tab , there is 4 types of them.\n    return {\n\n      _createField: function(field) {\n        switch (field.data.type) {\n          case \"text\":\n            this._createTextField(field);\n            break;\n\n          case \"numeric\":\n            this._createNumericField(field);\n            break;\n\n          case \"select\":\n            this._createSelectField(field);\n            break;\n\n          case \"multiselect\":\n            this._createMultiSelectField(field);\n            break;\n\n          case \"boolean\":\n            this._createBooleanField(field);\n            break;\n\n          case \"multiplex\":\n            this._createMultiplexField(field);\n            break;\n        }\n      },\n\n      _createTextField: function(field) {\n        var id = field.id;\n        var that = this;\n        var input = this._createElement(\"<input>\").attr(\"id\", id)\n          .addClass(\"plate-setup-tab-input\");\n\n        field.root.find(\".plate-setup-tab-field-container\").append(input);\n        that.defaultWell[id] = null;\n\n        field.parseValue = function(v) {\n          if (v) {\n            v = String(v);\n          } else {\n            v = null;\n          }\n          return v;\n        };\n\n        field.getValue = function() {\n          var v = input.val().trim();\n          if (v == \"\") {\n            v = null;\n          }\n          return v;\n        };\n\n        field.setValue = function(v) {\n          input.val(v);\n        };\n\n        field.getText = function(v) {\n          if (v == null) {\n            return \"\";\n          }\n          return v;\n        };\n\n        field.disabled = function(bool) {\n          field.input.prop(\"disabled\", bool);\n        };\n\n        field.parseText = field.parseValue;\n\n        input.on(\"input\", function(e, generated) {\n          field.onChange();\n        });\n\n        field.input = input;\n      },\n\n      _createOpts: function(config) {\n        var opts = {\n          allowClear: true,\n          placeholder: \"select\",\n          minimumResultsForSearch: 10\n        };\n        var data_specified = false;\n\n        if (config.options) {\n          opts.data = config.options;\n          data_specified = true;\n        }\n        if (config.ajax) {\n          opts.ajax = ajax;\n          data_specified = true;\n        }\n        if (!data_specified) {\n          throw \"Must specify data or ajax\";\n        }\n        return opts;\n      },\n\n      _createSelectField: function(field) {\n        var id = field.id;\n        var that = this;\n        var input = this._createElement(\"<select/>\").attr(\"id\", id)\n          .addClass(\"plate-setup-tab-select-field\");\n\n        field.root.find(\".plate-setup-tab-field-container\").append(input);\n        that.defaultWell[id] = null;\n\n        var opts = that._createOpts(field.data);\n        var optMap = {};\n        opts.data.forEach(function(opt) {\n          optMap[String(opt.id)] = opt;\n        });\n\n        input.select2(opts);\n\n        field.parseValue = function(value) {\n          var v = value;\n\n          if (v === \"\") {\n            v = null;\n          }\n          if (v == null) {\n            return null;\n          }\n          v = String(v);\n          if (v in optMap) {\n            return optMap[v].id;\n          } else {\n            throw \"Invalid value \" + value + \" for select field \" + id;\n          }\n        };\n\n        field.disabled = function(bool) {\n          field.input.prop(\"disabled\", bool);\n        };\n\n        field.getValue = function() {\n          return field.parseValue(input.val());\n        };\n\n        field.setValue = function(v) {\n          input.val(v);\n          input.trigger(\"change.select2\")\n        };\n\n        field.getText = function(v) {\n          if (v == null) {\n            return \"\";\n          }\n          return optMap[String(v)].text;\n        };\n\n        field.parseText = function(value) {\n          var v = value;\n\n          if (v === \"\") {\n            v = null;\n          }\n          if (v == null) {\n            return null;\n          }\n          v = String(v);\n          if (v in optMap) {\n            return optMap[v].text;\n          } else {\n            throw \"Invalid text value \" + value + \" for select field \" + id;\n          }\n        };\n\n        input.on(\"change\", function(e, generated) {\n          field.onChange();\n        });\n\n\n        input.on('select2:unselect', function (evt) {\n            // Prevent select2 v4.0.6rc1 opening dropdown on unselect\n            input.one('select2:opening', function(e) { e.preventDefault(); });\n        });\n\n        field.input = input;\n      },\n\n      _createMultiSelectField: function(field) {\n        var id = field.id;\n        var that = this;\n        var input = this._createElement(\"<select/>\").attr(\"id\", id)\n          .addClass(\"plate-setup-tab-multiselect-field\");\n        input.attr(\"multiple\", \"multiple\");\n\n        field.root.find(\".plate-setup-tab-field-container\").append(input);\n        that.defaultWell[id] = null;\n\n        var opts = that._createOpts(field.data);\n        opts.multiple = true;\n        var optMap = {};\n        opts.data.forEach(function(opt) {\n          optMap[String(opt.id)] = opt;\n        });\n        input.select2(opts);\n\n        field.disabled = function(bool) {\n          input.prop(\"disabled\", bool);\n        };\n\n        field._parseOne = function(val) {\n          val = String(val);\n          if (val in optMap) {\n            return optMap[val].id;\n          } else {\n            throw \"Invalid value \" + val + \" for multiselect field \" + id;\n          }\n        };\n\n        field._parseMany = function(vals) {\n          if (vals && vals.length) {\n            vals = vals.map(field._parseOne);\n          } else {\n            vals = null;\n          }\n          return vals;\n        }\n\n        field.parseValue = function(value) {\n          return field._parseMany(value);\n        };\n\n        field.getValue = function() {\n          return field._parseMany(input.val());\n        };\n\n        field.setValue = function(v) {\n          v = v || [];\n          input.val(v);\n          input.trigger(\"change.select2\");\n        };\n\n        field.getText = function(v) {\n          if (v == null) {\n            return \"\";\n          }\n          if (v.length > 0) {\n            return v.map(function(v) {\n              return optMap[String(v)].text\n            }).join(\"; \");\n          }\n          return \"\";\n        };\n\n        field.multiOnChange = function(added, removed) {\n          if (added) {\n            added = added.id;\n          }\n          if (removed) {\n            removed = removed.id;\n          }\n          var data = {};\n          data[field.id] = {\n            multi: true,\n            added: added,\n            removed: removed\n          };\n\n          that._addAllData(data);\n        };\n\n        field.parseText = function(value) {\n          var v = value;\n          if (v && v.length) {\n            v = v.map(function(opt) {\n              opt = String(opt);\n              if (opt in optMap) {\n                return optMap[opt].text;\n              } else {\n                throw \"Invalid text value \" + opt + \" for multiselect field \" + id;\n              }\n            });\n          } else {\n            v = null;\n          }\n          return v;\n        };\n\n        input.on(\"select2:select\", function (e) {\n          var v = field._parseOne(e.params.data.id)\n          v = {id: v};\n          field.multiOnChange(v, null);\n        });\n\n        input.on(\"select2:unselect\", function (e) {\n          var v = field._parseOne(e.params.data.id)\n          v = {id: v};\n          field.multiOnChange(null, v);\n          // Prevent select2 v4.0.6rc1 opening dropdown on unselect\n          input.one('select2:opening', function(e) { e.preventDefault(); });\n        });\n\n        field.input = input;\n\n        that._createDeleteButton(field);\n      },\n\n      _createNumericField: function(field) {\n        var id = field.id;\n        var data = field.data;\n        var that = this;\n        var input = this._createElement(\"<input>\").addClass(\"plate-setup-tab-input\")\n          .attr(\"placeholder\", data.placeholder || \"\").attr(\"id\", id);\n\n        field.root.find(\".plate-setup-tab-field-container\").append(input);\n        that.defaultWell[id] = null;\n\n        // Adding unit\n        var units = data.units || [];\n        var defaultUnit = data.defaultUnit || null;\n        var unitInput = null;\n        if (defaultUnit) {\n          if (units.length) {\n            if (units.indexOf(defaultUnit) < 0) {\n              defaultUnit = units[0];\n            }\n          } else {\n            units = [defaultUnit];\n          }\n        } else {\n          if (units.length) {\n            defaultUnit = units[0];\n          }\n        }\n\n        if (units.length) {\n          field.units = units;\n          field.hasUnits = true;\n          field.defaultUnit = defaultUnit;\n          if (units.length == 1) {\n            var unitText = $(\"<div></div>\").addClass(\"plate-setup-tab-unit\");\n            unitText.text(defaultUnit);\n            field.root.find(\".plate-setup-tab-field-container\").append(unitText);\n          } else {\n            unitInput = this._createElement(\"<select/>\").attr(\"id\", id)\n              .addClass(\"plate-setup-tab-label-select-field\");\n\n            field.root.find(\".plate-setup-tab-field-container\").append(unitInput);\n\n            var selected = null;\n            var unitData = units.map(function(unit) {\n              var o = {\n                id: unit,\n                text: unit\n              };\n              if (unit == defaultUnit) {\n                selected = unit;\n              }\n              return o;\n            });\n\n            var opts = {\n              data: unitData,\n              allowClear: false,\n              minimumResultsForSearch: 10\n            };\n\n            unitInput.select2(opts);\n            unitInput.val(selected);\n          }\n        }\n\n        field.disabled = function(bool) {\n          field.input.prop(\"disabled\", bool);\n          if (unitInput) {\n            unitInput.prop(\"disabled\", bool);\n          }\n        };\n\n        field.setUnitOpts = function(opts) {\n          field.units = opts || null;\n          field.defaultUnit = null;\n\n          var newUnits = [];\n          var selected = null;\n          if (field.units && field.units.length) {\n            field.defaultUnit = field.units[0];\n            newUnits = field.units.map(function(curUnit) {\n              var cleanUnit = {\n                id: curUnit,\n                text: curUnit\n              };\n              if (curUnit == field.defaultUnit) {\n                selected = curUnit;\n              }\n              return cleanUnit;\n            });\n          }\n\n          var newOpts = {\n            data: newUnits,\n            allowClear: false,\n            minimumResultsForSearch: 10\n          };\n          unitInput.select2(\"destroy\");\n          unitInput.val(null);\n          unitInput.empty();\n          unitInput.select2(newOpts);\n          unitInput.val(selected);\n        };\n\n        field.parseValue = function(value) {\n          var v;\n          if ($.isPlainObject(value)) {\n            if (field.hasUnits) {\n              v = field.parseRegularValue(value.value);\n              if (v === null) {\n                return null;\n              }\n              return {\n                value: v,\n                unit: field.parseUnit(value.unit)\n              };\n            } else {\n              throw \"Value must be plain numeric for numeric field \" + id;\n            }\n          } else {\n            if (field.hasUnits) {\n              v = field.parseRegularValue(value);\n              if (v === null) {\n                return null;\n              }\n              return {\n                value: v,\n                unit: field.defaultUnit\n              };\n            } else {\n              return field.parseRegularValue(value);\n            }\n          }\n        };\n\n        field.getValue = function() {\n          var v = field.getRegularValue();\n\n          if ((v === null) || isNaN(v)) {\n            return null;\n          } else if (field.hasUnits) {\n            var returnVal = {\n              value: v,\n              unit: field.getUnit()\n            };\n\n            if (field.data.hasMultiplexUnit) {\n              // include unitTypeId and UnitId to returnVal\n              for (var unitTypeKey in field.data.unitMap) {\n                var unitTypeUnits = field.data.unitMap[unitTypeKey];\n                unitTypeUnits.forEach(function(unit) {\n                  if (unit.text === returnVal.unit) {\n                    returnVal['unitTypeId'] = unitTypeKey;\n                    returnVal['unitId'] = unit.id;\n                  }\n                })\n              }\n            }\n            return returnVal;\n          } else {\n            return v;\n          }\n        };\n\n        field.setValue = function(value) {\n          if (field.hasUnits) {\n            if ($.isPlainObject(value)) {\n              field.setUnit(value.unit || field.defaultUnit);\n              field.setRegularValue(value.value);\n\n            } else {\n              field.setRegularValue(value);\n              field.setUnit(field.defaultUnit)\n            }\n          } else {\n            field.setRegularValue(value);\n          }\n        };\n\n        field.parseRegularValue = function(value) {\n          if (value == null) {\n            return null;\n          }\n          var v = String(value).trim();\n          if (v === \"\") {\n            return null;\n          }\n          v = Number(value);\n          if (isNaN(v)) {\n            throw \"Invalid value \" + value + \" for numeric field \" + id;\n          }\n          return v;\n        };\n\n        field.getRegularValue = function() {\n          var v = input.val().trim();\n          if (v == \"\") {\n            v = null;\n          } else {\n            v = Number(v);\n          }\n          return v;\n        };\n\n        field.setRegularValue = function(value) {\n          input.val(value);\n        };\n\n        field.parseUnit = function(unit) {\n          if (unit == null || unit === \"\") {\n            return field.defaultUnit;\n          }\n          for (var i = 0; i < units.length; i++) {\n            if (unit.toLowerCase() == units[i].toLowerCase()) {\n              return units[i];\n            }\n          }\n          throw \"Invalid unit \" + unit + \" for field \" + id;\n        };\n\n        field.getUnit = function() {\n          if (unitInput) {\n            return unitInput.val();\n          } else {\n            return field.defaultUnit;\n          }\n        };\n\n        field.setUnit = function(unit) {\n          if (unitInput) {\n            unit = unit || field.defaultUnit;\n            unitInput.val(unit);\n            unitInput.trigger(\"change.select2\");\n          }\n        };\n\n        // val now contains unit\n        field.getText = function(val) {\n          if (typeof (val) === 'object' && val) {\n            var v = val.value;\n            var u = val.unit;\n            if (v == null) {\n              return \"\";\n            }\n            v = v.toString();\n            if (!u) {\n              u = defaultUnit;\n            }\n            if (u) {\n              v = v + \" \" + u;\n            }\n            return v;\n          } else {\n            return field.getRegularText(val);\n          }\n        };\n\n        field.getRegularText = function(v) {\n          if (v == null) {\n            return \"\";\n          }\n          v = v.toString();\n          return v;\n        };\n\n        field.parseText = function(v) {\n          var textVal = field.parseValue(v);\n          if (textVal && typeof (textVal) === \"object\") {\n            return textVal.value + textVal.unit;\n          } else if (textVal) {\n            return textVal\n          } else {\n            return null;\n          }\n        };\n\n        input.on(\"input\", function() {\n          var v = field.getRegularValue();\n          if (isNaN(v)) {\n            //flag field as invalid\n            input.addClass(\"invalid\");\n          } else {\n            input.removeClass(\"invalid\");\n          }\n          field.onChange();\n        });\n        if (unitInput) {\n          unitInput.on(\"change\", function() {\n            field.onChange();\n          });\n        }\n\n        field.input = input;\n        field.unitInput = unitInput;\n      },\n\n      _createBooleanField: function(field) {\n        var id = field.id;\n        var that = this;\n        var input = this._createElement(\"<select/>\").attr(\"id\", id)\n          .addClass(\"plate-setup-tab-select-field\");\n        that.defaultWell[id] = null;\n\n        field.root.find(\".plate-setup-tab-field-container\").append(input);\n        var tval = {\n          id: \"true\",\n          text: \"true\"\n        };\n        var fval = {\n          id: \"false\",\n          text: \"false\"\n        };\n        var opts = {\n          data: [tval, fval],\n          placeholder: \"select\",\n          allowClear: true,\n          minimumResultsForSearch: -1\n        };\n\n        input.select2(opts);\n\n        field.disabled = function(bool) {\n          field.input.prop(\"disabled\", bool);\n        };\n\n        field.parseValue = function(value) {\n          if (value == null) {\n            return null;\n          }\n          var v = String(value).trim().toLowerCase();\n          if (v === \"true\") {\n            v = true;\n          } else if (v === \"false\") {\n            v = false;\n          } else if (v === \"\") {\n            v = null;\n          } else {\n            throw \"Invalid value \" + value + \" for boolean field \" + id;\n          }\n          return v;\n        };\n\n        field.getValue = function() {\n          var v = input.val();\n          switch (v) {\n            case \"true\":\n              return true;\n            case \"false\":\n              return false;\n            default:\n              return null;\n          }\n        };\n\n        field.setValue = function(v) {\n          if (v == true || v === \"true\") {\n            v = \"true\";\n          } else if (v == false || v === \"false\") {\n            v = \"false\";\n          } else {\n            v = null;\n          }\n          input.val(v);\n          input.trigger(\"change.select2\");\n        };\n\n        field.getText = function(v) {\n          if (v == null) {\n            return \"\";\n          }\n          return v.toString();\n        };\n\n        field.parseText = field.parseValue;\n\n        input.on(\"change\", function(e) {\n          field.onChange();\n        });\n\n\n        input.on('select2:unselect', function (evt) {\n          // Prevent select2 v4.0.6rc1 opening dropdown on unselect\n          input.one('select2:opening', function(e) { e.preventDefault(); });\n        });\n\n        field.input = input;\n      },\n\n      _createMultiplexField: function(field) {\n        var that = this;\n        // make correct multiplex data\n        this._createMultiSelectField(field);\n        // overwrite default well for multiplex field\n        that.defaultWell[field.id] = [];\n\n        // single select\n        var nameContainer1 = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-name-singleSelect\").text(\"Select to edit\");\n        var fieldContainer1 = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-container-singleSelect\");\n        field.root.find(\".plate-setup-tab-field-right-side\").append(nameContainer1, fieldContainer1);\n\n        field.singleSelect = this._createElement(\"<select/>\").attr(\"id\", field.id + \"SingleSelect\")\n          .addClass(\"plate-setup-tab-multiplex-single-select-field\");\n\n        field.singleSelect.appendTo(fieldContainer1);\n\n        var multiselectSetValue = field.setValue;\n\n        field.singleSelectValue = function() {\n          var v = field.singleSelect.val();\n          if (v === \"\") {\n            return null;\n          }\n          if (v == null) {\n            return null;\n          }\n          return field._parseOne(v)\n        };\n\n        var setSingleSelectOptions = function(v, selected_v) {\n          var opts = {\n            allowClear: false,\n            placeholder: \"select\",\n            minimumResultsForSearch: 10,\n            data: v || []\n          };\n          if (!selected_v) {\n            if (opts.data.length) {\n              selected_v = opts.data[0].id;\n            } else {\n              selected_v = null;\n            }\n          }\n          if (field.singleSelect.hasClass(\"select2-hidden-accessible\")) {\n            field.singleSelect.select2(\"destroy\");\n          }\n          field.singleSelect.val(null);\n          field.singleSelect.empty();\n          field.singleSelect.select2(opts);\n          field.singleSelect.val(selected_v);\n          field.singleSelect.prop(\"disabled\", opts.data.length == 0);\n          field.singleSelect.trigger(\"change.select2\");\n          field.singleSelect.on(\"change.select2\", singleSelectChange);\n        };\n\n        var singleSelectChange = function() {\n          var v = field.singleSelectValue();\n\n          field.updateSubFieldUnitOpts(v);\n\n          var curData = field.detailData || [];\n          var curSubField = null;\n          curData.forEach(function(val) {\n            if (val[field.id] === v) {\n              curSubField = val;\n            }\n          });\n\n          if (curSubField) {\n            // setvalue for subfield\n            field.subFieldList.forEach(function(subField) {\n              subField.disabled(false);\n              subField.setValue(curSubField[subField.id]);\n            });\n          } else {\n            field.subFieldList.forEach(function(subField) {\n              subField.disabled(true);\n              subField.setValue(null);\n            });\n          }\n          that.readOnlyHandler();\n        };\n\n        setSingleSelectOptions([]);\n\n        field._changeMultiFieldValue = function(added, removed) {\n          var newSubFieldValue = {};\n          for (var subFieldName in field.data.multiplexFields) {\n            var subFieldId = field.data.multiplexFields[subFieldName].id;\n            newSubFieldValue[subFieldId] = null;\n          }\n\n          var val;\n          if (added) {\n            if (added.value) {\n              val = added.value;\n            } else {\n              newSubFieldValue[field.id] = added.id;\n              val = newSubFieldValue;\n            }\n            added = {\n              id: added.id,\n              value: val\n            };\n          }\n\n          if (removed) {\n            if (removed.value) {\n              val = removed.value;\n            } else {\n              newSubFieldValue[field.id] = removed.id;\n              val = newSubFieldValue;\n            }\n            removed = {\n              id: removed.id,\n              value: val\n            };\n          }\n\n          var data = {};\n          data[field.id] = {\n            multi: true,\n            added: added,\n            removed: removed\n          };\n          that._addAllData(data);\n        };\n\n        // overwrite multiplex set value\n        field.setValue = function(v) {\n          // used to keep track of initially loaded multiplex data\n          field.detailData = v;\n          var multiselectValues = null;\n          if (v && v.length) {\n            multiselectValues = v.map(function(val) {\n              return val[field.id]\n            });\n          }\n\n          multiselectSetValue(multiselectValues);\n          var newOptions = field.input.select2('data') || [];\n          setSingleSelectOptions(newOptions);\n          singleSelectChange();\n        };\n\n        field.disabled = function(bool) {\n          field.input.prop(\"disabled\", bool);\n          field.subFieldList.forEach(function(subField) {\n            subField.disabled(bool);\n          });\n          if (bool) {\n            nameContainer1.text(\"Select to inspect\");\n          } else {\n            nameContainer1.text(\"Select to edit\");\n          }\n        };\n\n        field.parseValue = function(value) {\n          var v = value;\n          if (v && v.length) {\n            v = v.map(function(opt) {\n              var valMap = {};\n              valMap[field.id] = opt[field.id];\n              for (var subFieldId in opt) {\n                field.subFieldList.forEach(function(subField) {\n                  if (subField.id === subFieldId) {\n                    valMap[subField.id] = subField.parseValue(opt[subFieldId]);\n                  }\n                });\n              }\n              return valMap;\n            });\n          } else {\n            v = null;\n          }\n          return v;\n        };\n\n        field.updateSubFieldUnitOpts = function(val) {\n          var curOpts;\n          field.data.options.forEach(function(opt) {\n            if (opt.id === val) {\n              curOpts = opt;\n            }\n          });\n          field.subFieldList.forEach(function(subField) {\n            if (subField.data.hasMultiplexUnit) {\n              if (curOpts && curOpts.hasOwnProperty(\"unitOptions\")) {\n                subField.setUnitOpts(curOpts.unitOptions[subField.id]);\n              } else {\n                subField.setUnitOpts(null);\n              }\n            }\n          })\n        };\n\n        field.multiOnChange = function(added, removed) {\n          field._changeMultiFieldValue(added, removed);\n          var v = field.getValue();\n          var curData = field.detailData;\n          var curIds = [];\n          var curOpt = null;\n          //reshape data for saveback\n          if (curData) {\n            curIds = curData.map(function(val) {\n              return val[field.id]\n            });\n          }\n\n          var newMultiplexVal = [];\n          var selectList = [];\n          if (v) {\n            v.forEach(function(selectedVal) {\n              if (curData) {\n                curData.forEach(function(val) {\n                  if (val[field.id] === selectedVal) {\n                    newMultiplexVal.push(val)\n                  }\n                });\n              }\n              // cases when adding new data\n              if (curIds.indexOf(selectedVal) < 0) {\n                var newVal = {};\n                newVal[field.id] = selectedVal;\n\n                field.updateSubFieldUnitOpts(selectedVal);\n                field.subFieldList.forEach(function(subfield) {\n                  // special handling for subfield which has multiplexUnit\n                  if (subfield.hasUnits) {\n                    if (subfield.data.hasMultiplexUnit) {\n                      subfield.disabled(false);\n                      field.data.options.forEach(function(opt) {\n                        if (opt.id === selectedVal) {\n                          var val = {\n                            value: null,\n                            unit: subfield.units[0]\n                          };\n                          newVal[subfield.id] = subfield.parseValue(val);\n                        }\n                      });\n                    } else {\n                      if (subfield.data.units) {\n                        if (subfield.data.units.length > 1) {\n                          subfield.disabled(false);\n                        }\n                      }\n                      var val = {\n                        value: null,\n                        unit: subfield.defaultUnit\n                      };\n                      newVal[subfield.id] = subfield.parseValue(val);\n                    }\n                  } else {\n                    newVal[subfield.id] = subfield.parseValue(null);\n                  }\n                });\n                newMultiplexVal.push(newVal);\n              }\n            });\n\n            // make data for single select options\n            v.forEach(function(selectVal) {\n              field.data.options.forEach(function(opt) {\n                if (opt.id === selectVal) {\n                  selectList.push(opt);\n                }\n              });\n            });\n\n            var selected = field.singleSelectValue();\n            for (var i = 0; i < v.length; i++) {\n              if (added && (added.id === v[i])) {\n                curOpt = v[i];\n                break;\n              } else if (i === 0) {\n                curOpt = v[i];\n              } else if (v[i] === selected) {\n                curOpt = v[i];\n              }\n            }\n          }\n\n          field.detailData = newMultiplexVal;\n          setSingleSelectOptions(selectList, curOpt);\n          singleSelectChange();\n        };\n\n        field.getText = function(v) {\n          if (v === null) {\n            return \"\";\n          }\n          // get subfields that is selected from the checkbox\n          if (field.id in that.globalSelectedMultiplexSubfield) {\n            var checkedSubfields = that.globalSelectedMultiplexSubfield[field.id];\n            var returnVal = [];\n            for (var valIdx in v) {\n              var subV = v[valIdx];\n              var subText = [];\n              for (var optId in field.data.options) {\n                var opt = field.data.options[optId];\n                if (opt.id === subV[field.id]) {\n                  subText.push(opt.text);\n                }\n              }\n              field.subFieldList.forEach(function(subField) {\n                if (checkedSubfields.indexOf(subField.id) >= 0) {\n                  var x = subField.getText(subV[subField.id]);\n                  subText.push(subField.name + \": \" + x);\n                }\n              });\n              returnVal.push(\"{\" + subText.join(\", \") + \"}\");\n            }\n            return returnVal.join(\";\");\n          }\n        };\n\n        field.parseText = function(v) {\n          if (v === null) {\n            return \"\";\n          } else {\n            var returnVal = [];\n            for (var valIdx in v) {\n              var subV = v[valIdx];\n              var subText = [];\n              for (var optId in field.data.options) {\n                var opt = field.data.options[optId];\n                if (opt.id === subV[field.id]) {\n                  subText.push(opt.text);\n                }\n              }\n              field.subFieldList.forEach(function(subField) {\n                var x = subField.getText(subV[subField.id]);\n                if (x) {\n                  subText.push(x);\n                }\n              });\n              returnVal.push(subText);\n            }\n            return returnVal;\n          }\n        };\n\n        field.checkMultiplexCompletion = function(valList) {\n          var valCount = 0;\n          var completionPct = 0;\n          var include = false;\n\n          function getSubfieldStatus(vals) {\n            var req = 0;\n            var fill = 0;\n            for (var subFieldId in field.subFieldList) {\n              var subField = field.subFieldList[subFieldId];\n              var curVal = vals[subField.id];\n              if (subField.required) {\n                include = true;\n                req++;\n                if (typeof curVal === 'object' && curVal) {\n                  if (curVal.value) {\n                    fill++;\n                  }\n                } else if (curVal) {\n                  fill++;\n                }\n              }\n            }\n            return fill / req;\n          }\n\n          // for cases has value in multiplex field\n          if (valList) {\n            if (valList.length > 0) {\n              for (var idx in valList) {\n                valCount++;\n                var vals = valList[idx];\n                completionPct += getSubfieldStatus(vals);\n              }\n            } else if (field.required) {\n              include = true;\n              valCount = 1;\n            }\n          } else if (field.required) {\n            include = true;\n            valCount = 1;\n          }\n\n          return {\n            include: include,\n            completionPct: completionPct / valCount\n          };\n        };\n\n        // valList contains all of the vals for selected val\n        field.applyMultiplexSubFieldColor = function(valList) {\n          function updateSubFieldWarningMap(vals) {\n            for (var subFieldId in field.subFieldList) {\n              var subField = field.subFieldList[subFieldId];\n              // loop through each well's multiplexval list\n              if (vals === null) {\n                if (field.required && subField.required) {\n                  subFieldWarningMap[subField.id].warningStatus.push(true);\n                }\n              } else if (typeof (vals) === \"object\") {\n                if (vals.length === 0) {\n                  if (field.required && subField.required) {\n                    subFieldWarningMap[subField.id].warningStatus.push(true);\n                  }\n                } else {\n                  for (var multiplexIdx in vals) {\n                    var curVal = vals[multiplexIdx][subField.id];\n                    if (subField.required) {\n                      if (typeof (curVal) === 'object' && curVal) {\n                        if (!curVal.value) {\n                          subFieldWarningMap[subField.id].warningStatus.push(true);\n                        } else {\n                          subFieldWarningMap[subField.id].warningStatus.push(false);\n                        }\n                      } else if (!curVal) {\n                        subFieldWarningMap[subField.id].warningStatus.push(true);\n                      } else {\n                        subFieldWarningMap[subField.id].warningStatus.push(false);\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n\n          var subFieldWarningMap = {};\n          field.subFieldList.forEach(function(subField) {\n            if (subField.required) {\n              subFieldWarningMap[subField.id] = {\n                field: subField,\n                warningStatus: []\n              };\n            }\n          });\n\n          valList.forEach(function(multiplexVals) {\n            updateSubFieldWarningMap(multiplexVals);\n          });\n          // turn off main field when all subfield are filled\n\n          var requiredSubField = [];\n          var mainFieldStatus = [];\n          for (var subFieldId in subFieldWarningMap) {\n            var subField = subFieldWarningMap[subFieldId].field;\n            if (subFieldWarningMap[subFieldId].warningStatus.indexOf(true) >= 0) {\n              var text = subField.name + \" is a required subfield for \" + field.name + \", please make sure all \" + field.name + \" have \" + subField.name;\n              if (field.required) {\n                that.fieldWarningMsg(subField, text, true);\n                mainFieldStatus.push(true);\n              } else {\n                that.fieldWarningMsg(subField, text, true);\n                mainFieldStatus.push(true);\n              }\n            } else {\n              that.fieldWarningMsg(subField, \"none\", false);\n              mainFieldStatus.push(false);\n            }\n          }\n          var mainFieldWarning = false;\n          if (mainFieldStatus.indexOf(true) < 0) {\n            mainFieldWarning = false;\n          } else {\n            mainFieldWarning = true;\n          }\n          var warningText;\n          if (field.required) {\n            warningText = field.name + \" is a required field, please also fix missing required subfield(s) below\";\n          } else {\n            warningText = field.name + \" is not a required field, please fix missing required subfield(s) below or remove selected \" + field.name;\n          }\n          that.fieldWarningMsg(field, warningText, mainFieldWarning);\n        };\n\n        field.parseMainFieldVal = function(val) {\n          var optMap = field.data.options;\n          for (var idx = 0; idx < optMap.length; idx++) {\n            var curOpt = optMap[idx];\n            if (curOpt.id === val) {\n              return curOpt.text\n            }\n          }\n        };\n      },\n\n      _deleteDialog: function(field) {\n        var that = this;\n\n        var valMap = field.allSelectedMultipleVal;\n        var valToRemove;\n        if (valMap) {\n          valToRemove = Object.keys(valMap);\n        } else {\n          valToRemove = [];\n        }\n\n\n        var dialogDiv = $(\"<div/>\").addClass(\"plate-modal\");\n        this.container.append(dialogDiv);\n\n        function killDialog() {\n          dialogDiv.hide();\n          dialogDiv.remove();\n        }\n\n        var dialogContent = $(\"<div/>\").addClass(\"plate-modal-content\").css('width', '550px').appendTo(dialogDiv);\n        var tableArea = $(\"<div/>\").appendTo(dialogContent);\n        var buttonRow = $(\"<div/>\").addClass(\"dialog-buttons\").css(\"justify-content\", \"flex-end\").appendTo(dialogContent);\n\n        if (valToRemove.length > 0) {\n          // apply CSS property for table\n          $(\"<p/>\").text(field.name + \" in selected wells: choose items to delete and click the delete button below\").appendTo(tableArea);\n\n          var table = that._deleteDialogTable(field, valMap);\n          table.appendTo(tableArea);\n          table.addClass(\"plate-popout-table\");\n          table.find('td').addClass(\"plate-popout-td\");\n          table.find('th').addClass(\"plate-popout-th\");\n          table.find('tr').addClass(\"plate-popout-tr\");\n          if (!that.readOnly) {\n            var deleteCheckedButton = $(\"<button class='multiple-field-manage-delete-button'>Delete Checked Items</button>\");\n            buttonRow.append(deleteCheckedButton);\n            deleteCheckedButton.click(function() {\n              table.find(\"input:checked\").each(function() {\n                var val = this.value;\n                field.multiOnChange(null, {id: val});\n              });\n              // refresh selected fields after updating the multiplex field value\n              that.decideSelectedFields();\n              killDialog();\n            });\n          }\n\n        } else {\n          $(\"<p/>\").text(\"No \" + field.name + \" in the selected wells\").appendTo(tableArea);\n        }\n\n        var cancelButton = $(\"<button>Cancel</button>\");\n        buttonRow.append(cancelButton);\n        cancelButton.click(killDialog);\n\n        dialogDiv.show();\n\n        window.onclick = function(event) {\n          if (event.target == dialogDiv[0]) {\n            killDialog();\n          }\n        }\n      },\n\n      _deleteDialogTable: function(field, valMap) {\n        var that = this;\n        var colName = [field.name, \"Counts\"]; //Added because it was missing... no idea what the original should have been\n        if (!that.readOnly) {\n          colName.push(\"Delete\");\n        }\n        var table = $('<table/>');\n        var thead = $('<thead/>').appendTo(table);\n        var tr = $('<tr/>').appendTo(thead);\n\n        tr.append(colName.map(function(text) {\n          return $('<th/>').text(text);\n        }));\n\n        var tbody = $(\"<tbody/>\").appendTo(table);\n\n        field.data.options.forEach(function(opt) {\n          if (opt.id in valMap) {\n            var tr = $('<tr/>').appendTo(tbody);\n            var checkbox = $(\"<input type='checkbox'>\").prop(\"value\", opt.id);\n            $(\"<td/>\").text(opt.text).appendTo(tr);\n            $(\"<td/>\").text(valMap[opt.id]).appendTo(tr);\n            if (!that.readOnly) {\n              $(\"<td/>\").append(checkbox).appendTo(tr);\n            }\n          }\n        });\n\n        return table;\n      },\n\n      _createDeleteButton: function(field) {\n        var that = this;\n        var deleteButton = $(\"<button/>\").addClass(\"plate-setup-remove-all-button\");\n        deleteButton.id = field.id + \"Delete\";\n        deleteButton.text(\"Manage \" + field.name + \"...\");\n        var buttonContainer = that._createElement(\"<div></div>\").addClass(\"plate-setup-remove-all-button-container\");\n        buttonContainer.append(deleteButton);\n\n        field.deleteButton = deleteButton;\n        field.root.find(\".plate-setup-tab-field-right-side\").append(buttonContainer);\n\n        deleteButton.click(function() {\n          that._deleteDialog(field);\n        });\n      }\n\n    };\n  }\n})(jQuery, fabric);","var plateLayOutWidget = plateLayOutWidget || {};\n\n(function($, fabric) {\n\n  plateLayOutWidget.engine = function(THIS) {\n    // Methods which look after data changes and stack up accordingly\n    // Remember THIS points to plateLayOutWidget and 'this' points to engine\n    // Use THIS to refer parent this.\n    return {\n      engine: {\n\n        derivative: {},\n        colorMap: new Map(),\n        stackUpWithColor: {},\n        stackPointer: 2,\n\n        wellEmpty: function(well) {\n          for (var prop in well) {\n            var curVal = well[prop];\n            if (curVal !== null && curVal !== undefined) {\n              if (Array.isArray(curVal)) {\n                if (curVal.length > 0) {\n                  return false;\n                }\n              } else {\n                return false;\n              }\n            }\n          }\n          return true;\n        },\n\n        searchAndStack: function() {\n          // This method search and stack the change we made.\n          this.stackUpWithColor = {};\n          this.stackPointer = 1;\n          var derivativeJson = {};\n          for (var idx in this.derivative) {\n            var data = this.derivative[idx];\n            var wellData = {};\n            for (var i = 0; i < THIS.globalSelectedAttributes.length; i++) {\n              var attr = THIS.globalSelectedAttributes[i];\n\n              if (attr in THIS.globalSelectedMultiplexSubfield) {\n                var selectedSubFields = THIS.globalSelectedMultiplexSubfield[attr];\n                var newMultiplexVal = [];\n                for (var multiplexIdx in data[attr]) {\n                  var curMultiplexVals = data[attr][multiplexIdx];\n                  var newVal = {};\n                  newVal[attr] = curMultiplexVals[attr];\n                  selectedSubFields.forEach(function(subFieldId) {\n                    newVal[subFieldId] = curMultiplexVals[subFieldId];\n                  });\n                  newMultiplexVal.push(newVal);\n                }\n                wellData[attr] = newMultiplexVal;\n              } else {\n                if (data[attr] != null) {\n                  wellData[attr] = data[attr];\n                }\n              }\n            }\n            if ($.isEmptyObject(wellData)) {\n              derivativeJson[idx] = null;\n            } else {\n              derivativeJson[idx] = JSON.stringify(wellData);\n            }\n          }\n\n          while (!$.isEmptyObject(derivativeJson)) {\n            var keys = Object.keys(derivativeJson).map(function(k) {\n              return parseFloat(k, 10);\n            });\n            keys.sort(function(a, b) {\n              return a - b;\n            });\n\n            var refDerivativeIndex = keys[0];\n            var referenceDerivative = derivativeJson[refDerivativeIndex];\n            var arr = [];\n\n            if (!referenceDerivative) {\n              // if no checked box has value, push it to first spot\n              if (this.stackUpWithColor[0]) {\n                this.stackUpWithColor[0].push(refDerivativeIndex);\n              } else {\n                this.stackUpWithColor[0] = [refDerivativeIndex];\n              }\n\n              delete derivativeJson[refDerivativeIndex];\n            } else {\n              // if checked boxes have values\n              for (var i = 0; i < keys.length; i++) {\n                var idx = keys[i];\n                if (referenceDerivative == derivativeJson[idx]) {\n                  arr.push(idx);\n                  this.stackUpWithColor[this.stackPointer] = arr;\n                  delete derivativeJson[idx];\n                }\n              }\n              if (arr.length > 0)\n                this.stackPointer++;\n            }\n          }\n        },\n\n        applyColors: function() {\n\n          var wholeNoTiles = 0;\n          var wholePercentage = 0;\n\n          THIS.addBottomTableHeadings();\n\n          for (var i = 0; i < THIS.allTiles.length; i++) {\n            var tile = THIS.allTiles[i];\n            THIS.setTileVisible(tile, false);\n          }\n\n          for (var color = 0; color < this.stackPointer; color++) {\n            var arr = this.stackUpWithColor[color];\n            if (arr) {\n              THIS.addBottomTableRow(color, arr);\n\n              for (var tileIndex in arr) {\n                wholeNoTiles++;\n                var index = this.stackUpWithColor[color][tileIndex];\n                var tile = THIS.allTiles[index];\n                var well = this.derivative[index];\n                this.colorMap.set(index, color);\n                THIS.setTileColor(tile, color);\n                // Checks if all the required fields are filled\n                var completion = this.checkCompletion(well, tile);\n                THIS.setTileComplete(tile, completion == 1);\n                wholePercentage = wholePercentage + completion;\n              }\n            }\n          }\n\n          wholePercentage = Math.floor(100 * wholePercentage / wholeNoTiles);\n\n          if (isNaN(wholePercentage)) {\n            THIS.overLayTextContainer.text(\"Completion Percentage: 0%\");\n          } else {\n            THIS.overLayTextContainer.text(\"Completion Percentage: \" + wholePercentage + \"%\");\n          }\n        },\n\n        checkCompletion: function(wellData, tile) {\n          var req = 0;\n          var fill = 0;\n          for (var i = 0; i < THIS.fieldList.length; i++) {\n            var field = THIS.fieldList[i];\n            if (field.checkMultiplexCompletion) {\n              // also apply color\n              var multiplexStatus = field.checkMultiplexCompletion(wellData[field.id]);\n              if (multiplexStatus.include) {\n                fill += multiplexStatus.completionPct;\n                req++;\n              }\n            } else {\n              if (field.required) {\n                req++;\n                if (wellData[field.id] !== null) {\n                  fill++;\n                }\n              }\n            }\n          }\n          if (req === fill) {\n            return 1;\n          }\n          return fill / req;\n        },\n      }\n    }\n  }\n})(jQuery, fabric);","var plateLayOutWidget = plateLayOutWidget || {};\n\n(function($, fabric) {\n\n  plateLayOutWidget.fabricEvents = function() {\n    // This object contains Menu items and how it works;\n    return {\n      colorToIndex: {},\n      startCoords: {\n        x: 0,\n        y: 0\n      },\n      focalWell: {\n        row: 0,\n        col: 0\n      },\n      selectedAreas: [],\n\n      _clickCoords: function(evt) {\n        //Get XY Coords for a given event. \n        var rect = evt.e.target.getBoundingClientRect();\n        return {\n          x: evt.e.clientX - rect.left,\n          y: evt.e.clientY - rect.top\n        };\n      },\n\n      _fabricEvents: function() {\n        // Set up event handling. \n        var that = this;\n\n        $(that.target).on(\"getPlates\", function(evt, data) {\n          // This method should be compatable to redo/undo.\n          that.getPlates(JSON.parse(data));\n        });\n\n        that.mainFabricCanvas.on(\"mouse:down\", function(evt) {\n          // Start selecting new area\n          that.selecting = true;\n          var coords = that._clickCoords(evt);\n\n          var areas = that.selectedAreas.slice();\n          var focalWell = that.focalWell;\n          var startCoords = that._wellToCoords(focalWell, true);\n          var rect = that._coordsToRect(startCoords, coords);\n\n          if (evt.e.ctrlKey) {\n            //adding new area\n            startCoords = coords;\n            rect = that._coordsToRect(startCoords, coords);\n            focalWell = that._coordsToWell(startCoords);\n            if (evt.e.shiftKey) {\n              //replacing existing areas\n              areas = [that._rectToArea(rect)];\n            } else {\n              areas.push(that._rectToArea(rect));\n            }\n          } else {\n            if (evt.e.shiftKey) {\n              //Altering last area\n              areas[areas.length - 1] = that._rectToArea(rect);\n            } else {\n              //Creating new area\n              startCoords = coords;\n              rect = that._coordsToRect(startCoords, coords);\n              focalWell = that._coordsToWell(startCoords);\n              areas = [that._rectToArea(rect)];\n            }\n          }\n\n          that.startCoords = startCoords;\n          that.setSelection(areas, focalWell);\n          that.mainFabricCanvas.renderAll();\n        });\n\n        that.mainFabricCanvas.on(\"mouse:move\", function(evt) {\n          if (that.selecting) {\n            // continue selecting new area\n            var areas = that.selectedAreas.slice();\n            var endCoords = that._clickCoords(evt);\n            var rect = that._coordsToRect(that.startCoords, endCoords);\n            var area = that._rectToArea(rect);\n            if (area) {\n              areas[areas.length - 1] = area;\n            }\n\n            that.setSelection(areas, that.focalWell);\n            that.mainFabricCanvas.renderAll();\n          }\n\n        });\n\n        that.mainFabricCanvas.on(\"mouse:up\", function(evt) {\n          // finish selecting new area\n          that.selecting = false;\n          var areas = that.selectedAreas.slice();\n          var endCoords = that._clickCoords(evt);\n          var rect = that._coordsToRect(that.startCoords, endCoords);\n          var area = that._rectToArea(rect);\n          if (area) {\n            areas[areas.length - 1] = area;\n          }\n\n          that.setSelection(areas, that.focalWell);\n          that.decideSelectedFields();\n          that.mainFabricCanvas.renderAll();\n          that._trigger(\"selectedWells\", null, {selectedAddress: that.getSelectedAddress()});\n          if (that.options.scrollToGroup === undefined || that.options.scrollToGroup) {\n            that.selectObjectInBottomTab();\n          }\n        });\n      },\n\n      setSelection: function(areas, focalWell) {\n        this.selectedAreas = areas;\n        this.focalWell = focalWell;\n        this.allSelectedObjects = this._areasToTiles(areas);\n        this._setSelectedTiles();\n        this._setFocalWellRect(this.focalWell);\n        document.activeElement.blur();\n      },\n\n      _setFocalWellRect: function(well) {\n        var flag;\n        // check if not allow to add or delete existing wells\n        if (this.disableAddDeleteWell) {\n          var address = this.locToAddress({\n            r: well.row,\n            c: well.col\n          });\n          if (this.addressAllowToEdit.indexOf(address) < 0) {\n            flag = false;\n            this.setFieldsDisabled(true);\n          } else {\n            flag = true;\n            this.setFieldsDisabled(false);\n          }\n        } else if (well) {\n          flag = true;\n        }\n\n        if (flag) {\n          var rect = this._areaToRect(this._wellToArea(well));\n          var strokeWidth = 2;\n          if (this.focalWellRect) {\n            //update focalWellRect\n            this.focalWellRect.top = rect.top;\n            this.focalWellRect.left = rect.left;\n            this.focalWellRect.width = rect.width - strokeWidth;\n            this.focalWellRect.height = rect.height - strokeWidth;\n          } else {\n            //create focalWellRect\n            this.focalWellRect = new fabric.Rect({\n              width: rect.width - strokeWidth,\n              height: rect.height - strokeWidth,\n              left: rect.left,\n              top: rect.top,\n              fill: null,\n              strokeWidth: strokeWidth,\n              stroke: \"black\",\n              selectable: false\n            });\n            this.mainFabricCanvas.add(this.focalWellRect);\n          }\n        } else {\n          //clear focalWellRect\n          this.mainFabricCanvas.remove(this.focalWellRect);\n          this.focalWellRect = null;\n        }\n      },\n\n      _setSelectedTiles: function() {\n        // Update selected tile display only\n        var selectedTiles = this.allSelectedObjects;\n        this.allTiles.forEach(function(tile) {\n          var selected = selectedTiles.indexOf(tile) >= 0;\n          tile.highlight.visible = selected;\n        })\n      },\n\n      _getSelectedWells: function() {\n        var that = this;\n        return this.allSelectedObjects.map(function(tile) {\n          var well = that.engine.derivative[tile.index];\n          if (!well) {\n            well = that.defaultWell;\n          }\n          return well;\n        });\n      },\n\n      _getCommonFields: function(wells) {\n        if (wells.length) {\n          var referenceWell = wells[0];\n          var referenceFields = $.extend(true, {}, referenceWell);\n          for (var i = 1; i < wells.length; i++) {\n            var fields = wells[i];\n            for (var field in referenceFields) {\n              if (Array.isArray(referenceFields[field])) {\n                var refArr = referenceFields[field];\n                var agrArr = [];\n                for (var j = 0; j < refArr.length; j++) {\n                  var v = refArr[j];\n                  if (v && typeof (v) === \"object\") {\n                    if (this.containsObject(v, fields[field])) {\n                      agrArr.push(v);\n                    }\n                  } else {\n                    if ($.inArray(v, fields[field]) >= 0) {\n                      agrArr.push(v);\n                    }\n                  }\n                }\n                referenceFields[field] = agrArr;\n              } else {\n                if (fields[field] && typeof (fields[field]) === \"object\" && referenceFields[field] && typeof (referenceFields[field]) === \"object\") {\n                  if ((fields[field].value !== referenceFields[field].value) || (fields[field].unit !== referenceFields[field].unit)) {\n                    delete referenceFields[field];\n                  }\n                } else if (referenceFields[field] != fields[field]) {\n                  delete referenceFields[field];\n                }\n              }\n            }\n          }\n          return referenceFields\n        } else {\n          return {};\n        }\n      },\n\n      containsObject: function(obj, list) {\n        var equality = [];\n        if (list) {\n          list.forEach(function(val) {\n            //evaluate val and obj\n            var evaluate = [];\n            Object.keys(val).forEach(function(listKey) {\n              if (Object.keys(obj).indexOf(listKey) >= 0) {\n                var curVal = val[listKey];\n                if (typeof (curVal) === 'object' && curVal) {\n                  if (obj[listKey]) {\n                    evaluate.push((curVal.unit === obj[listKey].unit) && (curVal.value === obj[listKey].value));\n                  } else {\n                    // when obj[listKey] is null but curVal is not\n                    evaluate.push(false);\n                  }\n                } else {\n                  evaluate.push(curVal === obj[listKey]);\n                }\n              }\n            });\n            equality.push(evaluate.indexOf(false) < 0);\n          });\n          return equality.indexOf(true) >= 0;\n        } else {\n          return false;\n        }\n      },\n\n      _getCommonWell: function(wells) {\n        if (wells.length) {\n          var referenceWell = wells[0];\n          var referenceFields = $.extend(true, {}, referenceWell);\n          for (var i = 1; i < wells.length; i++) {\n            var well = wells[i];\n            var fields = well;\n            for (var field in referenceFields) {\n              if (Array.isArray(referenceFields[field])) {\n                var refArr = referenceFields[field];\n                var agrArr = [];\n                for (var j = 0; j < refArr.length; j++) {\n                  var v = refArr[j];\n                  // for multiplex field\n                  if (typeof (refArr[j]) === \"object\") {\n                    if (this.containsObject(v, fields[field])) {\n                      agrArr.push(v);\n                    }\n                  } else {\n                    if ($.inArray(v, fields[field]) >= 0) {\n                      agrArr.push(v);\n                    }\n                  }\n                }\n                referenceFields[field] = agrArr;\n              } else {\n                if (fields[field] && typeof (fields[field]) === \"object\" && referenceFields[field] && typeof (referenceFields[field]) === \"object\") {\n                  if ((fields[field].value !== referenceFields[field].value) || (fields[field].unit !== referenceFields[field].unit)) {\n                    referenceFields[field] = null;\n                  }\n                } else if (referenceFields[field] != fields[field]) {\n                  referenceFields[field] = null;\n                }\n\n              }\n            }\n          }\n          return referenceFields;\n        } else {\n          return this.defaultWell;\n        }\n      },\n\n      _getAllMultipleVal: function(wells) {\n        var multipleFieldList = this.multipleFieldList;\n\n        multipleFieldList.forEach(function(multiplexField) {\n          if (wells.length) {\n            var curMultipleVal = {};\n            wells.forEach(function(wellData) {\n              var id = multiplexField.id;\n              if (wellData[id]) {\n                if (wellData[id].length > 0) {\n                  wellData[id].forEach(function(multipleVal) {\n                    if (typeof (multipleVal) === 'object') {\n                      if (multipleVal[id] in curMultipleVal) {\n                        curMultipleVal[multipleVal[id]]++;\n                      } else {\n                        curMultipleVal[multipleVal[id]] = 1;\n                      }\n                    } else {\n                      if (multipleVal in curMultipleVal) {\n                        curMultipleVal[multipleVal]++;\n\n                      } else {\n                        curMultipleVal[multipleVal] = 1;\n                      }\n                    }\n                  })\n                }\n              }\n            });\n            multiplexField.allSelectedMultipleVal = curMultipleVal;\n          } else {\n            multiplexField.allSelectedMultipleVal = null\n          }\n        });\n      },\n\n      decideSelectedFields: function() {\n        var wells = this._getSelectedWells();\n        this._getAllMultipleVal(wells);\n        this.applyFieldWarning(wells);\n        var well = this._getCommonWell(wells);\n        this._addDataToTabFields(well);\n      },\n\n      // get well value differences for each well in wellsHash\n      getDifferentWellsVals: function(wellsHash) {\n        var wells = [];\n        for (var wellId in wellsHash) {\n          wells.push(wellsHash[wellId]);\n        }\n        var differentWellsVals = {};\n        if (wells.length > 1) {\n          var commonWell = this._getCommonWell(wells);\n          var allFieldVal = {};\n          for (var fieldIdx in wellsHash[0]) {\n            allFieldVal[fieldIdx] = [];\n          }\n          for (var wellIdx in wells) {\n            var diffWellVal = {};\n            var curWellData = wells[wellIdx];\n            for (var fieldId in curWellData) {\n              var commonVal = commonWell[fieldId];\n              var curVal = curWellData[fieldId];\n              var newVal = null;\n              if (Array.isArray(curVal)) {\n                // get uncommonVal\n                newVal = [];\n                for (var idx = 0; idx < curVal.length; idx++) {\n                  var curMultiVal = curVal[idx];\n                  // multiplex field\n                  if (curMultiVal && typeof (curMultiVal === \"object\")) {\n                    if (!this.containsObject(curMultiVal, commonVal)) {\n                      newVal.push(curMultiVal);\n                      if (!this.containsObject(curMultiVal, allFieldVal[fieldId])) {\n                        allFieldVal[fieldId].push(curMultiVal);\n                      }\n                    }\n                  } else {\n                    if (commonVal.indexOf(curMultiVal) >= 0) {\n                      newVal.push(curMultiVal);\n                      if (!allFieldVal[fieldId].indexOf(curMultiVal) >= 0) {\n                        allFieldVal[fieldId].push(curMultiVal);\n                      }\n                    }\n                  }\n                }\n              } else if (curVal && typeof (curVal) === \"object\") {\n                if (commonVal && typeof (commonVal) === \"object\") {\n                  if (!((curVal.value === commonVal.value) || (curVal.unit === commonVal.unit))) {\n                    newVal = curVal;\n                    if (!this.containsObject(curVal, allFieldVal[fieldId])) {\n                      allFieldVal[fieldId].push(curVal);\n                    }\n                  }\n                } else {\n                  newVal = curVal;\n                  if (!this.containsObject(curVal, allFieldVal[fieldId])) {\n                    allFieldVal[fieldId].push(curVal);\n                  }\n                }\n              } else if (curVal !== commonVal) {\n                newVal = curVal;\n                if (!allFieldVal[fieldId].indexOf(curVal) >= 0) {\n                  allFieldVal[fieldId].push(curVal);\n                }\n              }\n              diffWellVal[fieldId] = newVal;\n            }\n\n\n            differentWellsVals[wellIdx] = diffWellVal;\n          }\n\n          // clean up step for fields that are empty\n          for (var fieldId in allFieldVal) {\n            if (allFieldVal[fieldId].length === 0) {\n              for (var wellIdx in differentWellsVals) {\n                delete differentWellsVals[wellIdx][fieldId];\n              }\n            }\n          }\n\n          return differentWellsVals;\n        } else if (wellsHash[0]) {\n          var well = {};\n          for (var fieldId in wellsHash[0]) {\n            var curVal = wellsHash[0][fieldId];\n            if (Array.isArray(curVal)) {\n              if (curVal.length > 0) {\n                well[fieldId] = curVal\n              }\n            } else if (curVal) {\n              well[fieldId] = curVal;\n            }\n          }\n          return {\n            0: well\n          };\n        }\n      },\n\n      // get all wells that has data\n      getWellSetAddressWithData: function() {\n        var address = [];\n        var derivative = this.engine.derivative;\n        for (var id in derivative) {\n          address.push(this.indexToAddress(id));\n        }\n        return address;\n      }\n\n    };\n  }\n})(jQuery, fabric);","var plateLayOutWidget = plateLayOutWidget || {};\n\nplateLayOutWidget.assets = function() {\n  return {\n    _assets: {\n      doImg: '&#10003;',\n      dontImg: '',\n      warningImg: '&#9888;'\n    }\n  };\n};\n","var plateLayOutWidget = plateLayOutWidget || {};\n\n(function($, fabric) {\n\n  plateLayOutWidget.interface = function() {\n    // interface holds all the methods to put the interface in place\n    return {\n\n      _createInterface: function() {\n\n        var divIdentifier = '<div></div>';\n        this.container = this._createElement(divIdentifier).addClass(\"plate-setup-wrapper\");\n        this.topSection = this._createElement(divIdentifier).addClass(\"plate-setup-top-section\");\n\n        this.topLeft = this._createElement(divIdentifier).addClass(\"plate-setup-top-left\");\n        this.topRight = this._createElement(divIdentifier).addClass(\"plate-setup-top-right\");\n\n        this.overLayContainer = this._createElement(divIdentifier).addClass(\"plate-setup-overlay-container\");\n        this.canvasContainer = this._createElement(divIdentifier).addClass(\"plate-setup-canvas-container\");\n\n        this._createOverLay();\n        $(this.topLeft).append(this.overLayContainer);\n\n        this._createCanvas();\n        $(this.topLeft).append(this.canvasContainer);\n\n\n        $(this.topSection).append(this.topLeft);\n        $(this.topSection).append(this.topRight);\n\n        $(this.container).append(this.topSection);\n        $(this.element).append(this.container);\n\n        this._initiateFabricCanvas();\n\n        this._createTabAtRight();\n        this._createTabs();\n\n        this._placePresetTabs();\n        // Bottom of the screen\n        this._bottomScreen();\n        // Canvas\n        this._canvas();\n\n        this.bottomForFirstTime();\n\n        var that = this;\n        this._setShortcuts();\n        $(document.body).keyup(function(e) {\n          that._handleShortcuts(e);\n        });\n\n        this._configureUndoRedoArray();\n      },\n\n      _createElement: function(element) {\n        return $(element);\n      },\n\n      _setShortcuts: function() {\n        var that = this;\n        window.addEventListener(\"cut\", function(e) {\n          if (document.activeElement == document.body) {\n            that.copyCriteria();\n            that.clearCriteria();\n            e.preventDefault();\n          }\n        });\n        window.addEventListener(\"copy\", function(e) {\n          if (document.activeElement == document.body) {\n            that.copyCriteria();\n            e.preventDefault();\n          }\n        });\n        window.addEventListener(\"paste\", function(e) {\n          if (document.activeElement == document.body) {\n            that.pasteCriteria();\n            e.preventDefault();\n          }\n        });\n      },\n\n      _handleShortcuts: function(e) {\n        if (document.activeElement === document.body) {\n          if (e.keyCode == 46) {\n            this.clearCriteria();\n            e.preventDefault();\n          } else if (e.ctrlKey || e.metaKey) {\n            if (e.keyCode == 90) {\n              if (e.shiftKey) {\n                this.redo();\n              } else {\n                this.undo();\n              }\n              e.preventDefault();\n            } else if (e.keyCode == 89) {\n              this.redo();\n              e.preventDefault();\n            }\n          }\n        }\n      },\n    };\n  }\n})(jQuery, fabric);","var plateLayOutWidget = plateLayOutWidget || {};\n\n(function($, fabric) {\n\n  plateLayOutWidget.loadPlate = function(THIS) {\n    // Methods which look after data changes and stack up accordingly\n    // Remember THIS points to plateLayOutWidget and 'this' points to engine\n    return {\n\n      getPlates: function(data) {\n        //sanitize input\n        var derivative = {};\n        for (var index in data.derivative) {\n          var well = data.derivative[index];\n          derivative[index] = this.sanitizeWell(well);\n        }\n\n        var checkboxes = data.checkboxes || [];\n        var selection = this.sanitizeAreas(data.selectedAreas, data.focalWell);\n\n        var sanitized = {\n          \"derivative\": derivative,\n          \"checkboxes\": checkboxes,\n          \"selectedAreas\": selection.selectedAreas,\n          \"focalWell\": selection.focalWell\n        };\n\n        this.setData(sanitized);\n      },\n\n      sanitizeAreas: function(selectedAreas, focalWell) {\n        var that = this;\n        var rows = this.dimensions.rows;\n        var cols = this.dimensions.cols;\n\n        if (!selectedAreas) {\n          selectedAreas = [];\n        }\n        if (selectedAreas.length) {\n          selectedAreas = selectedAreas.map(function(area) {\n            return {\n              minCol: that._coordIndex(Math.min(area.minCol, area.maxCol), cols),\n              minRow: that._coordIndex(Math.min(area.minRow, area.maxRow), rows),\n              maxCol: that._coordIndex(Math.max(area.minCol, area.maxCol), cols),\n              maxRow: that._coordIndex(Math.max(area.minRow, area.maxRow), rows)\n            };\n          });\n          var area = selectedAreas[selectedAreas.length - 1];\n          if (focalWell && !this._wellInArea(focalWell, area)) {\n            focalWell = null;\n          }\n          if (!focalWell) {\n            focalWell = {\n              row: area.minRow,\n              col: area.minCol\n            };\n          }\n        } else {\n          if (!focalWell) {\n            focalWell = {\n              row: 0,\n              col: 0\n            };\n          }\n          selectedAreas = [this._wellToArea(focalWell)];\n        }\n        return {\n          selectedAreas: selectedAreas,\n          focalWell: focalWell\n        };\n      },\n\n      sanitizeWell: function(well) {\n        var newWell = {};\n        for (var i = 0; i < this.fieldList.length; i++) {\n          var field = this.fieldList[i];\n          newWell[field.id] = field.parseValue(well[field.id]);\n        }\n        return newWell;\n      },\n\n      setData: function(data) {\n        this.engine.derivative = $.extend(true, {}, data.derivative);\n        this.setCheckboxes(data.checkboxes);\n        this.setSelection(data.selectedAreas, data.focalWell);\n        this._colorMixer();\n        this.decideSelectedFields();\n        this.mainFabricCanvas.renderAll();\n      },\n\n    }\n  }\n})(jQuery, fabric);","var GET_PLATES = 'getPlates';\nvar IS_READ_ONLY = 'isReadOnly';\nvar IS_DISABLE_ADD_DELETE_WELL = 'isDisableAddDeleteWell';\nvar GET_SELECTED_OBJECT = 'getSelectedObject';\nvar SETSELECTEDWELL = 'setSelectedWell';","var plateLayOutWidget = plateLayOutWidget || {};\n\n(function($, fabric) {\n\n  plateLayOutWidget.overlay = function() {\n    // overlay holds all the methods to put the part just above the canvas which contains all those\n    // 'completion percentage' annd 'copy Criteria' button etc ...\n    return {\n\n      _createOverLay: function() {\n\n        var that = this;\n        this.overLayTextContainer = this._createElement(\"<div></div>\").addClass(\"plate-setup-overlay-text-container\");\n        this.overLayTextContainer.text(\"Completion Percentage:\");\n        this.overLayContainer.append(this.overLayTextContainer);\n        this.overLayButtonContainer = this._createElement(\"<div></div>\").addClass(\"plate-setup-overlay-button-container\");\n        this.overLayContainer.append(this.overLayButtonContainer);\n\n        this.clearCriteriaButton = this._createElement(\"<button />\").addClass(\"plate-setup-button\");\n        this.clearCriteriaButton.text(\"Clear\");\n        this.overLayButtonContainer.append(this.clearCriteriaButton);\n\n        this.clearCriteriaButton.click(function(evt) {\n          that.clearCriteria();\n        });\n\n        this.copyCriteriaButton = this._createElement(\"<button />\").addClass(\"plate-setup-button\");\n        this.copyCriteriaButton.text(\"Copy\");\n        this.overLayButtonContainer.append(this.copyCriteriaButton);\n\n        this.copyCriteriaButton.click(function(evt) {\n          that.copyCriteria();\n        });\n\n        this.pasteCriteriaButton = this._createElement(\"<button />\").addClass(\"plate-setup-button\");\n        this.pasteCriteriaButton.text(\"Paste\");\n        this.overLayButtonContainer.append(this.pasteCriteriaButton);\n\n        this.pasteCriteriaButton.click(function(evt) {\n          that.pasteCriteria();\n        });\n\n        this.undoButton = this._createElement(\"<button />\").addClass(\"plate-setup-button\");\n        this.undoButton.text(\"Undo\");\n        this.overLayButtonContainer.append(this.undoButton);\n\n        this.undoButton.click(function(evt) {\n          that.undo();\n        });\n\n        this.redoButton = this._createElement(\"<button />\").addClass(\"plate-setup-button\");\n        this.redoButton.text(\"Redo\");\n        this.overLayButtonContainer.append(this.redoButton);\n\n        this.redoButton.click(function(evt) {\n          that.redo();\n        });\n\n      },\n\n      clearCriteria: function() {\n        if (this.allSelectedObjects) {\n          var noOfSelectedObjects = this.allSelectedObjects.length;\n          var hasWellUpdate = false;\n          for (var objectIndex = 0; objectIndex < noOfSelectedObjects; objectIndex++) {\n            var tile = this.allSelectedObjects[objectIndex];\n            if (tile.index in this.engine.derivative) {\n              // handling for clearing well when not allowed to add or delete wells\n              if (this.emptyWellWithDefaultVal && this.disableAddDeleteWell) {\n                var well = JSON.parse(JSON.stringify(this.defaultWell));\n                var defaultValue = this.emptyWellWithDefaultVal;\n                for (var key in defaultValue) {\n                  if (key in well) {\n                    well[key] = defaultValue[key];\n                    this._applyFieldData(key, defaultValue[key]);\n                  } else {\n                    console.log(\"Well does not contain key: \" + key + \", please contact support\");\n                  }\n                }\n                this.engine.derivative[tile.index] = well;\n              } else {\n                delete this.engine.derivative[tile.index];\n              }\n              hasWellUpdate = true;\n            }\n          }\n          if (hasWellUpdate) {\n            this.derivativeChange();\n          }\n\n          this._colorMixer();\n          this.decideSelectedFields();\n        } else {\n          alert(\"Please select any well\");\n        }\n      },\n\n      copyCriteria: function() {\n        if (this.allSelectedObjects) {\n          var wells = this._getSelectedWells();\n          this.commonWell = this._getCommonFields(wells);\n        } else {\n          alert(\"Please select any well.\");\n        }\n      },\n\n      pasteCriteria: function() {\n        if (this.commonWell) {\n          this._addAllData(this.commonWell);\n          this.decideSelectedFields();\n          this.mainFabricCanvas.renderAll();\n        }\n      }\n    };\n  }\n})(jQuery, fabric);","$.widget(\"DNA.plateLayOut\", {\n\n  plateLayOutWidget: {},\n\n  options: {\n    value: 0\n  },\n\n  allTiles: [], // All tiles containes all thise circles in the canvas\n\n  addressToLoc: function(layoutAddress) {\n    var m = /^([A-Z]+)(\\d+)$/.exec(layoutAddress.trim().toUpperCase())\n    if (m) {\n      var row_v = m[1];\n      var col = parseInt(m[2]) - 1;\n      var row;\n      for (var i = 0; i < row_v.length; i++) {\n        var c = row_v.charCodeAt(i) - 65;\n        if (i) {\n          row += 1;\n          row *= 26;\n          row += c;\n        } else {\n          row = c;\n        }\n      }\n      return {\n        r: row,\n        c: col\n      };\n    } else {\n      throw layoutAddress + \" not a proper layout address\";\n    }\n  },\n\n  locToIndex: function(loc, dimensions) {\n    if (!dimensions) {\n      dimensions = this.dimensions;\n    }\n    if (loc.r < 0) {\n      t\n    }\n    if (!(loc.r >= 0 && loc.r < dimensions.rows)) {\n      throw \"Row index \" + (loc.r + 1) + \" invalid\";\n    }\n    if (!(loc.c >= 0 && loc.c < dimensions.cols)) {\n      throw \"Column index \" + (loc.c + 1) + \" invalid\";\n    }\n    return loc.r * dimensions.cols + loc.c;\n  },\n\n  addressToIndex: function(layoutAddress, dimensions) {\n    var loc = this.addressToLoc(layoutAddress);\n    return this.locToIndex(loc, dimensions);\n  },\n\n  _rowKey: function(i) {\n    var c1 = i % 26;\n    var c2 = (i - c1) / 26;\n    var code = String.fromCharCode(65 + c1);\n    if (c2 > 0) {\n      code = String.fromCharCode(64 + c2) + code;\n    }\n    return code;\n  },\n\n  indexToLoc: function(index, dimensions) {\n    if (!dimensions) {\n      dimensions = this.dimensions;\n    }\n\n    if (index >= dimensions.rows * dimensions.cols) {\n      throw \"Index too high: \" + index.toString(10);\n    }\n    var loc = {};\n    loc.c = index % dimensions.cols;\n    loc.r = (index - loc.c) / dimensions.cols;\n\n    return loc;\n  },\n\n  locToAddress: function(loc) {\n    return this._rowKey(loc.r) + (loc.c + 1).toString(10);\n  },\n\n  indexToAddress: function(index, dimensions) {\n    var loc = this.indexToLoc(index, dimensions);\n    return this.locToAddress(loc);\n  },\n\n  getDimensions: function() {\n    return $.extend(true, {}, this.dimensions);\n  },\n\n  _create: function() {\n    var rows = parseInt(this.options.numRows || 8);\n    var cols = parseInt(this.options.numCols || 12);\n    this.dimensions = {\n      rows: rows,\n      cols: cols\n    };\n    this.rowIndex = [];\n    for (var i = 0; i < rows; i++) {\n      this.rowIndex.push(this._rowKey(i));\n    }\n\n    this.target = (this.element[0].id) ? \"#\" + this.element[0].id : \".\" + this.element[0].className;\n\n    // Import classes from other files.. Here we import it using extend and add it to this\n    // object. internally we add to widget.DNA.getPlates.prototype.\n    // Helpers are methods which return other methods and objects.\n    // add Objects to plateLayOutWidget and it will be added to this object.\n    // set read only well\n    if (this.options.readOnly) {\n      this.isReadOnly(true);\n    }\n\n    for (var component in plateLayOutWidget) {\n      // Incase some properties has to initialize with data from options hash,\n      // we provide it sending this object.\n      $.extend(this, new plateLayOutWidget[component](this));\n    }\n\n    this._createInterface();\n\n    this._trigger(\"created\", null, this);\n\n    return this;\n  },\n\n  _init: function() {\n    // This is invoked when the user use the plugin after _create is called.\n    // The point is _create is invoked for the very first time and for all other\n    // times _init is used.\n  },\n\n  addData: function() {\n    alert(\"wow this is good\");\n  },\n\n  // wellsData follows syntax: {0:{field1: val1, field2: val2}, 1:{field1: val1, field2: val2}}\n  getTextDerivative: function(wellsData) {\n    var textDerivative = {};\n    var fieldMap = this.fieldMap;\n    for (var idx in wellsData) {\n      var textValWell = {};\n      var textFieldIdWell = {};\n      var curWellData = wellsData[idx];\n      for (var fieldId in curWellData) {\n        if (fieldId in this.fieldMap) {\n          var field = this.fieldMap[fieldId];\n          var textVal = field.parseText(curWellData[fieldId]);\n          textFieldIdWell[field.name] = textVal;\n          textValWell[fieldId] = textVal;\n        } else {\n          // do not convert if not a field (ex: layout_address)\n          textFieldIdWell[fieldId] = curWellData[fieldId];\n          textValWell[fieldId] = curWellData[fieldId];\n        }\n      }\n      textDerivative[idx] = {\n        textVal: textValWell,\n        textFieldVal: textFieldIdWell\n      };\n    }\n\n    return textDerivative;\n  },\n\n  // wellsData follows syntax: {0:{field1: val1, field2: val2}, 1:{field1: val1, field2: val2}}\n  getWellsDifferences: function(wellsData) {\n    return this.getDifferentWellsVals(wellsData);\n  },\n\n  setFieldsDisabled: function(flag) {\n    this.fieldList.forEach(function(field) {\n      field.disabled(flag);\n    });\n  },\n\n  isReadOnly: function(flag) {\n    if (flag) {\n      this.readOnly = true;\n    } else {\n      this.readOnly = false;\n    }\n    this.readOnlyHandler();\n  },\n\n  readOnlyHandler: function() {\n    if (this.readOnly) {\n      this.overLayButtonContainer.css(\"display\", \"none\");\n      $('.multiple-field-manage-delete-button').css(\"display\", \"none\");\n      this.setFieldsDisabled(true);\n    } else {\n      this.overLayButtonContainer.css(\"display\", \"flex\");\n      $('.multiple-field-manage-delete-button').css(\"display\", \"none\");\n      if (!this.disableAddDeleteWell) {\n        this.setFieldsDisabled(false);\n      }\n    }\n  },\n\n  disableAddDeleteWell: null,\n  // column_with_default_val will be used to determine empty wells, format: {field_name: default_val}\n  isDisableAddDeleteWell: function(flag, column_with_default_val) {\n    if (flag) {\n      this.disableAddDeleteWell = true;\n      this.addressAllowToEdit = this.getWellSetAddressWithData();\n      // configure undo redo action\n      this.actionPointer = 0;\n      this.undoRedoArray = [];\n      this.undoRedoArray.push(this.createObject());\n      if (column_with_default_val) {\n        this.emptyWellWithDefaultVal = column_with_default_val;\n      }\n    } else {\n      this.disableAddDeleteWell = false;\n      this.setFieldsDisabled(false);\n      this.emptyWellWithDefaultVal = null;\n    }\n    this._fabricEvents();\n  },\n\n  getSelectedObject: function() {\n    var selectedAddress = [];\n    for (var i = 0; i < this.allSelectedObjects.length; i++) {\n      selectedAddress.push(this.allSelectedObjects[i].address);\n    }\n    var selectedObjects = {};\n    var derivative = this.engine.derivative;\n    for (var index in derivative) {\n      var address = this.indexToAddress(index);\n      if (selectedAddress.indexOf(address) >= 0) {\n        var well = JSON.parse(JSON.stringify(derivative[index]));\n        well.colorIndex = this.engine.colorMap.get(Number(index));\n        selectedObjects[address] = well;\n      }\n    }\n    return selectedObjects;\n  },\n\n  selectObjectInBottomTab: function() {\n    var selectedObjects = this.getSelectedObject();\n    var selectedObjectAddress;\n    for (var prop in selectedObjects) {\n      if (!selectedObjectAddress) {\n        selectedObjectAddress = prop;\n      } else {\n        return;  // scroll to matching group only if a single well has been selected\n      }\n    }\n    if (selectedObjects[selectedObjectAddress]) {\n      var colorIndex = selectedObjects[selectedObjectAddress].colorIndex;\n      var trs = document.querySelectorAll('table.plate-setup-bottom-table tr');\n      for (var i = 1; i < trs.length; i++) { // start at 1 to skip the table headers\n        var tds = trs[i].children;\n        var isSelected = tds[0].querySelector('button').innerHTML === colorIndex.toString();\n        for (var j = 1; j < tds.length; j++) {\n          if (isSelected) {\n            tds[j].style.background = '#22cb94';\n          } else {\n            tds[j].style.background = '#ffffff';\n          }\n        }\n        if (isSelected) {\n          scrollTo(document.querySelector('.plate-setup-bottom-table-container'), tds[0].offsetTop, 300);\n        }\n      }\n    }\n  },\n\n  getSelectedIndex: function() {\n    return this.allSelectedObjects.map(function(selectedObj) {\n      return that.addressToIndex(selectedObj.address)\n    });\n  },\n\n  getSelectedAddress: function() {\n    return this.allSelectedObjects.map(function(selectedObj) {\n      return selectedObj.address;\n    });\n  },\n\n  setSelectedWell: function(addressList) {\n    var areas = [];\n    var minRow = 999;\n    var locMap = {};\n    for (var id = 0; id < addressList.length; id++) {\n      var wellIdx = this.addressToIndex(addressList[id]);\n      var loc = this.indexToLoc(wellIdx);\n      areas.push({\n        minCol: loc.c,\n        minRow: loc.r,\n        maxCol: loc.c,\n        maxRow: loc.r\n      });\n      if (loc.r <= minRow) {\n        minRow = loc.r;\n        if (loc.r in locMap) {\n          locMap[loc.r].push(loc.c);\n        } else {\n          locMap[loc.r] = [loc.c];\n        }\n      }\n    }\n    var focalWell = {\n      row: minRow,\n      col: Math.min.apply(null, locMap[minRow])\n    };\n\n    this.setSelection(areas, focalWell);\n    this.decideSelectedFields();\n    this.mainFabricCanvas.renderAll();\n  }\n\n});\n\n// https://stackoverflow.com/questions/17733076/smooth-scroll-anchor-links-without-jquery\nfunction scrollTo(element, to, duration) {\n  if (duration <= 0) return;\n  var difference = to - element.scrollTop;\n  var perTick = difference / duration * 10;\n  setTimeout(function() {\n    element.scrollTop = element.scrollTop + perTick;\n    if (element.scrollTop === to) return;\n    scrollTo(element, to, duration - 10);\n  }, 10);\n}","var plateLayOutWidget = plateLayOutWidget || {};\n\n(function($, fabric) {\n\n  plateLayOutWidget.preset = function(me) {\n    // All the preset action goes here\n    return {\n\n      presets: [],\n\n      _placePresetTabs: function() {\n        var presets = this.options.attributes.presets;\n\n        if (presets && presets.length) {\n          this.wellAttrContainer = this._createElement(\"<div></div>\").addClass(\"plate-setup-well-attr-container\")\n            .text(\"Checkbox presets\");\n          this.tabContainer.append(this.wellAttrContainer);\n\n          this.presetTabContainer = this._createElement(\"<div></div>\").addClass(\"plate-setup-preset-container\");\n          this.tabContainer.append(this.presetTabContainer);\n\n          for (var i = 0; i < presets.length; i++) {\n            var preset = presets[i];\n            var divText = this._createElement(\"<div></div>\").addClass(\"plate-setup-preset-tab-div\")\n              .text(preset.title);\n\n            var presetButton = this._createElement(\"<div></div>\").addClass(\"plate-setup-preset-tab\")\n              .data(\"preset\", preset.fields).append(divText);\n            this.presetTabContainer.append(presetButton);\n\n            var that = this;\n            presetButton.click(function() {\n              var preset = $(this);\n              that._selectPreset(preset);\n            });\n            this.presets.push(presetButton);\n          }\n        }\n      },\n\n      _clearPresetSelection: function() {\n        for (var j = 0; j < this.presets.length; j++) {\n          var p = this.presets[j];\n          p.removeClass(\"plate-setup-preset-tab-selected\")\n            .addClass(\"plate-setup-preset-tab\");\n        }\n      },\n\n      _selectPreset: function(preset) {\n        this.setCheckboxes(preset.data(\"preset\"));\n        preset.removeClass(\"plate-setup-preset-tab\")\n          .addClass(\"plate-setup-preset-tab-selected\");\n      },\n    };\n  }\n})(jQuery, fabric);","var plateLayOutWidget = plateLayOutWidget || {};\n\n(function($, fabric) {\n\n  plateLayOutWidget.tabs = function() {\n    // Tabs crete and manage tabs at the right side of the canvas.\n    return {\n\n      allTabs: [],\n\n      defaultWell: {},\n\n      allDataTabs: [], // To hold all the tab contents. this contains all the tabs and its elements and elements\n      // Settings as a whole. its very usefull, when we have units for a specific field.\n      // it goes like tabs-> individual field-> units and checkbox\n\n      _createTabAtRight: function() {\n        this.tabContainer = this._createElement(\"<div></div>\").addClass(\"plate-setup-tab-container\");\n        $(this.topRight).append(this.tabContainer);\n      },\n\n      _createTabs: function() {\n        // this could be done using z-index. just imagine few cards stacked up.\n        // Check if options has tab data.\n        // Originally we will be pulling tab data from developer.\n        // Now we are building upon dummy data.\n        this.tabHead = this._createElement(\"<div></div>\").addClass(\"plate-setup-tab-head\");\n        $(this.tabContainer).append(this.tabHead);\n\n        var tabData = this.options.attributes.tabs;\n        var that = this;\n\n        tabData.forEach(function(tab, tabIndex) {\n          that.allTabs[tabIndex] = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab\");\n          $(that.allTabs[tabIndex]).data(\"index\", tabIndex)\n            .text(tab.name);\n\n          $(that.allTabs[tabIndex]).click(function() {\n            that._tabClickHandler(this);\n          });\n\n          $(that.tabHead).append(that.allTabs[tabIndex]);\n        });\n\n        this.tabDataContainer = this._createElement(\"<div></div>\").addClass(\"plate-setup-tab-data-container\");\n        $(this.tabContainer).append(this.tabDataContainer);\n\n        this._addDataTabs(tabData);\n\n        $(this.allTabs[0]).click();\n\n        this._addTabData();\n      },\n\n      _tabClickHandler: function(clickedTab) {\n\n        if (this.selectedTab) {\n          $(this.selectedTab).removeClass(\"plate-setup-tab-selected\")\n            .addClass(\"plate-setup-tab\");\n\n          var previouslyClickedTabIndex = $(this.selectedTab).data(\"index\");\n          $(this.allDataTabs[previouslyClickedTabIndex]).css(\"z-index\", 0);\n          this.readOnlyHandler();\n        }\n\n        $(clickedTab).addClass(\"plate-setup-tab-selected\");\n\n        this.selectedTab = clickedTab;\n\n        var clickedTabIndex = $(clickedTab).data(\"index\");\n        $(this.allDataTabs[clickedTabIndex]).css(\"z-index\", 1000);\n      },\n\n      _addDataTabs: function(tabs) {\n\n        var tabIndex = 0;\n\n        for (var tabData in tabs) {\n          this.allDataTabs[tabIndex++] = this._createElement(\"<div></div>\").addClass(\"plate-setup-data-div\")\n            .css(\"z-index\", 0);\n          $(this.tabDataContainer).append(this.allDataTabs[tabIndex - 1]);\n        }\n      }\n    };\n  }\n})(jQuery, fabric);","var plateLayOutWidget = plateLayOutWidget || {};\n\n(function($, fabric) {\n\n  plateLayOutWidget.undoRedoManager = function(THIS) {\n\n    return {\n\n      undoRedoArray: [],\n\n      actionPointer: null,\n\n      addToUndoRedo: function(data) {\n\n        if (this.actionPointer != null) {\n          var i = this.actionPointer + 1;\n          if (i < this.undoRedoArray.length) {\n            this.undoRedoArray.splice(i, this.undoRedoArray.length - i);\n          }\n        }\n        this.actionPointer = null;\n        this.undoRedoArray.push($.extend(true, {}, data));\n      },\n\n      _configureUndoRedoArray: function() {\n\n        var data = {\n          checkboxes: [],\n          derivative: {},\n          selectedAreas: [{\n            minRow: 0,\n            minCol: 0,\n            maxRow: 0,\n            maxCol: 0\n          }],\n          focalWell: {\n            row: 0,\n            col: 0\n          }\n        };\n\n        this.undoRedoArray = [];\n        this.actionPointer = null;\n        this.undoRedoArray.push($.extend({}, data));\n      },\n\n      undo: function() {\n        console.log(\"undo\");\n        return this.shiftUndoRedo(-1);\n      },\n\n      redo: function() {\n        console.log(\"redo\");\n        return this.shiftUndoRedo(1);\n      },\n\n      shiftUndoRedo: function(pointerDiff) {\n        var pointer = this.actionPointer;\n        if (pointer == null) {\n          pointer = this.undoRedoArray.length - 1;\n        }\n        pointer += pointerDiff;\n        return this.setUndoRedo(pointer);\n      },\n\n      setUndoRedo: function(pointer) {\n        if (pointer < 0) {\n          return false;\n        }\n        if (pointer >= this.undoRedoArray.length) {\n          return false;\n        }\n        this.undoRedoActive = true;\n        this.setData(this.undoRedoArray[pointer]);\n        this.actionPointer = pointer;\n        this.undoRedoActive = false;\n        this.derivativeChange();\n        return true;\n      }\n    }\n  };\n\n})(jQuery, fabric);","var plateLayOutWidget = plateLayOutWidget || {};\n\n(function($, fabric) {\n\n  plateLayOutWidget.wellArea = function(fabric) {\n\n    return {\n\n      _areasToTiles: function(areas) {\n        //Convert areas to tiles\n        var cols = this.dimensions.cols;\n        var that = this;\n        return areas.reduce(function(tiles, area) {\n          if (area) {\n            for (var r = area.minRow; r <= area.maxRow; r++) {\n              for (var c = area.minCol; c <= area.maxCol; c++) {\n                var tile = that.allTiles[c + cols * r];\n                if (tiles.indexOf(tile) < 0) {\n                  if (that.disableAddDeleteWell) {\n                    if (that.addressAllowToEdit.indexOf(tile.address) >= 0) {\n                      tiles.push(tile);\n                    }\n                  } else {\n                    tiles.push(tile);\n                  }\n                }\n              }\n            }\n          }\n          return tiles;\n        }, []);\n      },\n\n      _encodeArea: function(area) {\n        //Encode area as string\n        if ((area.minRow == area.maxRow) && (area.minCol == area.maxCol)) {\n          return this.rowIndex[area.minRow] + area.minCol.toString(10);\n        } else {\n          return this.rowIndex[area.minRow] + area.minCol.toString(10) + \":\" + this.rowIndex[area.maxRow] + area.maxCol.toString(10);\n        }\n      },\n\n      _encodeAreas: function(areas) {\n        //Encode an array of areas as a string\n        var that = this;\n        return areas.map(function(area) {\n          return that._encodeArea(area);\n        }).join(\",\");\n      },\n\n      _decodeWell: function(wellAddress) {\n        var that = this;\n        var adRx = new RegExp(\"^\\\\s*(\" + that.rowIndex.join(\"|\") + \")(\\\\d+)\\\\s*$\")\n        var rcRx = /^\\s*R(\\d+)C(\\d+)\\s*$/i;\n\n        var match;\n        match = wellAddress.match(adRx);\n        if (match) {\n          var row = that.rowIndex.indexOf(match[1]);\n          if (row >= 0) {\n            return {\n              row: row,\n              col: parseInt(match[2]) - 1\n            };\n          }\n        }\n        match = wellAddress.match(rcRx);\n        if (match) {\n          return {\n            row: parseInt(match[1]) - 1,\n            col: parseInt(match[2]) - 1\n          };\n        }\n\n        throw \"Invalid well address: \" + wellAddress;\n      },\n\n      _decodeArea: function(areaAddress) {\n        //Decode single area as string\n        var that = this;\n        var wells = areaAddress.split(\":\").map(function(wellAddress) {\n          return that._decodeWell(wellAddress);\n        })\n        if (wells.length == 1) {\n          return {\n            minRow: wells[0].row,\n            minCol: wells[0].col,\n            maxRow: wells[0].row,\n            maxCol: wells[0].col\n          }\n        } else if (wells.length == 2) {\n          var minRow = Math.min(wells[0].row, wells[1].row)\n          return {\n            minRow: Math.min(wells[0].row, wells[1].row),\n            minCol: Math.min(wells[0].col, wells[1].col),\n            maxRow: Math.max(wells[0].row, wells[1].row),\n            maxCol: Math.max(wells[0].col, wells[1].col)\n          }\n        } else {\n          throw \"Invalid address: \" + areaAddress;\n        }\n      },\n\n      _decodeAreas: function(areasAddress) {\n        //Decode single area as string\n        var that = this;\n        return areasAddress.split(\",\").map(function(areaAddress) {\n          return that._decodeArea(areaAddress);\n        });\n      },\n\n      _wellToArea: function(well) {\n        //Convert a well to an area\n        return {\n          minCol: well.col,\n          minRow: well.row,\n          maxCol: well.col,\n          maxRow: well.row\n        }\n      },\n\n      _wellInArea: function(well, area) {\n        //Determine if a well lies within an area\n        return well.row >= area.minRow && well.row <= area.maxRow && well.col >= area.minCol && well.col <= area.maxCol;\n      },\n\n      _coordsToRect: function(startCoords, endCoords) {\n        //Convert two XY coords to a bounding box\n        var left = Math.min(startCoords.x, endCoords.x);\n        var top = Math.min(startCoords.y, endCoords.y);\n        var height = Math.abs(endCoords.y - startCoords.y);\n        var width = Math.abs(endCoords.x - startCoords.x);\n        return {\n          top: top,\n          left: left,\n          height: height,\n          width: width\n        };\n      },\n\n      _coordIndex: function(v, count) {\n        var i;\n        if (v < 0) {\n          i = 0;\n        } else if (v >= count) {\n          i = count - 1;\n        } else {\n          i = Math.floor(v);\n        }\n        return i;\n      },\n\n      _coordsToWell: function(coord) {\n        //Convert a coordinate to a well\n        var cols = this.dimensions.cols;\n        var rows = this.dimensions.rows;\n\n        var w = this.sizes.spacing;\n        var m = this.sizes.label_spacing;\n\n        var x = (coord.x - m) / w;\n        var y = (coord.y - m) / w;\n\n        var row = this._coordIndex(y, rows);\n        var col = this._coordIndex(x, cols);\n\n        return {\n          row: row,\n          col: col,\n        };\n      },\n\n      _wellToCoords: function(well, center) {\n        //Convert a well to a coordinate\n        var w = this.sizes.spacing;\n        var m = this.sizes.label_spacing;\n        var x = well.col * w + m;\n        var y = well.row * w + m;\n        if (center) {\n          var hw = w / 2;\n          x = x + hw;\n          y = y + hw;\n        }\n\n        return {\n          x: x,\n          y: y\n        };\n      },\n\n      _areaToRect: function(area) {\n        //Convert area to rectangle\n        var rows = area.maxRow - area.minRow + 1;\n        var cols = area.maxCol - area.minCol + 1;\n\n        var w = this.sizes.spacing;\n        var m = this.sizes.label_spacing;\n\n        return {\n          top: area.minRow * w + m,\n          left: area.minCol * w + m,\n          height: rows * w,\n          width: cols * w\n        }\n      },\n\n      _rectToArea: function(rect) {\n        //Convert a rectangular region to an area\n        var rows = this.dimensions.rows;\n        var cols = this.dimensions.cols;\n\n        var w = this.sizes.spacing;\n        var m = this.sizes.label_spacing;\n\n        var left = (rect.left - m) / w;\n        var top = (rect.top - m) / w;\n        var height = rect.height / w;\n        var width = rect.width / w;\n        var right = left + width;\n        var bottom = top + height;\n\n        //select whole row\n        if (right < 0) {\n          right = cols;\n        }\n        if (left >= cols) {\n          left = 0;\n        }\n        //select whole col\n        if (bottom < 0) {\n          bottom = rows;\n        }\n        if (top <= 0) {\n          top = 0;\n        }\n\n        return {\n          minCol: this._coordIndex(left, cols),\n          minRow: this._coordIndex(top, rows),\n          maxCol: this._coordIndex(right, cols),\n          maxRow: this._coordIndex(bottom, rows)\n        };\n      }\n\n    }\n  }\n})(jQuery, fabric);"]}