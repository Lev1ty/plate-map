{"version":3,"sources":["add-data-on-change.js","add-data-to-tabs.js","add-tab-data.js","add-warning-msg.js","bottom-table.js","check-box.js","color-manager.js","create-field.js","engine.js","image_assets.js","interface.js","load-plate.js","overlay.js","plate-map.js","preset.js","svg-create.js","svg-events.js","tabs.js","undo-redo-manager.js"],"names":["plateMapWidget","$","addDataOnChange","_addAllData","data","wells","this","selectedIndices","noOfSelectedObjects","length","forEach","index","well","engine","derivative","extend","defaultWell","processWellData","wellEmpty","disableAddDeleteWell","hasOwnProperty","emptyWellWithDefaultVal","_getAllMultipleVal","applyFieldWarning","_colorMixer","derivativeChange","addToUndoRedo","newData","curWell","id","newVal","multi","preData","_getMultiData","JSON","parse","stringify","curData","fieldId","addNew","added","removed","value","add","listIdx","toString","map","val","subFieldId","push","indexOf","removeIndex","removeListIndex","newPreData","idx","parseInt","searchAndStack","applyColors","_trigger","createState","checkboxes","getCheckboxes","slice","requiredField","getPlate","address","indexToAddress","selectedAddresses","getSelectedAddresses","jQuery","addDataToFields","_addDataToTabFields","fieldMap","_applyFieldData","v","undefined","setValue","addTabData","fieldList","autoId","_addTabData","tabData","options","attributes","tabs","that","multiplexFieldArray","tab","tabPointer","tabFields","fieldArray","field","console","log","type","field_val","_makeMultiplexField","_makeRegularField","allDataTabs","multipleFieldList","_makeSubField","wrapperDiv","_createElement","addClass","wrapperDivLeftSide","wrapperDivRightSide","nameContainer","text","name","fieldContainer","append","root","required","checkbox","_addCheckBox","_createField","onChange","getValue","subFieldList","requiredSubField","subFieldKey","multiplexFields","subFieldData","subField","multiplexId","subFields","subfield","mainMultiplexField","mainRefField","curId","singleSelectValue","curVal","returnVal","_changeMultiFieldValue","curDataLs","detailData","addWarningMsg","fieldWarningMsg","include","imgId","img","html","_assets","warningImg","attr","find","prepend","popText","hover","style","display","hide","remove","removeWarningMsg","fieldData","i","applyMultiplexSubFieldColor","Array","bottomTable","_bottomScreen","bottomContainer","bottomTableContainer","bottomTableHead","bottomTableBody","container","addBottomTableHeadings","row","singleField","rowCounter","globalSelectedAttributes","empty","adjustFieldWidth","bottomRow","tileAttrText","tile","getText","addBottomTableRow","color","singleStack","modelTile","allTiles","plateIdDiv","numberText","click","evt","addressToSelect","ctrlKey","setSelectedAddresses","colorPairs","colorStops","css","dataDiv","bottomForFirstTime","createExportButton","downloadCSV","csv","filename","csvFile","downloadLink","Blob","document","createElement","download","href","window","URL","createObjectURL","body","appendChild","exportData","format","rows","querySelectorAll","colorLocMap","colorLocIdxMap","stackUpWithColor","colorIdx","cols","j","innerText","replace","loc","join","overlayContainer","descriptionDiv","buttonContainer","exportButton","resetExportText","classList","setTimeout","clipboardButton","clipboard","ClipboardJS","get","resetClipboardText","on","checkBox","checkImage","dontImg","_applyCheckboxHandler","checkBoxImage","changes","changeCheckboxes","fieldIds","Object","values","globalSelectedMultiplexSubfield","subfieldIds","concat","changeSubFieldsCheckboxes","subFieldToInclude","clicked","Boolean","doImg","noUndoRedo","gsa","multiplexCheckedSubField","_clearPresetSelection","setSubFieldCheckboxes","setCheckboxes","colorManager","select2close","ev","params","args","originalEvent","stopPropagation","one","preventDefault","select2fix","input","select2setData","selected","dataAdapter","addOptions","convertToOptions","createField","_createTextField","_createNumericField","_createSelectField","_createMultiSelectField","_createBooleanField","_createMultiplexField","parseValue","String","trim","disabled","bool","prop","parseText","_createOpts","config","opts","allowClear","placeholder","minimumResultsForSearch","data_specified","ajax","optMap","opt","select2","trigger","multiple","_parseOne","_parseMany","vals","multiOnChange","e","_createDeleteButton","units","defaultUnit","unitInput","hasUnits","unitText","unit","setUnitOpts","newUnits","curUnit","cleanUnit","isPlainObject","parseRegularValue","parseUnit","getRegularValue","isNaN","_ret","getUnit","hasMultiplexUnit","unitMap","_loop","unitTypeKey","_typeof","setUnit","setRegularValue","Number","toLowerCase","u","getRegularText","textVal","removeClass","nameContainer1","fieldContainer1","singleSelect","appendTo","multiselectSetValue","setSingleSelectOptions","singleSelectChange","updateSubFieldUnitOpts","curSubField","readOnlyHandler","newSubFieldValue","subFieldName","multiselectValues","newOptions","valMap","_loop2","curOpts","unitOptions","curIds","curOpt","newMultiplexVal","selectList","selectedVal","selectVal","_ret3","checkedSubfields","_loop3","valIdx","subV","subText","optId","x","_loop4","checkMultiplexCompletion","valList","valCount","completionPct","getSubfieldStatus","req","fill","subFieldWarningMap","warningStatus","multiplexVals","multiplexIdx","updateSubFieldWarningMap","mainFieldStatus","warningText","mainFieldWarning","parseMainFieldVal","_deleteDialog","valToRemove","allSelectedMultipleVal","keys","dialogDiv","killDialog","dialogContent","tableArea","buttonRow","table","_deleteDialogTable","readOnly","deleteCheckedButton","each","decideSelectedFields","cancelButton","show","onclick","event","target","colName","thead","tbody","tr","deleteButton","THIS","colorMap","Map","stackPointer","isArray","derivativeJson","wellData","selectedSubFields","curMultiplexVals","isEmptyObject","parseFloat","sort","a","b","refDerivativeIndex","referenceDerivative","arr","wholeNoTiles","wholePercentage","setTileVisible","set","setTileColor","completion","checkCompletion","setTileComplete","Math","floor","overLayTextContainer","selectObjectInBottomTab","multiplexStatus","assets","_createInterface","topSection","topLeft","topRight","overLayContainer","canvasContainer","_createOverLay","element","_createSvg","_createTabAtRight","_createTabs","_placePresetTabs","_setShortcuts","keyup","_handleShortcuts","_configureUndoRedoArray","addEventListener","activeElement","copyCriteria","clearCriteria","pasteCriteria","keyCode","metaKey","shiftKey","redo","undo","loadPlate","addressToIndex","sanitizeWell","indices","sanitizeAddresses","sanitized","setData","filter","newWell","quiet","setSelectedIndices","overlay","overLayButtonContainer","clearCriteriaButton","copyCriteriaButton","pasteCriteriaButton","undoButton","redoButton","hasWellUpdate","alert","_getSelectedWells","commonWell","_getCommonWell","widget","m","exec","toUpperCase","row_v","col","c","charCodeAt","r","locToIndex","dimensions","_rowKey","c1","c2","code","fromCharCode","_colKey","locToAddress","indexToLoc","getDimensions","_create","rowIndex","className","isReadOnly","component","_init","getTextDerivative","wellsData","textDerivative","textValWell","textFieldIdWell","curWellData","multiplexData","textFieldVal","getWellsDifferences","wellId","wellsHash","differentWellsVals","fieldIdx","diffWellVal","commonVal","curMultiVal","containsObject","allFieldVal","setFieldsDisabled","flag","emptyDefaultWell","key","getWellSetAddressWithData","actionPointer","undoRedoArray","trs","td","children","isSelected","colors","querySelector","innerHTML","getSelectedIndex","addresses","setSelection","preset","presets","_this","wellAttrContainer","tabContainer","presetTabContainer","divText","title","presetButton","fields","_selectPreset","SVG","svgCreate","baseSizes","spacing","tile_radius","center_radius_complete","center_radius_incomplete","label_size","label_spacing","text_size","stroke","gap","svg","ls","viewbox","wellShadow","gradient","stop","at","from","to","radius","wellColors","pair","_fixRowAndColumn","_putCircles","_svgEvents","rh","nested","ch","y","plain","_createTile","g","move","d","rect","circle","center","tf","group","complete","visible","colorIndex","label","svgEvents","colorToIndex","selectionBox","getMousePosition","CTM","node","getScreenCTM","clientX","clientY","f","dimCoord","max","trunc","posToLoc","pos","s","selectionBoxPosition","pos0","pos1","d0","d1","x0","min","y0","width","height","endDrag","secondary","extending","startIdx","c0","r0","r1","selectTiles","attrs","_setSelectedTiles","blur","obj","list","deepEqual","wellVal","agrArr","inArray","multiplexField","curMultipleVal","multipleVal","allTabs","tabHead","tabIndex","_tabClickHandler","tabDataContainer","_addDataTabs","clickedTab","selectedTab","previouslyClickedTabIndex","clickedTabIndex","undoRedoManager","state","splice","clearHistory","shiftUndoRedo","pointerDiff","pointer","setUndoRedo"],"mappings":"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","file":"plate-map.min.js","sourcesContent":["var plateMapWidget = plateMapWidget || {};\n\n(function($) {\n\n  plateMapWidget.addDataOnChange = function() {\n    // This object is invoked when something in the tab fields change\n    return {\n\n      _addAllData: function(data) {\n        let wells = [];\n        if (this.selectedIndices) {\n          let noOfSelectedObjects = this.selectedIndices.length;\n          this.selectedIndices.forEach(function (index) {\n            let well;\n            if (index in this.engine.derivative) {\n              well = this.engine.derivative[index];\n            } else {\n              well = $.extend(true, {}, this.defaultWell);\n              this.engine.derivative[index] = well;\n            }\n            well = this.processWellData(data, well, noOfSelectedObjects);\n            let empty = this.engine.wellEmpty(well);\n            if (empty) {\n              if (this.disableAddDeleteWell) {\n                if (this.engine.derivative.hasOwnProperty(index)) {\n                  well = $.extend(true, {}, this.emptyWellWithDefaultVal);\n                  this.engine.derivative[index] = well;\n                }\n              } else {\n                delete this.engine.derivative[index];\n              }\n            }\n          }, this);\n        }\n        // update multiplex remove all field\n        this._getAllMultipleVal(wells);\n        this.applyFieldWarning(wells);\n        // create well when default field is sent for the cases when user delete all fields during disabledNewDeleteWell mode\n        this._colorMixer();\n        this.derivativeChange();\n        this.addToUndoRedo();\n      },\n\n      processWellData: function(newData, curWell, noOfSelectedObjects) {\n        for (let id in newData) {\n          if (!newData.hasOwnProperty(id)) {\n            continue;\n          }\n          let newVal = newData[id];\n          if (newVal !== undefined && newVal !== null) {\n            if (newVal.multi) {\n              let preData = curWell[id];\n              newVal = this._getMultiData(preData, newVal, id, noOfSelectedObjects);\n            }\n            newVal = JSON.parse(JSON.stringify(newVal));\n          } else {\n            newVal = null;\n          }\n          curWell[id] = newVal;\n        }\n\n        return curWell\n      },\n\n      _getMultiData: function(preData, curData, fieldId, noOfSelectedObjects) {\n        let addNew = curData.added;\n        let removed = curData.removed;\n        if (addNew) {\n          if (preData) {\n            if (addNew.value) {\n              let add = true;\n              for (let listIdx in preData) {\n                if (!preData.hasOwnProperty(listIdx)) {\n                  continue;\n                }\n                let multiplexData = preData[listIdx];\n                // for cases when the add new data exist in well\n                if (multiplexData[fieldId].toString() === addNew.id.toString()) {\n                  add = false;\n                  // update subfield value\n                  preData = preData.map(function(val) {\n                    if (val[fieldId].toString() === addNew.id.toString()) {\n                      for (let subFieldId in val) {\n                        if (!val.hasOwnProperty(subFieldId)) {\n                          continue;\n                        }\n                        // over write previous data if only one well is selected\n                        if (subFieldId in addNew.value && subFieldId !== fieldId) {\n                          if (noOfSelectedObjects === 1) {\n                            val[subFieldId] = addNew.value[subFieldId];\n                          } else if (addNew.value[subFieldId]) {\n                            val[subFieldId] = addNew.value[subFieldId];\n                          }\n                        }\n                      }\n                    }\n                    return val;\n                  })\n                }\n              }\n              if (add) {\n                preData.push(addNew.value);\n              }\n            } else if (preData.indexOf(addNew) < 0) {\n              preData.push(addNew);\n            }\n          } else {\n            preData = [];\n            if (addNew.value) {\n              preData.push(addNew.value);\n            } else if (addNew) {\n              preData.push(addNew);\n            }\n          }\n        }\n\n        let removeListIndex = function(preData, removeIndex) {\n          let newPreData = [];\n          for (let idx in preData) {\n            if (!preData.hasOwnProperty(idx)) {\n              continue;\n            }\n            if (parseInt(idx) !== parseInt(removeIndex)) {\n              newPreData.push(preData[idx]);\n            }\n          }\n          return newPreData;\n        };\n\n        if (removed) {\n          let removeIndex;\n          // for multiplex field\n          if (removed.value) {\n            for (let listIdx in preData) {\n              let multiplexData = preData[listIdx];\n              if (multiplexData[fieldId].toString() === removed.id.toString()) {\n                removeIndex = listIdx;\n              }\n            }\n            // remove nested element\n            preData = removeListIndex(preData, removeIndex);\n          } else {\n            if (preData) {\n              removeIndex = preData.indexOf(removed);\n              if (removeIndex >= 0) {\n                preData = removeListIndex(preData, removeIndex);\n              }\n            }\n          }\n        }\n        if (preData && (preData.length === 0)) {\n          preData = null;\n        }\n        return preData\n      },\n\n      _colorMixer: function() {\n        this.engine.searchAndStack();\n        this.engine.applyColors();\n      },\n\n      derivativeChange: function() {\n        this._trigger(\"updateWells\", null, this);\n      },\n\n      createState: function() {\n        let derivative = $.extend(true, {}, this.engine.derivative);\n        let checkboxes = this.getCheckboxes();\n        let selectedIndices = this.selectedIndices.slice();\n\n        return {\n          \"derivative\": derivative,\n          \"checkboxes\": checkboxes,\n          \"selectedIndices\": selectedIndices,\n          \"requiredField\": this.requiredField\n        };\n      },\n\n      getPlate: function() {\n        let wells = {};\n        let derivative = this.engine.derivative;\n        for (let index in derivative) {\n          if (!derivative.hasOwnProperty(index)) {\n            continue;\n          }\n\n          let address = this.indexToAddress(index);\n          let well = derivative[index];\n          wells[address] = $.extend(true, {}, well);\n        }\n        let checkboxes = this.getCheckboxes();\n        let selectedAddresses = this.getSelectedAddresses();\n\n        return {\n          \"wells\": wells,\n          \"checkboxes\": checkboxes,\n          \"selectedAddresses\": selectedAddresses,\n          \"requiredField\": this.requiredField\n        };\n      }\n    };\n  }\n})(jQuery);","var plateMapWidget = plateMapWidget || {};\n\nplateMapWidget.addDataToFields = function() {\n\n  return {\n\n    _addDataToTabFields: function(well) {\n      // Configure how data is added to tab fields\n      for (let id in this.fieldMap) {\n        if (this.fieldMap.hasOwnProperty(id)) {\n          this._applyFieldData(id, well[id]);\n        }\n      }\n    },\n\n    _applyFieldData: function(id, v) {\n      if (v === undefined) {\n        v = null;\n      }\n      this.fieldMap[id].setValue(v);\n    }\n  }\n};\n","var plateMapWidget = plateMapWidget || {};\n\n(function($) {\n\n  plateMapWidget.addTabData = function() {\n\n    return {\n\n      fieldList: [],\n      fieldMap: {},\n      autoId: 1,\n\n      _addTabData: function() {\n        // Here we may need more changes because attributes format likely to change\n        let tabData = this.options.attributes.tabs;\n        let that = this;\n        this.requiredField = [];\n        let multiplexFieldArray = [];\n        tabData.forEach(function(tab, tabPointer) {\n          if (tab[\"fields\"]) {\n            let tabFields = tab[\"fields\"];\n            let fieldArray = [];\n            // Now we look for fields in the json\n            for (let field in tabFields) {\n              if (!tabFields.hasOwnProperty(field)) {\n                continue;\n              }\n              let data = tabFields[field];\n\n              if (!data.id) {\n                data.id = \"Auto\" + that.autoId++;\n                console.log(\"Field autoassigned id \" + data.id);\n              }\n              if (!data.type) {\n                data.type = \"text\";\n                console.log(\"Field \" + data.id + \" autoassigned type \" + data.type);\n              }\n\n              let field_val;\n              if (data.type === \"multiplex\") {\n                field_val = that._makeMultiplexField(data, tabPointer, fieldArray);\n                multiplexFieldArray.push(field_val);\n              } else {\n                field_val = that._makeRegularField(data, tabPointer, fieldArray, true);\n                if (data.type === \"multiselect\") {\n                  multiplexFieldArray.push(field_val);\n                }\n              }\n            }\n\n            that.allDataTabs[tabPointer][\"fields\"] = fieldArray;\n          } else {\n            console.log(\"unknown format in field initialization\");\n          }\n        });\n        that.multipleFieldList = multiplexFieldArray;\n      },\n\n      _makeSubField: function(data, tabPointer, fieldArray) {\n        let that = this;\n        if (!data.id) {\n          data.id = \"Auto\" + that.autoId++;\n          console.log(\"Field autoassigned id \" + data.id);\n        }\n        if (!data.type) {\n          data.type = \"text\";\n          console.log(\"Field \" + data.id + \" autoassigned type \" + data.type);\n        }\n        let wrapperDiv = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-default-field\");\n        let wrapperDivLeftSide = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-left-side\");\n        let wrapperDivRightSide = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-right-side\");\n        let nameContainer = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-name\").text(data.name);\n        let fieldContainer = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-container\");\n\n        $(wrapperDivRightSide).append(nameContainer);\n        $(wrapperDivRightSide).append(fieldContainer);\n        $(wrapperDiv).append(wrapperDivLeftSide);\n        $(wrapperDiv).append(wrapperDivRightSide);\n        $(that.allDataTabs[tabPointer]).append(wrapperDiv);\n\n        let field = {\n          id: data.id,\n          name: data.name,\n          root: wrapperDiv,\n          data: data,\n          required: data.required || false\n        };\n\n        fieldArray.push(field);\n        that.fieldMap[data.id] = field;\n\n        return field;\n      },\n\n      _makeRegularField: function(data, tabPointer, fieldArray, checkbox) {\n        let that = this;\n        let wrapperDiv = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-default-field\");\n        let wrapperDivLeftSide = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-left-side\");\n        let wrapperDivRightSide = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-right-side \");\n        let nameContainer = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-name\").text(data.name);\n        let fieldContainer = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-container\");\n\n        wrapperDivRightSide.append(nameContainer);\n        wrapperDivRightSide.append(fieldContainer);\n        wrapperDiv.append(wrapperDivLeftSide);\n        wrapperDiv.append(wrapperDivRightSide);\n        that.allDataTabs[tabPointer].append(wrapperDiv);\n\n        let field = {\n          id: data.id,\n          name: data.name,\n          root: wrapperDiv,\n          data: data,\n          required: data.required\n        };\n\n        if (field.required) {\n          that.requiredField.push(field.id);\n        }\n\n        fieldArray.push(field);\n        that.fieldList.push(field);\n        that.fieldMap[field.id] = field;\n\n        // Adding checkbox\n        if (checkbox) {\n          that._addCheckBox(field);\n        }\n        that._createField(field);\n\n        field.onChange = function() {\n          let v = field.getValue();\n          let data = {};\n          data[field.id] = v;\n          that._addAllData(data);\n        };\n        return field;\n      },\n\n      _makeMultiplexField: function(data, tabPointer, fieldArray) {\n        let that = this;\n        let wrapperDiv = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-default-field\");\n        let wrapperDivLeftSide = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-left-side\");\n        let wrapperDivRightSide = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-right-side \");\n        let nameContainer = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-name\").text(data.name);\n        let fieldContainer = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-container\");\n\n        wrapperDivRightSide.append(nameContainer);\n        wrapperDivRightSide.append(fieldContainer);\n        wrapperDiv.append(wrapperDivLeftSide);\n        wrapperDiv.append(wrapperDivRightSide);\n        that.allDataTabs[tabPointer].append(wrapperDiv);\n\n        let field = {\n          id: data.id,\n          name: data.name,\n          root: wrapperDiv,\n          data: data,\n          required: data.required\n        };\n\n        fieldArray.push(field);\n        that.fieldList.push(field);\n        that.fieldMap[data.id] = field;\n\n        let subFieldList = [];\n        //create subfields\n        let requiredSubField = [];\n        for (let subFieldKey in data.multiplexFields) {\n          if (!data.multiplexFields.hasOwnProperty(subFieldKey)) {\n            continue;\n          }\n          let subFieldData = data.multiplexFields[subFieldKey];\n          let subField = that._makeSubField(subFieldData, tabPointer, fieldArray);\n          subFieldList.push(subField);\n\n          // stores required  subField\n          if (subFieldData.required) {\n            requiredSubField.push(subField.id);\n          }\n        }\n\n        //store required field\n        if (field.required || requiredSubField.length) {\n          this.requiredField.push({\n            multiplexId: field.id,\n            subFields: requiredSubField\n          });\n        }\n\n        field.subFieldList = subFieldList;\n        that._createField(field);\n        that._addCheckBox(field);\n\n        subFieldList.forEach(function(subfield) {\n          subfield.mainMultiplexField = field;\n          fieldArray.push(subfield);\n          that._createField(subfield);\n          that._addCheckBox(subfield);\n          delete that.defaultWell[subfield.id];\n          // overwrite subField setvalue\n          subfield.onChange = function() {\n            let v = subfield.getValue();\n            let mainRefField = subfield.mainMultiplexField;\n            let curId = mainRefField.singleSelectValue();\n            //let curDataLs = mainRefField.detailData;\n            let curVal = {};\n            curVal[mainRefField.id] = curId;\n            //append subfields\n            curVal[subfield.id] = v;\n            let returnVal = {\n              id: curId,\n              value: curVal\n            };\n\n            field._changeMultiFieldValue(returnVal, null);\n            let curDataLs = mainRefField.detailData;\n            if (curDataLs !== null) {\n              curId = mainRefField.singleSelectValue();\n              curDataLs = curDataLs.map(function(curData) {\n                if (curData[mainRefField.id] === curId) {\n                  curData[subfield.id] = v;\n                }\n                return curData;\n              });\n            }\n            mainRefField.detailData = curDataLs;\n          };\n\n        });\n\n        return field;\n      }\n    }\n  }\n\n})(jQuery);\n","var plateMapWidget = plateMapWidget || {};\n\n(function($) {\n\n  plateMapWidget.addWarningMsg = function() {\n    // For those check boxes associated with every field in the tab\n    return {\n      fieldWarningMsg: function(field, text, include) {\n        let that = this;\n        let imgId = \"fieldWarning\" + field.id;\n        let img = $(\"<span>\").html(that._assets.warningImg).attr(\"id\", imgId).addClass(\"plate-field-warning-image\");\n        if (include) {\n          if (field.root.find(\"#\" + imgId).length <= 0) {\n            field.root.find(\".plate-setup-tab-name\").text(\" \" + field.name);\n            field.root.find(\".plate-setup-tab-name\").prepend(img);\n\n            let popText = $(\"<div/>\").addClass(\"pop-out-text\");\n            popText.text(text);\n            field.root.find(\".plate-setup-tab-name\").append(popText);\n\n            $(\"#\" + imgId).hover(function() {\n              popText[0].style.display = 'flex';\n            }, function() {\n              popText.hide();\n            });\n          }\n\n\n        } else {\n          if (field.root.find(\"#\" + imgId).length > 0) {\n            field.root.find(\".plate-setup-tab-name\").text(field.name);\n            $(\"#\" + imgId).remove();\n          }\n        }\n      },\n\n      removeWarningMsg: function(field, text, include) {\n        let that = this;\n        let imgId = \"fieldWarning\" + field.id;\n        let img = $(\"<span>\").html(that._assets.warningImg).attr(\"id\", imgId).addClass(\"plate-field-warning-image\");\n        //field.root.find(\".plate-setup-tab-name\").append('<img id=\"theImg\" src=\"theImg.png\" />')\n        if (include) {\n          field.root.find(\".plate-setup-tab-name\").append(img);\n\n          let popText = $(\"<div/>\").addClass(\"pop-out-text\");\n          popText.text(text);\n          field.root.find(\".plate-setup-tab-name\").append(popText);\n\n          $(\"#\" + imgId).hover(function() {\n            popText[0].style.display = 'inline-block';\n          }, function() {\n            popText.hide();\n          });\n\n        } else {\n          $(\"#\" + imgId).remove();\n          if (field.root.find(\"#\" + imgId).length > 0) {\n            //field.root.find(\".plate-setup-tab-name\").remove(img);\n            $(\"#\" + imgId).remove();\n          }\n        }\n      },\n\n      applyFieldWarning: function(wells) {\n        let that = this;\n        let fieldData = {};\n        that.fieldList.forEach(function(field) {\n          fieldData[field.id] = [];\n        });\n        wells.forEach(function(well) {\n          if (!that.engine.wellEmpty(well)) {\n            for (let fieldId in fieldData) {\n              if (fieldId in well) {\n                fieldData[fieldId].push(well[fieldId]);\n              } else {\n                fieldData[fieldId].push(null);\n              }\n            }\n          }\n        });\n        for (let i = 0; i < that.fieldList.length; i++) {\n          let field = that.fieldList[i];\n          if (field.applyMultiplexSubFieldColor) {\n            field.applyMultiplexSubFieldColor(fieldData[field.id]);\n          } else {\n            if (field.required) {\n              let include = false;\n              fieldData[field.id].forEach(function(val) {\n                // for multiselect\n                if (val instanceof Array) {\n                  if (val.length === 0) {\n                    include = true;\n                  }\n                } else {\n                  if (val === null) {\n                    include = true;\n                  }\n                }\n              });\n              //field.root.find(\".plate-setup-tab-name\").css(\"background\", color);\n              that.fieldWarningMsg(field, \"required field\", include);\n            }\n          }\n        }\n      }\n    }\n  }\n})(jQuery);","var plateMapWidget = plateMapWidget || {};\n\n(function($) {\n\n  plateMapWidget.bottomTable = function() {\n    // for bottom table\n    return {\n      _bottomScreen: function() {\n        this.bottomContainer = this._createElement(\"<div></div>\").addClass(\"plate-setup-bottom-container\");\n        this.bottomTableContainer = this._createElement(\"<div></div>\").addClass(\"plate-setup-bottom-table-container\");\n        this.bottomTable = this._createElement(\"<table></table>\").addClass(\"plate-setup-bottom-table\");\n        this.bottomTableHead = this._createElement(\"<thead></thead>\");\n        this.bottomTableBody = this._createElement(\"<tbody></tbody>\");\n        this.bottomTable.append(this.bottomTableHead);\n        this.bottomTable.append(this.bottomTableBody);\n        this.bottomTableContainer.append(this.bottomTable);\n        this.bottomContainer.append(this.bottomTableContainer);\n        this.container.append(this.bottomContainer);\n      },\n\n      addBottomTableHeadings: function() {\n\n        let row = this._createElement(\"<tr></tr>\");\n\n        let singleField = this._createElement(\"<th></th>\")\n          .text(\"Group\");\n        row.prepend(singleField);\n\n        this.rowCounter = 1;\n\n        for (let i = 0; i < this.globalSelectedAttributes.length; i++) {\n          let attr = this.globalSelectedAttributes[i];\n          let field = this.fieldMap[attr];\n          let singleField = this._createElement(\"<th></th>\").text(field.name);\n          row.append(singleField);\n          this.rowCounter = this.rowCounter + 1;\n        }\n\n        // Now we append all the captions at the place.\n        this.bottomTableBody.empty();\n        this.bottomTableHead.empty();\n        this.bottomTableHead.append(row);\n        this.adjustFieldWidth(this.bottomRow);\n      },\n\n      tileAttrText: function(tile, attr) {\n        let well = this.engine.derivative[tile.index];\n        let field = this.fieldMap[attr];\n        return field.getText(well[attr]);\n      },\n\n      addBottomTableRow: function(color, singleStack) {\n        let that = this;\n        let modelTile = this.allTiles[singleStack[0]];\n        let row = this._createElement(\"<tr></tr>\");\n        let plateIdDiv = this._createElement(\"<td></td>\").addClass(\"plate-setup-bottom-id\");\n        let numberText = this._createElement(\"<button/>\");\n        numberText.addClass(\"plate-setup-color-text\");\n        numberText.text(color);\n        plateIdDiv.append(numberText);\n\n        numberText.click(function(evt) {\n          let addressToSelect = singleStack.map(that.indexToAddress, that);\n          if (evt.ctrlKey) {\n            that.getSelectedAddresses().forEach(function(val) {\n              if (addressToSelect.indexOf(val) < 0) {\n                addressToSelect.push(val);\n              }\n            })\n          }\n          that.setSelectedAddresses(addressToSelect);\n        });\n\n        if (color > 0) {\n          color = ((color - 1) % (this.colorPairs.length - 1)) + 1;\n        }\n        let colorStops = this.colorPairs[color];\n\n        plateIdDiv.css(\"background\", \"linear-gradient(to right, \" + colorStops[0] + \" , \" + colorStops[1] + \")\");\n\n        row.append(plateIdDiv);\n\n        for (let i = 0; i < this.globalSelectedAttributes.length; i++) {\n          let attr = this.globalSelectedAttributes[i];\n          let text = this.tileAttrText(modelTile, attr);\n          let dataDiv = this._createElement(\"<td></td>\").text(text);\n          row.append(dataDiv);\n        }\n        this.bottomTableBody.append(row);\n        this.adjustFieldWidth(row);\n      },\n\n      bottomForFirstTime: function() {\n        this.addBottomTableHeadings();\n        // This is executed for the very first time.. !\n        let row = this._createElement(\"<tr></tr>\");\n\n        let colorStops = this.colorPairs[0];\n        let plateIdDiv = this._createElement(\"<td></td>\");\n        plateIdDiv.css(\"background\", \"-webkit-linear-gradient(left, \" + colorStops[0] + \" , \" + colorStops[1] + \")\");\n        row.append(plateIdDiv);\n        this.bottomTableBody.append(row);\n        this.createExportButton();\n      },\n\n      adjustFieldWidth: function(row) {\n\n        let length = this.rowCounter;\n        if ((length) * 150 > 1024) {\n          row.css(\"width\", (length) * 152 + \"px\");\n        }\n      },\n\n      downloadCSV: function(csv, filename) {\n        let csvFile;\n        let downloadLink;\n\n        // CSV file\n        csvFile = new Blob([csv], {\n          type: \"text/csv\"\n        });\n\n        // Download link\n        downloadLink = document.createElement(\"a\");\n\n        // File name\n        downloadLink.download = filename;\n\n        // Create a link to the file\n        downloadLink.href = window.URL.createObjectURL(csvFile);\n\n        // Hide download link\n        downloadLink.style.display = \"none\";\n\n        // Add the link to DOM\n        document.body.appendChild(downloadLink);\n\n        // Click download link\n        downloadLink.click();\n      },\n\n      exportData: function(format) {\n        let data = [];\n        let rows = document.querySelectorAll(\"table tr\");\n\n        let colorLocMap = {};\n        let colorLocIdxMap = this.engine.stackUpWithColor;\n        for (let colorIdx in colorLocIdxMap) {\n          if (colorLocIdxMap.hasOwnProperty(colorIdx)) {\n            colorLocMap[colorIdx] = colorLocIdxMap[colorIdx].map(this.indexToAddress, this);\n          }\n        }\n\n        for (let i = 0; i < rows.length; i++) {\n          let row = [],\n            cols = rows[i].querySelectorAll(\"td, th\");\n\n          for (let j = 0; j < cols.length; j++) {\n            let v = \"\";\n            if (cols[j].innerText) {\n              if (format === \"csv\") {\n                v = '\"' + cols[j].innerText.replace(/\"/g, '\"\"') + '\"';\n              } else {\n                v = cols[j].innerText;\n              }\n            }\n            row.push(v);\n\n            // add location column\n            if (i === 0 && j === 0) {\n              if (format === \"csv\") {\n                row.push('\"Location\"');\n              } else if (format === 'clipboard') {\n                row.push(\"Location\");\n              }\n\n            }\n            if (i !== 0 && j === 0) {\n              let loc = '';\n              if (colorLocMap[parseInt(cols[j].innerText)]) {\n                if (format === \"csv\") {\n                  loc = '\"' + colorLocMap[parseInt(cols[j].innerText)].join(\",\") + '\"';\n                } else if (format === 'clipboard') {\n                  loc = colorLocMap[parseInt(cols[j].innerText)].join(\",\");\n                }\n              }\n              row.push(loc);\n            }\n          }\n\n          if (format === \"csv\") {\n            data.push(row.join(\",\"));\n          } else if (format === 'clipboard') {\n            data.push(row.join(\"\\t\"));\n            //data.push(row);   // for text type\n          }\n\n        }\n        if (format === \"csv\") {\n          // Download CSV file\n          this.downloadCSV(data.join(\"\\n\"), 'table.csv');\n        } else if (format === 'clipboard') {\n          //return formatTableToString(data);   // for text type\n          return data.join(\"\\n\");\n        }\n      },\n\n      createExportButton: function() {\n        let that = this;\n        let overlayContainer = $(\"<div>\").addClass(\"plate-setup-bottom-control-container\");\n\n        let descriptionDiv = $(\"<div>\").addClass(\"plate-setup-overlay-text-container\");\n        descriptionDiv.text(\"Color groups\");\n        overlayContainer.append(descriptionDiv);\n\n        let buttonContainer = $(\"<div>\").addClass(\"plate-setup-overlay-bottom-button-container\");\n\n        // create export csv option\n        let exportButton = $(\"<button/>\").addClass(\"plate-setup-button\");\n        exportButton.text(\"Export CSV\");\n        buttonContainer.append(exportButton);\n\n        exportButton.click(function() {\n          that.exportData('csv');\n          exportButton.text(\"Exported\");\n          exportButton[0].classList.remove(\"plate-setup-button\");\n          exportButton.addClass(\"plate-setup-clicked-button\");\n          setTimeout(resetExportText, 3000);\n        });\n\n        function resetExportText() {\n          exportButton.text(\"Export CSV\");\n          exportButton[0].classList.remove(\"plate-setup-clicked-button\");\n          exportButton.addClass(\"plate-setup-button\");\n        }\n\n        // creat clipboard option, CLipboard is an external js file located in vendor/asset/javascripts\n        let clipboardButton = $(\"<button/>\").addClass(\"plate-setup-button\");\n        clipboardButton.text(\"Copy To Clipboard\");\n        buttonContainer.append(clipboardButton);\n\n        let clipboard = new ClipboardJS(clipboardButton.get(0), {\n          text: function() {\n            return that.exportData(\"clipboard\");\n          }\n        });\n\n        clipboard.on('success', function() {\n          clipboardButton.text(\"Copied as tab-delimited format\");\n          clipboardButton[0].classList.remove(\"plate-setup-button\");\n          clipboardButton.addClass(\"plate-setup-clicked-button\");\n          setTimeout(resetClipboardText, 3000);\n        });\n\n        function resetClipboardText() {\n          clipboardButton.text(\"Copy To Clipboard\");\n          clipboardButton[0].classList.remove(\"plate-setup-clicked-button\");\n          clipboardButton.addClass(\"plate-setup-button\");\n        }\n\n        clipboard.on('error', function() {\n          clipboardButton.text(\"Failed to copy table to clipboard: browser may be incompatible\");\n          setTimeout(resetClipboardText, 3000);\n        });\n\n        overlayContainer.append(buttonContainer);\n        this.bottomContainer.prepend(overlayContainer);\n      }\n    };\n  }\n})(jQuery);","var plateMapWidget = plateMapWidget || {};\n\n(function($) {\n\n  plateMapWidget.checkBox = function() {\n    // For those check boxes associated with every field in the tab\n    return {\n\n      globalSelectedAttributes: [],\n\n      _addCheckBox: function(field) {\n        var checkImage = $(\"<span>\").html(this._assets.dontImg).addClass(\"plate-setup-tab-check-box bg-light\")\n          .data(\"clicked\", false);\n        checkImage.data(\"linkedFieldId\", field.id);\n        field.root.find(\".plate-setup-tab-field-left-side\").empty().append(checkImage);\n        this._applyCheckboxHandler(checkImage); // Adding handler for change the image when clicked\n        field.checkbox = checkImage;\n      },\n\n      _applyCheckboxHandler: function(checkBoxImage) {\n        var that = this;\n        checkBoxImage.click(function() {\n          var checkBox = $(this);\n\n          var changes = {};\n          changes[checkBox.data(\"linkedFieldId\")] = !checkBox.data(\"clicked\");\n\n          that.changeCheckboxes(changes);\n        });\n      },\n\n      getCheckboxes: function () {\n        var fieldIds = this.globalSelectedAttributes.slice();\n        Object.values(this.globalSelectedMultiplexSubfield).forEach(function (subfieldIds) {\n            fieldIds = fieldIds.concat(subfieldIds);\n        });\n        return fieldIds;\n      },\n\n      changeSubFieldsCheckboxes: function(field, changes) {\n        var that = this;\n        var subFieldToInclude = [];\n\n        field.subFieldList.forEach(function(subField) {\n          var checkImage = subField.checkbox;\n          var fieldId = checkImage.data(\"linkedFieldId\");\n          var clicked = checkImage.data(\"clicked\");\n          if (fieldId in changes) {\n            clicked = Boolean(changes[fieldId]);\n          }\n          checkImage.data(\"clicked\", clicked);\n          if (clicked) {\n            checkImage.html(that._assets.doImg);\n            subFieldToInclude.push(subField.id);\n          } else {\n            checkImage.html(that._assets.dontImg);\n          }\n        });\n        return subFieldToInclude;\n      },\n\n      changeCheckboxes: function(changes, noUndoRedo) {\n        var gsa = [];\n        var multiplexCheckedSubField = {};\n        for (var i = 0; i < this.fieldList.length; i++) {\n          var field = this.fieldList[i];\n          if (field.checkbox) {\n            if (field.subFieldList) {\n              multiplexCheckedSubField[field.id] = this.changeSubFieldsCheckboxes(field, changes);\n            }\n\n            var checkImage = field.checkbox;\n            var fieldId = checkImage.data(\"linkedFieldId\");\n            var clicked = checkImage.data(\"clicked\");\n            if (fieldId in changes) {\n              clicked = Boolean(changes[fieldId]);\n            }\n            checkImage.data(\"clicked\", clicked);\n            if (clicked) {\n              gsa.push(fieldId);\n              checkImage.html(this._assets.doImg);\n            } else {\n              checkImage.html(this._assets.dontImg);\n            }\n          }\n        }\n        this.globalSelectedMultiplexSubfield = multiplexCheckedSubField;\n        this.globalSelectedAttributes = gsa;\n        this._clearPresetSelection();\n        this._colorMixer();\n        if (!noUndoRedo) {\n          this.addToUndoRedo();\n        }\n      },\n\n      setSubFieldCheckboxes: function(field, fieldIds) {\n        var that = this;\n        var subFieldToInclude = [];\n        field.subFieldList.forEach(function(subField) {\n          var checkImage = subField.checkbox;\n          var fieldId = checkImage.data(\"linkedFieldId\");\n          var clicked = fieldIds.indexOf(fieldId) >= 0;\n          checkImage.data(\"clicked\", clicked);\n          if (clicked) {\n            checkImage.html(that._assets.doImg);\n            subFieldToInclude.push(subField.id);\n          } else {\n            checkImage.html(that._assets.dontImg);\n          }\n        });\n        return subFieldToInclude;\n      },\n\n      setCheckboxes: function(fieldIds, noUndoRedo) {\n        fieldIds = fieldIds || [];\n        var gsa = [];\n        var multiplexCheckedSubField = {};\n\n        for (var i = 0; i < this.fieldList.length; i++) {\n          var field = this.fieldList[i];\n          if (field.checkbox) {\n            // special handling for multiplex field\n            if (field.subFieldList) {\n              multiplexCheckedSubField[field.id] = this.setSubFieldCheckboxes(field, fieldIds);\n            }\n\n            var checkImage = field.checkbox;\n            var fieldId = checkImage.data(\"linkedFieldId\");\n            var clicked = fieldIds.indexOf(fieldId) >= 0;\n            checkImage.data(\"clicked\", clicked);\n            if (clicked) {\n              gsa.push(fieldId);\n              checkImage.html(this._assets.doImg);\n            } else {\n\n              checkImage.html(this._assets.dontImg);\n            }\n          }\n        }\n        this.globalSelectedMultiplexSubfield = multiplexCheckedSubField;\n        this.globalSelectedAttributes = gsa;\n        this._clearPresetSelection();\n        this._colorMixer();\n        if (!noUndoRedo) {\n          this.addToUndoRedo();\n        }\n      }\n\n    };\n  }\n})(jQuery);","var plateMapWidget = plateMapWidget || {};\n\nplateMapWidget.colorManager = function() {\n\n  return {\n    // See these are color pairs for the gradient.\n    colorPairs: [\n      [\"#e6e6e6\", \"#808080\"],\n      [\"#66e8ff\", \"#0082c8\"],\n      [\"#ff7fb1\", \"#e6194b\"],\n      [\"#a2ffb1\", \"#3cb44b\"],\n      [\"#f784ff\", \"#911eb4\"],\n      [\"#ffe897\", \"#f58231\"],\n      [\"#6666ff\", \"#0000FF\"],\n      [\"#ffff7f\", \"#ffe119\"],\n      [\"#acffff\", \"#46f0f0\"],\n      [\"#ff98ff\", \"#f032e6\"],\n      [\"#ffffa2\", \"#d2f53c\"],\n      [\"#ffffff\", \"#fabebe\"],\n      [\"#66e6e6\", \"#008080\"],\n      [\"#ffffff\", \"#e6beff\"],\n      [\"#ffd48e\", \"#aa6e28\"],\n      [\"#e66666\", \"#800000\"],\n      [\"#ffffff\", \"#aaffc3\"],\n      [\"#e6e666\", \"#808000\"],\n      [\"#ffffff\", \"#ffd8b1\"],\n      [\"#66a9ef\", \"#004389\"],\n      [\"#ff6672\", \"#a7000c\"],\n      [\"#66db72\", \"#00750c\"],\n      [\"#b866db\", \"#520075\"],\n      [\"#ffa966\", \"#b64300\"],\n      [\"#ffff66\", \"#c0a200\"],\n      [\"#6dffff\", \"#07b1b1\"],\n      [\"#ff66ff\", \"#b100a7\"],\n      [\"#f9ff66\", \"#93b600\"],\n      [\"#ffe5e5\", \"#bb7f7f\"],\n      [\"#66a7a7\", \"#004141\"],\n      [\"#ffe5ff\", \"#a77fc0\"],\n      [\"#d19566\", \"#6b2f00\"],\n      [\"#ffffef\", \"#c0bb89\"],\n      [\"#d1ffea\", \"#6bc084\"],\n      [\"#a7a766\", \"#414100\"],\n      [\"#ffffd8\", \"#c09972\"],\n      [\"#a5ffff\", \"#3fc1ff\"],\n      [\"#ffbef0\", \"#ff588a\"],\n      [\"#e1fff0\", \"#7bf38a\"],\n      [\"#ffc3ff\", \"#d05df3\"],\n      [\"#ffffd6\", \"#ffc170\"],\n      [\"#a5a5ff\", \"#3f3fff\"],\n      [\"#ffffbe\", \"#ffff58\"],\n      [\"#ebffff\", \"#85ffff\"],\n      [\"#ffd7ff\", \"#ff71ff\"],\n      [\"#a5ffff\", \"#3fbfbf\"],\n      [\"#ffffcd\", \"#e9ad67\"],\n      [\"#ffa5a5\", \"#bf3f3f\"],\n      [\"#ffffa5\", \"#bfbf3f\"]\n    ]\n  }\n};\n","var plateMapWidget = plateMapWidget || {};\n\n(function($) {\n\n  function select2close(ev) {\n    if (ev.params.args.originalEvent) {\n      // When unselecting (in multiple mode)\n      ev.params.args.originalEvent.stopPropagation();\n    } else {\n      // When clearing (in single mode)\n      $(this).one('select2:opening', function(ev) { ev.preventDefault(); });\n    }\n  }\n\n  function select2fix(input) {\n    // prevents select2 open on clear as of v4.0.8\n    input.on('select2:unselecting', select2close);\n  }\n\n  function select2setData(input, data, selected) {\n    input.empty();\n    let dataAdapter = input.data('select2').dataAdapter;\n    dataAdapter.addOptions(dataAdapter.convertToOptions(data));\n    input.val(selected);\n  }\n\n  plateMapWidget.createField = function() {\n    // It creates those fields in the tab , there is 4 types of them.\n    return {\n\n      _createField: function(field) {\n        switch (field.data.type) {\n          case \"text\":\n            this._createTextField(field);\n            break;\n\n          case \"numeric\":\n            this._createNumericField(field);\n            break;\n\n          case \"select\":\n            this._createSelectField(field);\n            break;\n\n          case \"multiselect\":\n            this._createMultiSelectField(field);\n            break;\n\n          case \"boolean\":\n            this._createBooleanField(field);\n            break;\n\n          case \"multiplex\":\n            this._createMultiplexField(field);\n            break;\n        }\n      },\n\n      _createTextField: function(field) {\n        let id = field.id;\n        let that = this;\n        let input = this._createElement(\"<input>\").attr(\"id\", id)\n          .addClass(\"plate-setup-tab-input\");\n\n        field.root.find(\".plate-setup-tab-field-container\").append(input);\n        that.defaultWell[id] = null;\n\n        field.parseValue = function(v) {\n          if (v) {\n            v = String(v);\n          } else {\n            v = null;\n          }\n          return v;\n        };\n\n        field.getValue = function() {\n          return input.val().trim() || null;\n        };\n\n        field.setValue = function(v) {\n          input.val(v);\n        };\n\n        field.getText = function(v) {\n          if (v == null) {\n            return \"\";\n          }\n          return v;\n        };\n\n        field.disabled = function(bool) {\n          field.input.prop(\"disabled\", bool);\n        };\n\n        field.parseText = field.parseValue;\n\n        input.on(\"input\", function() {\n          field.onChange();\n        });\n\n        field.input = input;\n      },\n\n      _createOpts: function(config) {\n        let opts = {\n          allowClear: true,\n          placeholder: \"select\",\n          minimumResultsForSearch: 10\n        };\n        let data_specified = false;\n\n        if (config.options) {\n          opts.data = config.options;\n          data_specified = true;\n        }\n        if (config.ajax) {\n          opts.ajax = ajax;\n          data_specified = true;\n        }\n        if (!data_specified) {\n          throw \"Must specify data or ajax\";\n        }\n        return opts;\n      },\n\n      _createSelectField: function(field) {\n        let id = field.id;\n        let that = this;\n        let input = this._createElement(\"<select/>\").attr(\"id\", id)\n          .addClass(\"plate-setup-tab-select-field\");\n\n        field.root.find(\".plate-setup-tab-field-container\").append(input);\n        that.defaultWell[id] = null;\n\n        let opts = that._createOpts(field.data);\n        let optMap = {};\n        opts.data.forEach(function(opt) {\n          optMap[String(opt.id)] = opt;\n        });\n\n        input.select2(opts);\n        select2fix(input);\n\n        field.parseValue = function(value) {\n          let v = value;\n\n          if (v === \"\") {\n            v = null;\n          }\n          if (v == null) {\n            return null;\n          }\n          v = String(v);\n          if (v in optMap) {\n            return optMap[v].id;\n          } else {\n            throw \"Invalid value \" + value + \" for select field \" + id;\n          }\n        };\n\n        field.disabled = function(bool) {\n          field.input.prop(\"disabled\", bool);\n        };\n\n        field.getValue = function() {\n          return field.parseValue(input.val());\n        };\n\n        field.setValue = function(v) {\n          input.val(v);\n          input.trigger(\"change.select2\")\n        };\n\n        field.getText = function(v) {\n          if (v == null) {\n            return \"\";\n          }\n          return optMap[String(v)].text;\n        };\n\n        field.parseText = function(value) {\n          let v = value;\n\n          if (v === \"\") {\n            v = null;\n          }\n          if (v == null) {\n            return null;\n          }\n          v = String(v);\n          if (v in optMap) {\n            return optMap[v].text;\n          } else {\n            throw \"Invalid text value \" + value + \" for select field \" + id;\n          }\n        };\n\n        input.on(\"change\", function() {\n          field.onChange();\n        });\n\n        field.input = input;\n      },\n\n      _createMultiSelectField: function(field) {\n        let id = field.id;\n        let that = this;\n        let input = this._createElement(\"<select/>\").attr(\"id\", id)\n          .addClass(\"plate-setup-tab-multiselect-field\");\n        input.attr(\"multiple\", \"multiple\");\n\n        field.root.find(\".plate-setup-tab-field-container\").append(input);\n        that.defaultWell[id] = null;\n\n        let opts = that._createOpts(field.data);\n        opts.multiple = true;\n        let optMap = {};\n        opts.data.forEach(function(opt) {\n          optMap[String(opt.id)] = opt;\n        });\n        input.select2(opts);\n        select2fix(input);\n\n        field.disabled = function(bool) {\n          input.prop(\"disabled\", bool);\n        };\n\n        field._parseOne = function(val) {\n          val = String(val);\n          if (val in optMap) {\n            return optMap[val].id;\n          } else {\n            throw \"Invalid value \" + val + \" for multiselect field \" + id;\n          }\n        };\n\n        field._parseMany = function(vals) {\n          if (vals && vals.length) {\n            vals = vals.map(field._parseOne, this);\n          } else {\n            vals = null;\n          }\n          return vals;\n        };\n\n        field.parseValue = function(value) {\n          return field._parseMany(value);\n        };\n\n        field.getValue = function() {\n          return field._parseMany(input.val());\n        };\n\n        field.setValue = function(v) {\n          v = v || [];\n          input.val(v);\n          input.trigger(\"change.select2\");\n        };\n\n        field.getText = function(v) {\n          if (v == null) {\n            return \"\";\n          }\n          if (v.length > 0) {\n            return v.map(v => optMap[String(v)].text).join(\"; \");\n          }\n          return \"\";\n        };\n\n        field.multiOnChange = function(added, removed) {\n          if (added) {\n            added = added.id;\n          }\n          if (removed) {\n            removed = removed.id;\n          }\n          let data = {};\n          data[field.id] = {\n            multi: true,\n            added: added,\n            removed: removed\n          };\n          that._addAllData(data);\n        };\n\n        field.parseText = function(value) {\n          let v = value;\n          if (v && v.length) {\n            v = v.map(function(opt) {\n              opt = String(opt);\n              if (opt in optMap) {\n                return optMap[opt].text;\n              } else {\n                throw \"Invalid text value \" + opt + \" for multiselect field \" + id;\n              }\n            });\n          } else {\n            v = null;\n          }\n          return v;\n        };\n\n        input.on(\"select2:select\", function (e) {\n          let v = field._parseOne(e.params.data.id);\n          v = {id: v};\n          field.multiOnChange(v, null);\n        });\n\n        input.on(\"select2:unselect\", function (e) {\n          let v = field._parseOne(e.params.data.id);\n          v = {id: v};\n          field.multiOnChange(null, v);\n        });\n\n        field.input = input;\n\n        that._createDeleteButton(field);\n      },\n\n      _createNumericField: function(field) {\n        let id = field.id;\n        let data = field.data;\n        let that = this;\n        let input = this._createElement(\"<input>\").addClass(\"plate-setup-tab-input\")\n          .attr(\"placeholder\", data.placeholder || \"\").attr(\"id\", id);\n\n        field.root.find(\".plate-setup-tab-field-container\").append(input);\n        that.defaultWell[id] = null;\n\n        // Adding unit\n        let units = data.units || [];\n        let defaultUnit = data.defaultUnit || null;\n        let unitInput = null;\n        if (defaultUnit) {\n          if (units.length) {\n            if (units.indexOf(defaultUnit) < 0) {\n              defaultUnit = units[0];\n            }\n          } else {\n            units = [defaultUnit];\n          }\n        } else {\n          if (units.length) {\n            defaultUnit = units[0];\n          }\n        }\n\n        if (units.length) {\n          field.units = units;\n          field.hasUnits = true;\n          field.defaultUnit = defaultUnit;\n          if (units.length === 1) {\n            let unitText = $(\"<div></div>\").addClass(\"plate-setup-tab-unit\");\n            unitText.text(defaultUnit);\n            field.root.find(\".plate-setup-tab-field-container\").append(unitText);\n          } else {\n            unitInput = this._createElement(\"<select/>\").attr(\"id\", id)\n              .addClass(\"plate-setup-tab-label-select-field\");\n\n            field.root.find(\".plate-setup-tab-field-container\").append(unitInput);\n\n            let selected = null;\n            let unitData = units.map(function(unit) {\n              let o = {\n                id: unit,\n                text: unit\n              };\n              if (unit === defaultUnit) {\n                selected = unit;\n              }\n              return o;\n            });\n\n            let opts = {\n              data: unitData,\n              allowClear: false,\n              minimumResultsForSearch: 10\n            };\n\n            unitInput.select2(opts);\n            unitInput.val(selected);\n          }\n        }\n\n        field.disabled = function(bool) {\n          field.input.prop(\"disabled\", bool);\n          if (unitInput) {\n            unitInput.prop(\"disabled\", bool);\n          }\n        };\n\n        field.setUnitOpts = function(opts) {\n          field.units = opts || null;\n          field.defaultUnit = null;\n\n          let newUnits = [];\n          let selected = null;\n          if (field.units && field.units.length) {\n            field.defaultUnit = field.units[0];\n            newUnits = field.units.map(function(curUnit) {\n              let cleanUnit = {\n                id: curUnit,\n                text: curUnit\n              };\n              if (curUnit === field.defaultUnit) {\n                selected = curUnit;\n              }\n              return cleanUnit;\n            });\n          }\n\n          select2setData(unitInput, newUnits, selected);\n        };\n\n        field.parseValue = function(value) {\n          let v;\n          if ($.isPlainObject(value)) {\n            if (field.hasUnits) {\n              v = field.parseRegularValue(value.value);\n              if (v === null) {\n                return null;\n              }\n              return {\n                value: v,\n                unit: field.parseUnit(value.unit)\n              };\n            } else {\n              throw \"Value must be plain numeric for numeric field \" + id;\n            }\n          } else {\n            if (field.hasUnits) {\n              v = field.parseRegularValue(value);\n              if (v === null) {\n                return null;\n              }\n              return {\n                value: v,\n                unit: field.defaultUnit\n              };\n            } else {\n              return field.parseRegularValue(value);\n            }\n          }\n        };\n\n        field.getValue = function() {\n          let v = field.getRegularValue();\n\n          if ((v === null) || isNaN(v)) {\n            return null;\n          } else if (field.hasUnits) {\n            let returnVal = {\n              value: v,\n              unit: field.getUnit()\n            };\n\n            if (field.data.hasMultiplexUnit) {\n              // include unitTypeId and UnitId to returnVal\n              let unitMap = field.data.unitMap;\n              for (let unitTypeKey in unitMap) {\n                if (!unitMap.hasOwnProperty(unitTypeKey)) {\n                  continue;\n                }\n                let unitTypeUnits = unitMap[unitTypeKey];\n                unitTypeUnits.forEach(function(unit) {\n                  if (unit.text === returnVal.unit) {\n                    returnVal['unitTypeId'] = unitTypeKey;\n                    returnVal['unitId'] = unit.id;\n                  }\n                })\n              }\n            }\n            return returnVal;\n          } else {\n            return v;\n          }\n        };\n\n        field.setValue = function(value) {\n          if (field.hasUnits) {\n            if ($.isPlainObject(value)) {\n              field.setUnit(value.unit || field.defaultUnit);\n              field.setRegularValue(value.value);\n\n            } else {\n              field.setRegularValue(value);\n              field.setUnit(field.defaultUnit)\n            }\n          } else {\n            field.setRegularValue(value);\n          }\n        };\n\n        field.parseRegularValue = function(value) {\n          if (value == null) {\n            return null;\n          }\n          let v = String(value).trim();\n          if (v === \"\") {\n            return null;\n          }\n          v = Number(value);\n          if (isNaN(v)) {\n            throw \"Invalid value \" + value + \" for numeric field \" + id;\n          }\n          return v;\n        };\n\n        field.getRegularValue = function() {\n          let v = input.val().trim();\n          if (v === \"\") {\n            v = null;\n          } else {\n            v = Number(v);\n          }\n          return v;\n        };\n\n        field.setRegularValue = function(value) {\n          input.val(value);\n        };\n\n        field.parseUnit = function(unit) {\n          if (unit == null || unit === \"\") {\n            return field.defaultUnit;\n          }\n          for (let i = 0; i < units.length; i++) {\n            if (unit.toLowerCase() === units[i].toLowerCase()) {\n              return units[i];\n            }\n          }\n          throw \"Invalid unit \" + unit + \" for field \" + id;\n        };\n\n        field.getUnit = function() {\n          if (unitInput) {\n            return unitInput.val();\n          } else {\n            return field.defaultUnit;\n          }\n        };\n\n        field.setUnit = function(unit) {\n          if (unitInput) {\n            unit = unit || field.defaultUnit;\n            unitInput.val(unit);\n            unitInput.trigger(\"change.select2\");\n          }\n        };\n\n        // val now contains unit\n        field.getText = function(val) {\n          if (typeof (val) === 'object' && val) {\n            let v = val.value;\n            let u = val.unit;\n            if (v == null) {\n              return \"\";\n            }\n            v = v.toString();\n            if (!u) {\n              u = defaultUnit;\n            }\n            if (u) {\n              v = v + \" \" + u;\n            }\n            return v;\n          } else {\n            return field.getRegularText(val);\n          }\n        };\n\n        field.getRegularText = function(v) {\n          if (v == null) {\n            return \"\";\n          }\n          v = v.toString();\n          return v;\n        };\n\n        field.parseText = function(v) {\n          let textVal = field.parseValue(v);\n          if (textVal && typeof (textVal) === \"object\") {\n            return textVal.value + textVal.unit;\n          } else if (textVal) {\n            return textVal\n          } else {\n            return null;\n          }\n        };\n\n        input.on(\"input\", function() {\n          let v = field.getRegularValue();\n          if (isNaN(v)) {\n            //flag field as invalid\n            input.addClass(\"invalid\");\n          } else {\n            input.removeClass(\"invalid\");\n          }\n          field.onChange();\n        });\n        if (unitInput) {\n          unitInput.on(\"change\", function() {\n            field.onChange();\n          });\n        }\n\n        field.input = input;\n        field.unitInput = unitInput;\n      },\n\n      _createBooleanField: function(field) {\n        let id = field.id;\n        let that = this;\n        let input = this._createElement(\"<select/>\").attr(\"id\", id)\n          .addClass(\"plate-setup-tab-select-field\");\n        that.defaultWell[id] = null;\n\n        field.root.find(\".plate-setup-tab-field-container\").append(input);\n        let tval = {\n          id: \"true\",\n          text: \"true\"\n        };\n        let fval = {\n          id: \"false\",\n          text: \"false\"\n        };\n        let opts = {\n          data: [tval, fval],\n          placeholder: \"select\",\n          allowClear: true,\n          minimumResultsForSearch: -1\n        };\n\n        input.select2(opts);\n        select2fix(input);\n\n        field.disabled = function(bool) {\n          field.input.prop(\"disabled\", bool);\n        };\n\n        field.parseValue = function(value) {\n          if (value == null) {\n            return null;\n          }\n          let v = String(value).trim().toLowerCase();\n          if (v === \"true\") {\n            v = true;\n          } else if (v === \"false\") {\n            v = false;\n          } else if (v === \"\") {\n            v = null;\n          } else {\n            throw \"Invalid value \" + value + \" for boolean field \" + id;\n          }\n          return v;\n        };\n\n        field.getValue = function() {\n          let v = input.val();\n          switch (v) {\n            case \"true\":\n              return true;\n            case \"false\":\n              return false;\n            default:\n              return null;\n          }\n        };\n\n        field.setValue = function(v) {\n          if (v === 1 || v === true || v === \"true\") {\n            v = \"true\";\n          } else if (v === 0 || v === false || v === \"false\") {\n            v = \"false\";\n          } else {\n            v = null;\n          }\n          input.val(v);\n          input.trigger(\"change.select2\");\n        };\n\n        field.getText = function(v) {\n          if (v == null) {\n            return \"\";\n          }\n          return v.toString();\n        };\n\n        field.parseText = field.parseValue;\n\n        input.on(\"change\", function() {\n          field.onChange();\n        });\n\n        field.input = input;\n      },\n\n      _createMultiplexField: function(field) {\n        let that = this;\n        // make correct multiplex data\n        this._createMultiSelectField(field);\n        // overwrite default well for multiplex field\n        that.defaultWell[field.id] = [];\n\n        // single select\n        let nameContainer1 = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-name-singleSelect\").text(\"Select to edit\");\n        let fieldContainer1 = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-container-singleSelect\");\n        field.root.find(\".plate-setup-tab-field-right-side\").append(nameContainer1, fieldContainer1);\n\n        field.singleSelect = this._createElement(\"<select/>\").attr(\"id\", field.id + \"SingleSelect\")\n          .addClass(\"plate-setup-tab-multiplex-single-select-field\");\n\n        field.singleSelect.appendTo(fieldContainer1);\n        let opts = {\n          allowClear: false,\n          placeholder: \"select\",\n          minimumResultsForSearch: 10,\n          data: []\n        };\n        field.singleSelect.select2(opts);\n        select2fix(field.singleSelect);\n\n        let multiselectSetValue = field.setValue;\n\n        field.singleSelectValue = function() {\n          let v = field.singleSelect.val();\n          if (v === \"\") {\n            return null;\n          }\n          if (v == null) {\n            return null;\n          }\n          return field._parseOne(v)\n        };\n\n        let setSingleSelectOptions = function(data, selected) {\n          data = data || [];\n\n          if (!selected) {\n            if (data.length) {\n              selected = data[0].id;\n            } else {\n              selected = null;\n            }\n          }\n          select2setData(field.singleSelect, data, selected);\n          field.singleSelect.prop(\"disabled\", data.length === 0);\n          field.singleSelect.trigger(\"change.select2\");\n        };\n\n        let singleSelectChange = function() {\n          let v = field.singleSelectValue();\n\n          field.updateSubFieldUnitOpts(v);\n\n          let curData = field.detailData || [];\n          let curSubField = null;\n          curData.forEach(function(val) {\n            if (val[field.id] === v) {\n              curSubField = val;\n            }\n          });\n\n          if (curSubField) {\n            // setvalue for subfield\n            field.subFieldList.forEach(function(subField) {\n              subField.disabled(false);\n              subField.setValue(curSubField[subField.id]);\n            });\n          } else {\n            field.subFieldList.forEach(function(subField) {\n              subField.disabled(true);\n              subField.setValue(null);\n            });\n          }\n          that.readOnlyHandler();\n        };\n\n        setSingleSelectOptions([]);\n        field.singleSelect.on(\"change.select2\", singleSelectChange);\n\n        field._changeMultiFieldValue = function(added, removed) {\n          let newSubFieldValue = {};\n          for (let subFieldName in field.data.multiplexFields) {\n            if (field.data.multiplexFields.hasOwnProperty(subFieldName)) {\n              let subFieldId = field.data.multiplexFields[subFieldName].id;\n              newSubFieldValue[subFieldId] = null;\n            }\n          }\n\n          let val;\n          if (added) {\n            if (added.value) {\n              val = added.value;\n            } else {\n              newSubFieldValue[field.id] = added.id;\n              val = newSubFieldValue;\n            }\n            added = {\n              id: added.id,\n              value: val\n            };\n          }\n\n          if (removed) {\n            if (removed.value) {\n              val = removed.value;\n            } else {\n              newSubFieldValue[field.id] = removed.id;\n              val = newSubFieldValue;\n            }\n            removed = {\n              id: removed.id,\n              value: val\n            };\n          }\n\n          let data = {};\n          data[field.id] = {\n            multi: true,\n            added: added,\n            removed: removed\n          };\n          that._addAllData(data);\n        };\n\n        // overwrite multiplex set value\n        field.setValue = function(v) {\n          // used to keep track of initially loaded multiplex data\n          field.detailData = v;\n          let multiselectValues = null;\n          if (v && v.length) {\n            multiselectValues = v.map(val => val[field.id]);\n          }\n\n          multiselectSetValue(multiselectValues);\n          let newOptions = field.input.select2('data') || [];\n          setSingleSelectOptions(newOptions);\n          singleSelectChange();\n        };\n\n        field.disabled = function(bool) {\n          field.input.prop(\"disabled\", bool);\n          field.subFieldList.forEach(function(subField) {\n            subField.disabled(bool);\n          });\n          if (bool) {\n            nameContainer1.text(\"Select to inspect\");\n          } else {\n            nameContainer1.text(\"Select to edit\");\n          }\n        };\n\n        field.parseValue = function(value) {\n          let v = value;\n          if (v && v.length) {\n            v = v.map(function(opt) {\n              let valMap = {};\n              valMap[field.id] = opt[field.id];\n              for (let subFieldId in opt) {\n                if (opt.hasOwnProperty(subFieldId)) {\n                  field.subFieldList.forEach(function(subField) {\n                    if (subField.id === subFieldId) {\n                      valMap[subField.id] = subField.parseValue(opt[subFieldId]);\n                    }\n                  });\n                }\n              }\n              return valMap;\n            });\n          } else {\n            v = null;\n          }\n          return v;\n        };\n\n        field.updateSubFieldUnitOpts = function(val) {\n          let curOpts;\n          field.data.options.forEach(function(opt) {\n            if (opt.id === val) {\n              curOpts = opt;\n            }\n          });\n          field.subFieldList.forEach(function(subField) {\n            if (subField.data.hasMultiplexUnit) {\n              if (curOpts && curOpts.hasOwnProperty(\"unitOptions\")) {\n                subField.setUnitOpts(curOpts.unitOptions[subField.id]);\n              } else {\n                subField.setUnitOpts(null);\n              }\n            }\n          })\n        };\n\n        field.multiOnChange = function(added, removed) {\n          field._changeMultiFieldValue(added, removed);\n          let v = field.getValue();\n          let curData = field.detailData;\n          let curIds = [];\n          let curOpt = null;\n          //reshape data for saveback\n          if (curData) {\n            curIds = curData.map(val => val[field.id]);\n          }\n\n          let newMultiplexVal = [];\n          let selectList = [];\n          if (v) {\n            v.forEach(function(selectedVal) {\n              if (curData) {\n                curData.forEach(function(val) {\n                  if (val[field.id] === selectedVal) {\n                    newMultiplexVal.push(val)\n                  }\n                });\n              }\n              // cases when adding new data\n              if (curIds.indexOf(selectedVal) < 0) {\n                let newVal = {};\n                newVal[field.id] = selectedVal;\n\n                field.updateSubFieldUnitOpts(selectedVal);\n                field.subFieldList.forEach(function(subfield) {\n                  // special handling for subfield which has multiplexUnit\n                  if (subfield.hasUnits) {\n                    if (subfield.data.hasMultiplexUnit) {\n                      subfield.disabled(false);\n                      field.data.options.forEach(function(opt) {\n                        if (opt.id === selectedVal) {\n                          let val = {\n                            value: null,\n                            unit: subfield.units[0]\n                          };\n                          newVal[subfield.id] = subfield.parseValue(val);\n                        }\n                      });\n                    } else {\n                      if (subfield.data.units) {\n                        if (subfield.data.units.length > 1) {\n                          subfield.disabled(false);\n                        }\n                      }\n                      let val = {\n                        value: null,\n                        unit: subfield.defaultUnit\n                      };\n                      newVal[subfield.id] = subfield.parseValue(val);\n                    }\n                  } else {\n                    newVal[subfield.id] = subfield.parseValue(null);\n                  }\n                });\n                newMultiplexVal.push(newVal);\n              }\n            });\n\n            // make data for single select options\n            v.forEach(function(selectVal) {\n              field.data.options.forEach(function(opt) {\n                if (opt.id === selectVal) {\n                  selectList.push(opt);\n                }\n              });\n            });\n\n            let selected = field.singleSelectValue();\n            for (let i = 0; i < v.length; i++) {\n              if (added && (added.id === v[i])) {\n                curOpt = v[i];\n                break;\n              } else if (i === 0) {\n                curOpt = v[i];\n              } else if (v[i] === selected) {\n                curOpt = v[i];\n              }\n            }\n          }\n\n          field.detailData = newMultiplexVal;\n          setSingleSelectOptions(selectList, curOpt);\n          singleSelectChange();\n        };\n\n        field.getText = function(v) {\n          if (v === null) {\n            return \"\";\n          }\n          // get subfields that is selected from the checkbox\n          if (field.id in that.globalSelectedMultiplexSubfield) {\n            let checkedSubfields = that.globalSelectedMultiplexSubfield[field.id];\n            let returnVal = [];\n            for (let valIdx in v) {\n              if (!v.hasOwnProperty(valIdx)) {\n                continue;\n              }\n              let subV = v[valIdx];\n              let subText = [];\n              for (let optId in field.data.options) {\n                if (field.data.options.hasOwnProperty(optId)) {\n                  let opt = field.data.options[optId];\n                  if (opt.id === subV[field.id]) {\n                    subText.push(opt.text);\n                  }\n                }\n              }\n              field.subFieldList.forEach(function(subField) {\n                if (checkedSubfields.indexOf(subField.id) >= 0) {\n                  let x = subField.getText(subV[subField.id]);\n                  subText.push(subField.name + \": \" + x);\n                }\n              });\n              returnVal.push(\"{\" + subText.join(\", \") + \"}\");\n            }\n            return returnVal.join(\";\");\n          }\n        };\n\n        field.parseText = function(v) {\n          if (v === null) {\n            return \"\";\n          } else {\n            let returnVal = [];\n            for (let valIdx in v) {\n              if (!v.hasOwnProperty(valIdx)) {\n                continue;\n              }\n              let subV = v[valIdx];\n              let subText = [];\n              for (let optId in field.data.options) {\n                if (field.data.options.hasOwnProperty(optId)) {\n                  let opt = field.data.options[optId];\n                  if (opt.id === subV[field.id]) {\n                    subText.push(opt.text);\n                  }\n                }\n              }\n              field.subFieldList.forEach(function(subField) {\n                let x = subField.getText(subV[subField.id]);\n                if (x) {\n                  subText.push(x);\n                }\n              });\n              returnVal.push(subText);\n            }\n            return returnVal;\n          }\n        };\n\n        field.checkMultiplexCompletion = function(valList) {\n          let valCount = 0;\n          let completionPct = 0;\n          let include = false;\n\n          function getSubfieldStatus(vals) {\n            let req = 0;\n            let fill = 0;\n            for (let subFieldId in field.subFieldList) {\n              if (!field.subFieldList.hasOwnProperty(subFieldId)) {\n                continue;\n              }\n              let subField = field.subFieldList[subFieldId];\n              let curVal = vals[subField.id];\n              if (subField.required) {\n                include = true;\n                req++;\n                if (typeof curVal === 'object' && curVal) {\n                  if (curVal.value) {\n                    fill++;\n                  }\n                } else if (curVal) {\n                  fill++;\n                }\n              }\n            }\n            return fill / req;\n          }\n\n          // for cases has value in multiplex field\n          if (valList) {\n            if (valList.length > 0) {\n              for (let idx in valList) {\n                if (valList.hasOwnProperty(idx)) {\n                  valCount++;\n                  let vals = valList[idx];\n                  completionPct += getSubfieldStatus(vals);\n                }\n              }\n            } else if (field.required) {\n              include = true;\n              valCount = 1;\n            }\n          } else if (field.required) {\n            include = true;\n            valCount = 1;\n          }\n\n          return {\n            include: include,\n            completionPct: completionPct / valCount\n          };\n        };\n\n        // valList contains all of the vals for selected val\n        field.applyMultiplexSubFieldColor = function(valList) {\n          function updateSubFieldWarningMap(vals) {\n            for (let subFieldId in field.subFieldList) {\n              if (!field.subFieldList.hasOwnProperty(subFieldId)) {\n                continue;\n              }\n              let subField = field.subFieldList[subFieldId];\n              // loop through each well's multiplexval list\n              if (vals === null) {\n                if (field.required && subField.required) {\n                  subFieldWarningMap[subField.id].warningStatus.push(true);\n                }\n              } else if (typeof (vals) === \"object\") {\n                if (vals.length === 0) {\n                  if (field.required && subField.required) {\n                    subFieldWarningMap[subField.id].warningStatus.push(true);\n                  }\n                } else {\n                  for (let multiplexIdx in vals) {\n                    if (!vals.hasOwnProperty(multiplexIdx)) {\n                      continue;\n                    }\n                    let curVal = vals[multiplexIdx][subField.id];\n                    if (subField.required) {\n                      if (typeof (curVal) === 'object' && curVal) {\n                        if (!curVal.value) {\n                          subFieldWarningMap[subField.id].warningStatus.push(true);\n                        } else {\n                          subFieldWarningMap[subField.id].warningStatus.push(false);\n                        }\n                      } else if (!curVal) {\n                        subFieldWarningMap[subField.id].warningStatus.push(true);\n                      } else {\n                        subFieldWarningMap[subField.id].warningStatus.push(false);\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n\n          let subFieldWarningMap = {};\n          field.subFieldList.forEach(function(subField) {\n            if (subField.required) {\n              subFieldWarningMap[subField.id] = {\n                field: subField,\n                warningStatus: []\n              };\n            }\n          });\n\n          valList.forEach(function(multiplexVals) {\n            updateSubFieldWarningMap(multiplexVals);\n          });\n          // turn off main field when all subfield are filled\n\n          let mainFieldStatus = [];\n          for (let subFieldId in subFieldWarningMap) {\n            if (!subFieldWarningMap.hasOwnProperty(subFieldId)) {\n              continue;\n            }\n            let subField = subFieldWarningMap[subFieldId].field;\n            if (subFieldWarningMap[subFieldId].warningStatus.indexOf(true) >= 0) {\n              let text = subField.name + \" is a required subfield for \" + field.name + \", please make sure all \" + field.name + \" have \" + subField.name;\n              if (field.required) {\n                that.fieldWarningMsg(subField, text, true);\n                mainFieldStatus.push(true);\n              } else {\n                that.fieldWarningMsg(subField, text, true);\n                mainFieldStatus.push(true);\n              }\n            } else {\n              that.fieldWarningMsg(subField, \"none\", false);\n              mainFieldStatus.push(false);\n            }\n          }\n          let mainFieldWarning = mainFieldStatus.indexOf(true) >= 0;\n          let warningText;\n          if (field.required) {\n            warningText = field.name + \" is a required field, please also fix missing required subfield(s) below\";\n          } else {\n            warningText = field.name + \" is not a required field, please fix missing required subfield(s) below or remove selected \" + field.name;\n          }\n          that.fieldWarningMsg(field, warningText, mainFieldWarning);\n        };\n\n        field.parseMainFieldVal = function(val) {\n          let optMap = field.data.options;\n          for (let idx = 0; idx < optMap.length; idx++) {\n            let curOpt = optMap[idx];\n            if (curOpt.id === val) {\n              return curOpt.text\n            }\n          }\n        };\n      },\n\n      _deleteDialog: function(field) {\n        let that = this;\n\n        let valMap = field.allSelectedMultipleVal;\n        let valToRemove;\n        if (valMap) {\n          valToRemove = Object.keys(valMap);\n        } else {\n          valToRemove = [];\n        }\n\n\n        let dialogDiv = $(\"<div/>\").addClass(\"plate-modal\");\n        this.container.append(dialogDiv);\n\n        function killDialog() {\n          dialogDiv.hide();\n          dialogDiv.remove();\n        }\n\n        let dialogContent = $(\"<div/>\").addClass(\"plate-modal-content\").css('width', '550px').appendTo(dialogDiv);\n        let tableArea = $(\"<div/>\").appendTo(dialogContent);\n        let buttonRow = $(\"<div/>\").addClass(\"dialog-buttons\").css(\"justify-content\", \"flex-end\").appendTo(dialogContent);\n\n        if (valToRemove.length > 0) {\n          // apply CSS property for table\n          $(\"<p/>\").text(field.name + \" in selected wells: choose items to delete and click the delete button below\").appendTo(tableArea);\n\n          let table = that._deleteDialogTable(field, valMap);\n          table.appendTo(tableArea);\n          table.addClass(\"plate-popout-table\");\n          table.find('td').addClass(\"plate-popout-td\");\n          table.find('th').addClass(\"plate-popout-th\");\n          table.find('tr').addClass(\"plate-popout-tr\");\n          if (!that.readOnly) {\n            let deleteCheckedButton = $(\"<button class='multiple-field-manage-delete-button'>Delete Checked Items</button>\");\n            buttonRow.append(deleteCheckedButton);\n            deleteCheckedButton.click(function() {\n              table.find(\"input:checked\").each(function() {\n                let val = this.value;\n                field.multiOnChange(null, {id: val});\n              });\n              // refresh selected fields after updating the multiplex field value\n              that.decideSelectedFields();\n              killDialog();\n            });\n          }\n\n        } else {\n          $(\"<p/>\").text(\"No \" + field.name + \" in the selected wells\").appendTo(tableArea);\n        }\n\n        let cancelButton = $(\"<button>Cancel</button>\");\n        buttonRow.append(cancelButton);\n        cancelButton.click(killDialog);\n\n        dialogDiv.show();\n\n        window.onclick = function(event) {\n          if (event.target === dialogDiv[0]) {\n            killDialog();\n          }\n        }\n      },\n\n      _deleteDialogTable: function(field, valMap) {\n        let that = this;\n        let colName = [field.name, \"Counts\"]; //Added because it was missing... no idea what the original should have been\n        if (!that.readOnly) {\n          colName.push(\"Delete\");\n        }\n        let table = $('<table/>');\n        let thead = $('<thead/>').appendTo(table);\n        let tr = $('<tr/>').appendTo(thead);\n\n        tr.append(colName.map(function(text) {\n          return $('<th/>').text(text);\n        }));\n\n        let tbody = $(\"<tbody/>\").appendTo(table);\n\n        field.data.options.forEach(function(opt) {\n          if (opt.id in valMap) {\n            let tr = $('<tr/>').appendTo(tbody);\n            let checkbox = $(\"<input type='checkbox'>\").prop(\"value\", opt.id);\n            $(\"<td/>\").text(opt.text).appendTo(tr);\n            $(\"<td/>\").text(valMap[opt.id]).appendTo(tr);\n            if (!that.readOnly) {\n              $(\"<td/>\").append(checkbox).appendTo(tr);\n            }\n          }\n        });\n\n        return table;\n      },\n\n      _createDeleteButton: function(field) {\n        let that = this;\n        let deleteButton = $(\"<button/>\").addClass(\"plate-setup-remove-all-button\");\n        deleteButton.id = field.id + \"Delete\";\n        deleteButton.text(\"Manage \" + field.name + \"...\");\n        let buttonContainer = that._createElement(\"<div></div>\").addClass(\"plate-setup-remove-all-button-container\");\n        buttonContainer.append(deleteButton);\n\n        field.deleteButton = deleteButton;\n        field.root.find(\".plate-setup-tab-field-right-side\").append(buttonContainer);\n\n        deleteButton.click(function() {\n          that._deleteDialog(field);\n        });\n      }\n\n    };\n  }\n})(jQuery);","var plateMapWidget = plateMapWidget || {};\n\n(function($) {\n\n  plateMapWidget.engine = function(THIS) {\n    // Methods which look after data changes and stack up accordingly\n    // Remember THIS points to plateMapWidget and 'this' points to engine\n    // Use THIS to refer parent this.\n    return {\n      engine: {\n\n        derivative: {},\n        colorMap: new Map(),\n        stackUpWithColor: {},\n        stackPointer: 2,\n\n        wellEmpty: function(well) {\n          for (let prop in well) {\n            if (!well.hasOwnProperty(prop)) {\n              continue;\n            }\n            let curVal = well[prop];\n            if (curVal !== null && curVal !== undefined) {\n              if (Array.isArray(curVal)) {\n                if (curVal.length > 0) {\n                  return false;\n                }\n              } else {\n                return false;\n              }\n            }\n          }\n          return true;\n        },\n\n        searchAndStack: function() {\n          // This method search and stack the change we made.\n          this.stackUpWithColor = {};\n          this.stackPointer = 1;\n          let derivativeJson = {};\n          for (let idx in this.derivative) {\n            if (!this.derivative.hasOwnProperty(idx)) {\n              continue;\n            }\n            let data = this.derivative[idx];\n            let wellData = {};\n            for (let i = 0; i < THIS.globalSelectedAttributes.length; i++) {\n              let attr = THIS.globalSelectedAttributes[i];\n\n              if (attr in THIS.globalSelectedMultiplexSubfield) {\n                let selectedSubFields = THIS.globalSelectedMultiplexSubfield[attr];\n                let newMultiplexVal = [];\n                for (let multiplexIdx in data[attr]) {\n                  if (!data[attr].hasOwnProperty(multiplexIdx)) {\n                    continue;\n                  }\n                  let curMultiplexVals = data[attr][multiplexIdx];\n                  let newVal = {};\n                  newVal[attr] = curMultiplexVals[attr];\n                  selectedSubFields.forEach(function(subFieldId) {\n                    newVal[subFieldId] = curMultiplexVals[subFieldId];\n                  });\n                  newMultiplexVal.push(newVal);\n                }\n                wellData[attr] = newMultiplexVal;\n              } else {\n                if (data[attr] != null) {\n                  wellData[attr] = data[attr];\n                }\n              }\n            }\n            if ($.isEmptyObject(wellData)) {\n              derivativeJson[idx] = null;\n            } else {\n              derivativeJson[idx] = JSON.stringify(wellData);\n            }\n          }\n\n          while (!$.isEmptyObject(derivativeJson)) {\n            let keys = Object.keys(derivativeJson).map(parseFloat);\n            keys.sort(function(a, b) {\n              return a - b;\n            });\n\n            let refDerivativeIndex = keys[0];\n            let referenceDerivative = derivativeJson[refDerivativeIndex];\n            let arr = [];\n\n            if (!referenceDerivative) {\n              // if no checked box has value, push it to first spot\n              if (this.stackUpWithColor[0]) {\n                this.stackUpWithColor[0].push(refDerivativeIndex);\n              } else {\n                this.stackUpWithColor[0] = [refDerivativeIndex];\n              }\n\n              delete derivativeJson[refDerivativeIndex];\n            } else {\n              // if checked boxes have values\n              for (let i = 0; i < keys.length; i++) {\n                let idx = keys[i];\n                if (referenceDerivative === derivativeJson[idx]) {\n                  arr.push(idx);\n                  this.stackUpWithColor[this.stackPointer] = arr;\n                  delete derivativeJson[idx];\n                }\n              }\n              if (arr.length > 0)\n                this.stackPointer++;\n            }\n          }\n        },\n\n        applyColors: function() {\n\n          let wholeNoTiles = 0;\n          let wholePercentage = 0;\n\n          THIS.addBottomTableHeadings();\n\n          for (let i = 0; i < THIS.allTiles.length; i++) {\n            let tile = THIS.allTiles[i];\n            THIS.setTileVisible(tile, false);\n          }\n\n          for (let color = 0; color < this.stackPointer; color++) {\n            let arr = this.stackUpWithColor[color];\n            if (arr) {\n              THIS.addBottomTableRow(color, arr);\n\n              for (let i = 0; i < arr.length; i++) {\n                wholeNoTiles++;\n                let index = this.stackUpWithColor[color][i];\n                let tile = THIS.allTiles[index];\n                let well = this.derivative[index];\n                this.colorMap.set(index, color);\n                THIS.setTileColor(tile, color);\n                // Checks if all the required fields are filled\n                let completion = this.checkCompletion(well, tile);\n                THIS.setTileComplete(tile, completion === 1);\n                wholePercentage = wholePercentage + completion;\n              }\n            }\n          }\n\n          wholePercentage = Math.floor(100 * wholePercentage / wholeNoTiles);\n\n          if (isNaN(wholePercentage)) {\n            THIS.overLayTextContainer.text(\"Completion Percentage: 0%\");\n          } else {\n            THIS.overLayTextContainer.text(\"Completion Percentage: \" + wholePercentage + \"%\");\n          }\n          THIS.selectObjectInBottomTab();\n        },\n\n        checkCompletion: function(wellData) {\n          let req = 0;\n          let fill = 0;\n          for (let i = 0; i < THIS.fieldList.length; i++) {\n            let field = THIS.fieldList[i];\n            if (field.checkMultiplexCompletion) {\n              // also apply color\n              let multiplexStatus = field.checkMultiplexCompletion(wellData[field.id]);\n              if (multiplexStatus.include) {\n                fill += multiplexStatus.completionPct;\n                req++;\n              }\n            } else {\n              if (field.required) {\n                req++;\n                if (wellData[field.id] !== null) {\n                  fill++;\n                }\n              }\n            }\n          }\n          if (req === fill) {\n            return 1;\n          }\n          return fill / req;\n        },\n      }\n    }\n  }\n})(jQuery);","var plateMapWidget = plateMapWidget || {};\n\nplateMapWidget.assets = function() {\n  return {\n    _assets: {\n      doImg: '&#10003;',\n      dontImg: '',\n      warningImg: '&#9888;'\n    }\n  };\n};\n","var plateMapWidget = plateMapWidget || {};\n\n(function($) {\n\n  plateMapWidget.interface = function() {\n    // interface holds all the methods to put the interface in place\n    return {\n\n      _createInterface: function() {\n\n        let divIdentifier = '<div></div>';\n        this.container = this._createElement(divIdentifier).addClass(\"plate-setup-wrapper\");\n        this.topSection = this._createElement(divIdentifier).addClass(\"plate-setup-top-section\");\n\n        this.topLeft = this._createElement(divIdentifier).addClass(\"plate-setup-top-left\");\n        this.topRight = this._createElement(divIdentifier).addClass(\"plate-setup-top-right\");\n\n        this.overLayContainer = this._createElement(divIdentifier).addClass(\"plate-setup-overlay-container\");\n        this.canvasContainer = this._createElement(divIdentifier).addClass(\"plate-setup-canvas-container\");\n\n        this._createOverLay();\n        $(this.topLeft).append(this.overLayContainer);\n        $(this.topLeft).append(this.canvasContainer);\n\n        $(this.topSection).append(this.topLeft);\n        $(this.topSection).append(this.topRight);\n\n        $(this.container).append(this.topSection);\n        $(this.element).append(this.container);\n\n        this._createSvg();\n\n        this._createTabAtRight();\n        this._createTabs();\n\n        this._placePresetTabs();\n        // Bottom of the screen\n        this._bottomScreen();\n\n        this.bottomForFirstTime();\n\n        let that = this;\n        this._setShortcuts();\n        $(document.body).keyup(function(e) {\n          that._handleShortcuts(e);\n        });\n\n        this._configureUndoRedoArray();\n      },\n\n      _createElement: function(element) {\n        return $(element);\n      },\n\n      _setShortcuts: function() {\n        let that = this;\n        window.addEventListener(\"cut\", function(e) {\n          if (document.activeElement === document.body) {\n            that.copyCriteria();\n            that.clearCriteria();\n            e.preventDefault();\n          }\n        });\n        window.addEventListener(\"copy\", function(e) {\n          if (document.activeElement === document.body) {\n            that.copyCriteria();\n            e.preventDefault();\n          }\n        });\n        window.addEventListener(\"paste\", function(e) {\n          if (document.activeElement === document.body) {\n            that.pasteCriteria();\n            e.preventDefault();\n          }\n        });\n      },\n\n      _handleShortcuts: function(e) {\n        if (document.activeElement === document.body) {\n          if (e.keyCode === 46) {\n            this.clearCriteria();\n            e.preventDefault();\n          } else if (e.ctrlKey || e.metaKey) {\n            if (e.keyCode === 90) {\n              if (e.shiftKey) {\n                this.redo();\n              } else {\n                this.undo();\n              }\n              e.preventDefault();\n            } else if (e.keyCode === 89) {\n              this.redo();\n              e.preventDefault();\n            }\n          }\n        }\n      },\n    };\n  }\n})(jQuery);","var plateMapWidget = plateMapWidget || {};\n\nplateMapWidget.loadPlate = function() {\n  // Methods which look after data changes and stack up accordingly\n  // Remember THIS points to plateMapWidget and 'this' points to engine\n  return {\n\n    loadPlate: function(data) {\n      //sanitize input\n      let derivative = {};\n      for (let address in data.wells) {\n        let well = data.wells[address];\n        let index = this.addressToIndex(address);\n        derivative[index] = this.sanitizeWell(well);\n      }\n      let checkboxes = data.checkboxes || [];\n      let indices = this.sanitizeAddresses(data.selectedAddresses);\n      if (indices.length === 0) {\n        indices = [0];\n      }\n\n      let sanitized = {\n        \"derivative\": derivative,\n        \"checkboxes\": checkboxes,\n        \"selectedIndices\": indices,\n      };\n\n      this.setData(sanitized);\n    },\n\n    sanitizeAddresses: function(selectedAddresses) {\n      selectedAddresses = selectedAddresses || [];\n      let indices = selectedAddresses.map(this.addressToIndex, this);\n      indices.sort();\n      indices = indices.filter((index, i) => indices.indexOf(index) === i);\n      return indices;\n    },\n\n    sanitizeWell: function(well) {\n      let newWell = {};\n      this.fieldList.forEach(function (field) {\n        newWell[field.id] = field.parseValue(well[field.id]);\n      });\n      return newWell;\n    },\n\n    setData: function(data, quiet) {\n      this.engine.derivative = data.derivative;\n      this.setCheckboxes(data.checkboxes, true);\n      this.setSelectedIndices(data.selectedIndices, true);\n      this.derivativeChange();\n      if (!quiet) {\n        this.addToUndoRedo();\n      }\n    },\n\n  }\n};\n","var plateMapWidget = plateMapWidget || {};\n\n(function($) {\n\n  plateMapWidget.overlay = function() {\n    // overlay holds all the methods to put the part just above the canvas which contains all those\n    // 'completion percentage' annd 'copy Criteria' button etc ...\n    return {\n\n      _createOverLay: function() {\n\n        let that = this;\n        this.overLayTextContainer = this._createElement(\"<div></div>\").addClass(\"plate-setup-overlay-text-container\");\n        this.overLayTextContainer.text(\"Completion Percentage:\");\n        this.overLayContainer.append(this.overLayTextContainer);\n        this.overLayButtonContainer = this._createElement(\"<div></div>\").addClass(\"plate-setup-overlay-button-container\");\n        this.overLayContainer.append(this.overLayButtonContainer);\n\n        this.clearCriteriaButton = this._createElement(\"<button />\").addClass(\"plate-setup-button\");\n        this.clearCriteriaButton.text(\"Clear\");\n        this.overLayButtonContainer.append(this.clearCriteriaButton);\n\n        this.clearCriteriaButton.click(function() {\n          that.clearCriteria();\n        });\n\n        this.copyCriteriaButton = this._createElement(\"<button />\").addClass(\"plate-setup-button\");\n        this.copyCriteriaButton.text(\"Copy\");\n        this.overLayButtonContainer.append(this.copyCriteriaButton);\n\n        this.copyCriteriaButton.click(function() {\n          that.copyCriteria();\n        });\n\n        this.pasteCriteriaButton = this._createElement(\"<button />\").addClass(\"plate-setup-button\");\n        this.pasteCriteriaButton.text(\"Paste\");\n        this.overLayButtonContainer.append(this.pasteCriteriaButton);\n\n        this.pasteCriteriaButton.click(function() {\n          that.pasteCriteria();\n        });\n\n        this.undoButton = this._createElement(\"<button />\").addClass(\"plate-setup-button\");\n        this.undoButton.text(\"Undo\");\n        this.overLayButtonContainer.append(this.undoButton);\n\n        this.undoButton.click(function() {\n          that.undo();\n        });\n\n        this.redoButton = this._createElement(\"<button />\").addClass(\"plate-setup-button\");\n        this.redoButton.text(\"Redo\");\n        this.overLayButtonContainer.append(this.redoButton);\n\n        this.redoButton.click(function() {\n          that.redo();\n        });\n\n      },\n\n      clearCriteria: function() {\n        if (this.selectedIndices && this.selectedIndices.length) {\n          let hasWellUpdate = false;\n          let selectedIndices = this.selectedIndices;\n          let well;\n          for (let i = 0; i < selectedIndices.length; i++) {\n            let index = selectedIndices[i];\n            if (index in this.engine.derivative) {\n              // handling for clearing well when not allowed to add or delete wells\n              if (this.disableAddDeleteWell) {\n                if (this.engine.derivative.hasOwnProperty(index)) {\n                  well = $.extend(true, {}, this.emptyWellWithDefaultVal);\n                  this.engine.derivative[index] = well;\n                }\n              } else {\n                delete this.engine.derivative[index];\n              }\n              hasWellUpdate = true;\n            }\n          }\n\n          if (hasWellUpdate) {\n            this._colorMixer();\n            this.decideSelectedFields();\n            this.derivativeChange();\n            this.addToUndoRedo();\n          }\n        } else {\n          alert(\"Please select any well\");\n        }\n      },\n\n      copyCriteria: function() {\n        if (this.selectedIndices && this.selectedIndices.length) {\n          let wells = this._getSelectedWells();\n          this.commonWell = this._getCommonWell(wells);\n        } else {\n          alert(\"Please select any well.\");\n        }\n      },\n\n      pasteCriteria: function() {\n        if (this.commonWell) {\n          this._addAllData(this.commonWell);\n          this.decideSelectedFields();\n        }\n      }\n    };\n  }\n})(jQuery);","$.widget(\"DNA.plateMap\", {\n\n  plateMapWidget: {},\n\n  options: {\n    value: 0\n  },\n\n  addressToLoc: function(address) {\n    let m = /^([A-Z]+)(\\d+)$/.exec(address.trim().toUpperCase());\n    if (m) {\n      let row_v = m[1];\n      let col = parseInt(m[2]) - 1;\n      let row = 0;\n      for (let i = 0; i < row_v.length; i++) {\n        let c = row_v.charCodeAt(i) - 65;\n        if (i) {\n          row += 1;\n          row *= 26;\n          row += c;\n        } else {\n          row = c;\n        }\n      }\n      return {\n        r: row,\n        c: col\n      };\n    } else {\n      throw address + \" not a proper plate address\";\n    }\n  },\n\n  locToIndex: function(loc, dimensions) {\n    if (!dimensions) {\n      dimensions = this.dimensions;\n    }\n    if (!(loc.r >= 0 && loc.r < dimensions.rows)) {\n      throw \"Row index \" + (loc.r + 1) + \" invalid\";\n    }\n    if (!(loc.c >= 0 && loc.c < dimensions.cols)) {\n      throw \"Column index \" + (loc.c + 1) + \" invalid\";\n    }\n    return loc.r * dimensions.cols + loc.c;\n  },\n\n  addressToIndex: function(address, dimensions) {\n    let loc = this.addressToLoc(address);\n    return this.locToIndex(loc, dimensions);\n  },\n\n  _rowKey: function(i) {\n    let c1 = i % 26;\n    let c2 = (i - c1) / 26;\n    let code = String.fromCharCode(65 + c1);\n    if (c2 > 0) {\n      code = String.fromCharCode(64 + c2) + code;\n    }\n    return code;\n  },\n\n  _colKey: function (i) {\n    return (i+1).toString(10);\n  },\n\n  indexToLoc: function(index, dimensions) {\n    if (!dimensions) {\n      dimensions = this.dimensions;\n    }\n\n    if (index >= dimensions.rows * dimensions.cols) {\n      throw \"Index too high: \" + index.toString(10);\n    }\n    let loc = {};\n    loc.c = index % dimensions.cols;\n    loc.r = (index - loc.c) / dimensions.cols;\n\n    return loc;\n  },\n\n  locToAddress: function(loc) {\n    return this._rowKey(loc.r) + this._colKey(loc.c);\n  },\n\n  indexToAddress: function(index, dimensions) {\n    let loc = this.indexToLoc(index, dimensions);\n    return this.locToAddress(loc);\n  },\n\n  getDimensions: function() {\n    return $.extend(true, {}, this.dimensions);\n  },\n\n  _create: function() {\n    let rows = parseInt(this.options.numRows || 8);\n    let cols = parseInt(this.options.numCols || 12);\n    this.dimensions = {\n      rows: rows,\n      cols: cols\n    };\n    this.rowIndex = [];\n    for (let i = 0; i < rows; i++) {\n      this.rowIndex.push(this._rowKey(i));\n    }\n\n    this.target = (this.element[0].id) ? \"#\" + this.element[0].id : \".\" + this.element[0].className;\n\n    // Import classes from other files.. Here we import it using extend and add it to this\n    // object. internally we add to widget.DNA.getPlates.prototype.\n    // Helpers are methods which return other methods and objects.\n    // add Objects to plateMapWidget and it will be added to this object.\n    // set read only well\n    if (this.options.readOnly) {\n      this.isReadOnly(true);\n    }\n\n    for (let component in plateMapWidget) {\n      if (plateMapWidget.hasOwnProperty(component)) {\n        // Incase some properties has to initialize with data from options hash,\n        // we provide it sending this object.\n        $.extend(this, new plateMapWidget[component](this));\n      }\n    }\n\n    this._createInterface();\n\n    this._trigger(\"created\", null, this);\n\n    return this;\n  },\n\n  _init: function() {\n    // This is invoked when the user use the plugin after _create is called.\n    // The point is _create is invoked for the very first time and for all other\n    // times _init is used.\n  },\n\n  // wellsData follows syntax: {A1:{field1: val1, field2: val2}, A2:{field1: val1, field2: val2}}\n  getTextDerivative: function(wellsData) {\n    let textDerivative = {};\n    let fieldMap = this.fieldMap;\n    for (let address in wellsData) {\n      if (!wellsData.hasOwnProperty(address)) {\n        continue;\n      }\n      let textValWell = {};\n      let textFieldIdWell = {};\n      let curWellData = wellsData[address];\n      for (let fieldId in curWellData) {\n        if (!curWellData.hasOwnProperty(fieldId)) {\n          continue;\n        }\n        if (fieldId in fieldMap) {\n          let field = fieldMap[fieldId];\n          let textVal = field.parseText(curWellData[fieldId]);\n          textFieldIdWell[field.name] = textVal;\n          textValWell[fieldId] = textVal;\n        } else {\n          // do not convert if not a field\n          textFieldIdWell[fieldId] = curWellData[fieldId];\n          textValWell[fieldId] = curWellData[fieldId];\n        }\n      }\n      textDerivative[address] = {\n        textVal: textValWell,\n        textFieldVal: textFieldIdWell\n      };\n    }\n\n    return textDerivative;\n  },\n\n  // wellsData follows syntax: {A1:{field1: val1, field2: val2}, A1:{field1: val1, field2: val2}}\n  getWellsDifferences: function(wellsHash) {\n    let wells = [];\n    for (let wellId in wellsHash) {\n      if (wellsHash.hasOwnProperty(wellId)) {\n        wells.push(wellsHash[wellId]);\n      }\n    }\n    let differentWellsVals = {};\n    if (wells.length > 1) {\n      let commonWell = this._getCommonWell(wells);\n      let allFieldVal = {};\n      for (let fieldIdx in wells[0]) {\n        if (wells[0].hasOwnProperty(fieldIdx)) {\n          allFieldVal[fieldIdx] = [];\n        }\n      }\n      for (let address in wellsHash) {\n        if (!wellsHash.hasOwnProperty(address)) {\n          continue;\n        }\n        let diffWellVal = {};\n        let curWellData = wellsHash[address];\n        for (let fieldId in curWellData) {\n          if (!curWellData.hasOwnProperty(fieldId)) {\n            continue;\n          }\n          let commonVal = commonWell[fieldId];\n          let curVal = curWellData[fieldId];\n          if (commonVal === undefined) {\n            commonVal = null;\n          }\n          if (curVal === undefined) {\n            curVal = null;\n          }\n          let newVal = null;\n          if (Array.isArray(curVal)) {\n            commonVal = commonVal || [];\n            // get uncommonVal\n            newVal = [];\n            for (let idx = 0; idx < curVal.length; idx++) {\n              let curMultiVal = curVal[idx];\n              // multiplex field\n              if (curMultiVal && typeof (curMultiVal) === \"object\") {\n                if (!this.containsObject(curMultiVal, commonVal)) {\n                  newVal.push(curMultiVal);\n                  if (!this.containsObject(curMultiVal, allFieldVal[fieldId])) {\n                    allFieldVal[fieldId].push(curMultiVal);\n                  }\n                }\n              } else {\n                if (commonVal.indexOf(curMultiVal) < 0) {\n                  newVal.push(curMultiVal);\n                  if (!allFieldVal[fieldId].indexOf(curMultiVal) >= 0) {\n                    allFieldVal[fieldId].push(curMultiVal);\n                  }\n                }\n              }\n            }\n          } else if (curVal && typeof (curVal) === \"object\") {\n            if (commonVal && typeof (commonVal) === \"object\") {\n              if (!((curVal.value === commonVal.value) || (curVal.unit === commonVal.unit))) {\n                newVal = curVal;\n                if (!this.containsObject(curVal, allFieldVal[fieldId])) {\n                  allFieldVal[fieldId].push(curVal);\n                }\n              }\n            } else {\n              newVal = curVal;\n              if (!this.containsObject(curVal, allFieldVal[fieldId])) {\n                allFieldVal[fieldId].push(curVal);\n              }\n            }\n          } else if (curVal !== commonVal) {\n            newVal = curVal;\n            if (!allFieldVal[fieldId].indexOf(curVal) >= 0) {\n              allFieldVal[fieldId].push(curVal);\n            }\n          }\n          diffWellVal[fieldId] = newVal;\n        }\n\n        differentWellsVals[address] = diffWellVal;\n      }\n\n      // clean up step for fields that are empty\n      for (let fieldId in allFieldVal) {\n        if (!allFieldVal.hasOwnProperty(fieldId)) {\n          continue;\n        }\n        if (allFieldVal[fieldId].length === 0) {\n          for (let address in differentWellsVals) {\n            if (!differentWellsVals.hasOwnProperty(address)) {\n              continue;\n            }\n            delete differentWellsVals[address][fieldId];\n          }\n        }\n      }\n\n      return differentWellsVals;\n    } else if (wells.length > 0) {\n      let differentWellsVals = {};\n      for (let address in wellsHash) {\n        if (!wellsHash.hasOwnProperty(address)) {\n          continue;\n        }\n        let diffWellVal = {};\n        let curWellData = wellsHash[address];\n        for (let fieldId in curWellData) {\n          if (!curWellData.hasOwnProperty(fieldId)) {\n            continue;\n          }\n          let curVal = curWellData[fieldId];\n          if (Array.isArray(curVal)) {\n            if (curVal.length > 0) {\n              diffWellVal[fieldId] = curVal\n            }\n          } else if (curVal) {\n            diffWellVal[fieldId] = curVal;\n          }\n        }\n        differentWellsVals[address] = diffWellVal;\n      }\n\n      return differentWellsVals;\n    }\n  },\n\n  setFieldsDisabled: function(flag) {\n    this.fieldList.forEach(function(field) {\n      field.disabled(flag);\n    });\n  },\n\n  isReadOnly: function(flag) {\n    this.readOnly = !!flag;\n    this.readOnlyHandler();\n  },\n\n  readOnlyHandler: function() {\n    if (this.readOnly) {\n      this.overLayButtonContainer.css(\"display\", \"none\");\n      $('.multiple-field-manage-delete-button').css(\"display\", \"none\");\n      this.setFieldsDisabled(true);\n    } else {\n      this.overLayButtonContainer.css(\"display\", \"flex\");\n      $('.multiple-field-manage-delete-button').css(\"display\", \"none\");\n      if (!this.disableAddDeleteWell) {\n        this.setFieldsDisabled(false);\n      }\n    }\n  },\n\n  disableAddDeleteWell: null,\n\n  // column_with_default_val will be used to determine empty wells, format: {field_name: default_val}\n  isDisableAddDeleteWell: function(flag, emptyDefaultWell) {\n    if (flag) {\n      let emptyWellWithDefaultVal = $.extend(true, {}, this.defaultWell);\n      if (emptyDefaultWell) {\n        for (let field in emptyDefaultWell) {\n          if (emptyDefaultWell.hasOwnProperty(field)) {\n            if (field in emptyWellWithDefaultVal) {\n              emptyWellWithDefaultVal[field] = emptyDefaultWell[field]\n            } else {\n              console.log(\"No field for key: \" + key + \", please contact support\");\n            }\n          }\n        }\n      }\n      this.disableAddDeleteWell = true;\n      this.addressAllowToEdit = this.getWellSetAddressWithData();\n      // configure undo redo action\n      this.actionPointer = 0;\n      this.undoRedoArray = [this.createState()];\n      this.emptyWellWithDefaultVal = emptyWellWithDefaultVal;\n    } else {\n      this.disableAddDeleteWell = false;\n      this.setFieldsDisabled(false);\n      this.emptyWellWithDefaultVal = null;\n    }\n  },\n\n  selectObjectInBottomTab: function() {\n    let colors = [];\n    let selectedIndices = this.selectedIndices;\n    for (let i = 0; i < selectedIndices.length; i++) {\n      let index = selectedIndices[i];\n      let well = this.engine.derivative[index];\n      if (well) {\n        let color = this.engine.colorMap.get(index);\n        if (colors.indexOf(color) < 0) {\n          colors.push(color);\n        }\n      }\n    }\n    let trs = document.querySelectorAll('table.plate-setup-bottom-table tr');\n    for (let i = 1; i < trs.length; i++) { // start at 1 to skip the table headers\n      let tr = trs[i];\n      let td = tr.children[0];\n      let isSelected = colors.indexOf(Number(td.querySelector('button').innerHTML)) >= 0;\n      tr.classList.toggle(\"selected\", isSelected);\n    }\n  },\n\n  getSelectedIndex: function() {\n    return this.selectedIndices;\n  },\n\n  getSelectedAddresses: function() {\n    return this.selectedIndices.map(function(index) {\n      return this.allTiles[index].address;\n    }, this);\n  },\n\n  setSelectedAddresses: function(addresses, noUndoRedo) {\n    let indices = this.sanitizeAddresses(addresses);\n    this.setSelectedIndices(indices, noUndoRedo);\n  },\n\n  setSelectedIndices: function (indices, noUndoRedo) {\n    if (!indices || indices.length === 0) {\n      indices = [0];\n    }\n    // Indices should be sanitized\n    this.setSelection(indices);\n    //this._colorMixer();\n    this.decideSelectedFields();\n    this._trigger(\"selectedWells\", null, {selectedAddress: this.getSelectedAddresses()});\n    this.selectObjectInBottomTab();\n    if (!noUndoRedo) {\n      this.addToUndoRedo();\n    }\n  }\n\n});\n","var plateMapWidget = plateMapWidget || {};\n\n(function($) {\n\n  plateMapWidget.preset = function() {\n    // All the preset action goes here\n    return {\n\n      presets: [],\n\n      _placePresetTabs: function() {\n        let presets = this.options.attributes.presets;\n\n        if (presets && presets.length) {\n          this.wellAttrContainer = this._createElement(\"<div></div>\").addClass(\"plate-setup-well-attr-container\")\n            .text(\"Checkbox presets\");\n          this.tabContainer.append(this.wellAttrContainer);\n\n          this.presetTabContainer = this._createElement(\"<div></div>\").addClass(\"plate-setup-preset-container\");\n          this.tabContainer.append(this.presetTabContainer);\n\n          for (let i = 0; i < presets.length; i++) {\n            let preset = presets[i];\n            let divText = this._createElement(\"<div></div>\").addClass(\"plate-setup-preset-tab-div\")\n              .text(preset.title);\n\n            let presetButton = this._createElement(\"<div></div>\").addClass(\"plate-setup-preset-tab\")\n              .data(\"preset\", preset.fields).append(divText);\n            this.presetTabContainer.append(presetButton);\n\n            let that = this;\n            presetButton.click(function() {\n              let preset = $(this);\n              that._selectPreset(preset);\n            });\n            this.presets.push(presetButton);\n          }\n        }\n      },\n\n      _clearPresetSelection: function() {\n        for (let j = 0; j < this.presets.length; j++) {\n          let p = this.presets[j];\n          p.removeClass(\"plate-setup-preset-tab-selected\")\n            .addClass(\"plate-setup-preset-tab\");\n        }\n      },\n\n      _selectPreset: function(preset) {\n        this.setCheckboxes(preset.data(\"preset\"));\n        preset.removeClass(\"plate-setup-preset-tab\")\n          .addClass(\"plate-setup-preset-tab-selected\");\n      },\n    };\n  }\n})(jQuery);","var plateMapWidget = plateMapWidget || {};\n\n(function(SVG) {\n\n  plateMapWidget.svgCreate = function() {\n    //\n    return {\n\n      baseSizes: {\n        spacing: 48,\n        tile_radius: 22,\n        center_radius_complete: 10,\n        center_radius_incomplete: 14,\n        label_size: 14,\n        label_spacing: 24,\n        text_size: 13,\n        stroke: 0.5,\n        gap: 2\n      },\n\n      allTiles: [],\n\n      _createSvg: function() {\n        this.svg = new SVG(this.canvasContainer[0]).addClass();\n        let ls = this.baseSizes.label_spacing;\n\n        this.svg.viewbox(-ls, -ls, ls + this.dimensions.cols * this.baseSizes.spacing, ls + this.dimensions.rows * this.baseSizes.spacing);\n\n        this.wellShadow = this.svg.gradient('radial', function (stop) {\n          stop.at(0.8, 'rgba(0,0,0,0.1)');\n          stop.at(1, 'rgba(0,0,0,0.2)');\n        }).from(\"50%\", \"50%\").to(\"50%\", \"55%\").radius(\"50%\").attr('id', 'wellShadow');\n\n        this.wellColors = this.colorPairs.map(function (pair, i) {\n            return this.svg.gradient('linear', function (stop) {\n                stop.at(0, pair[0]);\n                stop.at(1, pair[1]);\n            }).from(0, 0).to(0, 1).id('wellColor' + i.toString());\n        }, this);\n\n        this._fixRowAndColumn();\n        this._putCircles();\n        this._svgEvents();\n      },\n\n      _fixRowAndColumn: function () {\n        let cols = this.dimensions.cols;\n        let rows = this.dimensions.rows;\n\n        let rh = this.svg.nested().attr({'x': -this.baseSizes.label_spacing / 2.0}).addClass('rowHead');\n        let ch = this.svg.nested().attr({'y': -this.baseSizes.label_spacing / 2.0}).addClass('colHead');\n\n        for (let i = 0; i < rows; i++) {\n          rh.plain(this._rowKey(i)).attr({y: this.baseSizes.spacing * (i + 0.5)});\n        }\n        for (let i = 0; i < cols; i++) {\n          ch.plain(this._colKey(i)).attr({x: this.baseSizes.spacing * (i + 0.5)});\n        }\n      },\n\n      _putCircles: function () {\n        let cols = this.dimensions.cols;\n        let rows = this.dimensions.rows;\n        this.allTiles = Array(cols * rows);\n\n        for (let row = 0; row < rows; row++) {\n          for (let col = 0; col < cols; col++) {\n            let tile = this._createTile(row, col);\n            this.allTiles[tile.index] = tile;\n          }\n        }\n      },\n\n      _createTile: function (r, c) {\n        let g = this.svg.nested().move(this.baseSizes.spacing * c, this.baseSizes.spacing * r).addClass('tile');\n        let m = this.baseSizes.spacing / 2.0;\n\n        let d = {\"tile\": g};\n        d.r = r;\n        d.c = c;\n        d.index = this.locToIndex(d);\n        d.address = this.locToAddress(d);\n\n        g.rect(this.baseSizes.spacing, this.baseSizes.spacing).addClass('highlight');\n        g.circle(this.baseSizes.tile_radius * 2).center(m, m).addClass('well').fill(this.wellShadow);\n\n        let tf = g.group().addClass('fill');\n        d[\"circle\"] = tf.circle(this.baseSizes.tile_radius * 2).center(m, m).addClass('circle').fill(this.wellColors[0]);\n        tf.circle(this.baseSizes.center_radius_complete * 2).center(m, m).addClass('center');\n        tf.circle(this.baseSizes.center_radius_incomplete * 2).center(m, m).addClass('center_incomplete');\n        d[\"label\"] = tf.plain(\"0\").attr({x: m, y: m}).addClass('label');\n\n        return d;\n      },\n\n      setTileComplete: function (tile, complete) {\n        if (complete) {\n          tile.tile.removeClass('incomplete');\n        } else {\n          tile.tile.addClass('incomplete');\n        }\n      },\n\n      setTileVisible: function (tile, visible) {\n        if (visible) {\n          tile.tile.removeClass('empty');\n        } else {\n          tile.tile.addClass('empty');\n        }\n      },\n\n      setTileColor: function (tile, color) {\n        this.setTileVisible(tile, true);\n        tile.colorIndex = parseInt(color);\n        tile.label.plain(String(tile.colorIndex));\n\n        if (color > 0) {\n          color = ((color - 1) % (this.wellColors.length - 1)) + 1;\n        }\n\n        tile.circle.fill(this.wellColors[color])\n      }\n    };\n  }\n})(SVG);","var plateMapWidget = plateMapWidget || {};\n\n(function($) {\n\n  plateMapWidget.svgEvents = function() {\n    // This object contains Menu items and how it works;\n    return {\n      colorToIndex: {},\n      selectedIndices: [],\n\n      _svgEvents: function() {\n        // Set up event handling.\n        let that = this;\n\n        function getMousePosition(evt) {\n          let CTM = that.svg.node.getScreenCTM();\n          return {\n            x: (evt.clientX - CTM.e) / CTM.a,\n            y: (evt.clientY - CTM.f) / CTM.d\n          };\n        }\n\n        function dimCoord(v, max) {\n          max = max - 1;\n          if (v < 0) {\n            return 0;\n          } else if (v >= max) {\n            return max;\n          } else {\n            return Math.trunc(v);\n          }\n        }\n\n        function posToLoc(pos) {\n          let s = that.baseSizes.spacing;\n          let c = dimCoord(pos.x / s, that.dimensions.cols);\n          let r = dimCoord(pos.y / s, that.dimensions.rows);\n          return {r: r, c: c}\n        }\n\n        function selectionBoxPosition(pos0, pos1) {\n          let d0 = posToLoc(pos0);\n          let d1 = posToLoc(pos1);\n          let s = that.baseSizes.spacing;\n\n          let x0 = Math.min(d0.c, d1.c) * s;\n          let y0 = Math.min(d0.r, d1.r) * s;\n\n          if (pos0.x < 0) {\n            d0.c = that.dimensions.cols - 1;\n          }\n          if (pos0.y < 0) {\n            d0.r = that.dimensions.rows - 1;\n          }\n\n          let x1 = (Math.max(d0.c, d1.c) + 1) * s;\n          let y1 = (Math.max(d0.r, d1.r) + 1) * s;\n\n          return {\n            x: x0,\n            y: y0,\n            width: x1 - x0,\n            height: y1 - y0,\n          };\n        }\n\n        function selectTiles(pos0, pos1, secondary) {\n          let d0 = posToLoc(pos0);\n          let d1 = posToLoc(pos1);\n          let extending = true;\n          if (secondary) {\n            // if d0 is already selected, we are deselecting\n            let startIdx = that.locToIndex(d0);\n            extending = that.selectedIndices.indexOf(startIdx) < 0;\n          }\n          let c0 = Math.min(d0.c, d1.c);\n          let r0 = Math.min(d0.r, d1.r);\n\n          if (pos0.x < 0) {\n            d0.c = that.dimensions.cols - 1;\n          }\n          if (pos0.y < 0) {\n            d0.r = that.dimensions.rows - 1;\n          }\n\n          let c1 = Math.max(d0.c, d1.c);\n          let r1 = Math.max(d0.r, d1.r);\n\n          let indices = [];\n\n          for (let r = r0; r <= r1; r++) {\n            for (let c = c0; c <= c1; c++) {\n              let index = that.locToIndex({'r': r, 'c': c});\n              indices.push(index)\n            }\n          }\n          if (secondary) {\n            if (extending) {\n              that.selectedIndices.forEach(function (index) {\n                if (indices.indexOf(index) < 0) {\n                  indices.push(index);\n                }\n              });\n            } else {\n              indices = that.selectedIndices.filter(index => indices.indexOf(index) < 0);\n            }\n          }\n\n          that.setSelectedIndices(indices.sort());\n        }\n\n        let selectionBox;\n\n        function startDrag(evt) {\n          if (selectionBox) {\n            selectionBox.remove();\n          }\n          let pos = getMousePosition(evt);\n          let attrs = selectionBoxPosition(pos, pos);\n          selectionBox = that.svg.rect().attr(attrs).fill('rgba(0, 0, 1, 0.2)');\n          selectionBox.data('origin', pos);\n        }\n\n        function drag(evt) {\n          if (selectionBox) {\n            let pos = getMousePosition(evt);\n            let attrs = selectionBoxPosition(selectionBox.data('origin'), pos);\n            selectionBox.attr(attrs);\n          }\n        }\n\n        function endDrag(evt) {\n          if (selectionBox) {\n            let startPos = selectionBox.data('origin');\n            let pos = getMousePosition(evt);\n            selectTiles(startPos, pos, evt.shiftKey);\n            selectionBox.remove();\n            selectionBox = null;\n          }\n        }\n\n        this.svg.node.addEventListener('mousedown', startDrag);\n        this.svg.node.addEventListener('mousemove', drag);\n        this.svg.node.addEventListener('mouseleave', endDrag);\n        this.svg.node.addEventListener('mouseup', endDrag);\n\n        $(that.target).on(\"loadPlate\", function(evt, data) {\n          // This method should be compatible to redo/undo.\n          that.loadPlate(JSON.parse(data));\n        });\n      },\n\n      setSelection: function(selectedIndices) {\n        this.selectedIndices = selectedIndices;\n        this._setSelectedTiles();\n        document.activeElement.blur();\n      },\n\n      _setSelectedTiles: function() {\n        // Update selected tile display only\n        let selectedIndices = this.selectedIndices;\n        this.allTiles.forEach(function(tile) {\n          let selected = selectedIndices.indexOf(tile.index) >= 0;\n          if (selected) {\n            tile.tile.addClass('selected');\n          } else {\n            tile.tile.removeClass('selected');\n          }\n        })\n      },\n\n      _getSelectedWells: function() {\n        return this.selectedIndices.map(function(index) {\n          let well = this.engine.derivative[index];\n          if (!well) {\n            well = this.defaultWell;\n          }\n          return well;\n        }, this);\n      },\n\n      containsObject: function(obj, list) {\n        function deepEqual (x, y) {\n          if (x === y) {\n            return true;\n          } else if ((typeof x == \"object\" && x != null) && (typeof y == \"object\" && y != null)) {\n            if (Object.keys(x).length !== Object.keys(y).length) {\n              return false;\n            }\n            for (let prop in x) {\n              if (x.hasOwnProperty(prop)) {\n                if (y.hasOwnProperty(prop)) {\n                  if (!deepEqual(x[prop], y[prop])) {\n                    return false;\n                  }\n                } else {\n                  return false;\n                }\n              }\n            }\n            return true;\n          } else {\n            return false;\n          }\n        }\n\n        if (list) {\n          for (let i = 0; i < list.length; i++) {\n            if (deepEqual(obj, list[i])) {\n              return true;\n            }\n          }\n        }\n        return false;\n      },\n\n      _getCommonWell: function(wells) {\n        if (wells.length) {\n          let commonWell = $.extend(true, {}, wells[0]);\n          for (let i = 1; i < wells.length; i++) {\n            let well = wells[i];\n            for (let field in commonWell) {\n              if (!commonWell.hasOwnProperty(field)) {\n                continue;\n              }\n              let commonVal = commonWell[field];\n              if (commonVal === undefined) {\n                commonVal = null;\n              }\n              let wellVal = well[field];\n              if (wellVal === undefined) {\n                wellVal = null;\n              }\n              if (Array.isArray(commonVal)) {\n                let agrArr = [];\n                for (let i = 0; i < commonVal.length; i++) {\n                  let v = commonVal[i];\n                  // for multiplex field\n                  if (v && typeof (v) === \"object\") {\n                    if (this.containsObject(v, wellVal)) {\n                      agrArr.push(v);\n                    }\n                  } else {\n                    if ($.inArray(v, wellVal) >= 0) {\n                      agrArr.push(v);\n                    }\n                  }\n                }\n                commonVal = agrArr;\n              } else {\n                if (wellVal && typeof (wellVal) === \"object\" && commonVal && typeof (commonVal) === \"object\") {\n                  if ((wellVal.value !== commonVal.value) || (wellVal.unit !== commonVal.unit)) {\n                    delete commonWell[field];\n                  }\n                } else if (commonVal !== wellVal) {\n                  delete commonWell[field];\n                }\n              }\n            }\n          }\n          return commonWell;\n        } else {\n          return this.defaultWell;\n        }\n      },\n\n      _getAllMultipleVal: function(wells) {\n        let multipleFieldList = this.multipleFieldList;\n\n        multipleFieldList.forEach(function(multiplexField) {\n          if (wells.length) {\n            let curMultipleVal = {};\n            wells.forEach(function(wellData) {\n              let id = multiplexField.id;\n              if (wellData[id]) {\n                if (wellData[id].length > 0) {\n                  wellData[id].forEach(function(multipleVal) {\n                    if (typeof (multipleVal) === 'object') {\n                      if (multipleVal[id] in curMultipleVal) {\n                        curMultipleVal[multipleVal[id]]++;\n                      } else {\n                        curMultipleVal[multipleVal[id]] = 1;\n                      }\n                    } else {\n                      if (multipleVal in curMultipleVal) {\n                        curMultipleVal[multipleVal]++;\n\n                      } else {\n                        curMultipleVal[multipleVal] = 1;\n                      }\n                    }\n                  })\n                }\n              }\n            });\n            multiplexField.allSelectedMultipleVal = curMultipleVal;\n          } else {\n            multiplexField.allSelectedMultipleVal = null\n          }\n        });\n      },\n\n      decideSelectedFields: function() {\n        let wells = this._getSelectedWells();\n        this._getAllMultipleVal(wells);\n        this.applyFieldWarning(wells);\n        let well = this._getCommonWell(wells);\n        this._addDataToTabFields(well);\n      },\n\n      // get all wells that have data\n      getWellSetAddressWithData: function() {\n        let indices = Object.keys(this.engine.derivative).map(Number).sort();\n        return indices.map(this.indexToAddress, this)\n      }\n\n    };\n  }\n})(jQuery);","var plateMapWidget = plateMapWidget || {};\n\n(function($) {\n\n  plateMapWidget.tabs = function() {\n    // Tabs create and manage tabs at the right side of widget.\n    return {\n\n      allTabs: [],\n\n      defaultWell: {},\n\n      allDataTabs: [], // To hold all the tab contents. this contains all the tabs and its elements and elements\n      // Settings as a whole. its very usefull, when we have units for a specific field.\n      // it goes like tabs-> individual field-> units and checkbox\n\n      _createTabAtRight: function() {\n        this.tabContainer = this._createElement(\"<div></div>\").addClass(\"plate-setup-tab-container\");\n        $(this.topRight).append(this.tabContainer);\n      },\n\n      _createTabs: function() {\n        // this could be done using z-index. just imagine few cards stacked up.\n        // Check if options has tab data.\n        // Originally we will be pulling tab data from developer.\n        // Now we are building upon dummy data.\n        this.tabHead = this._createElement(\"<div></div>\").addClass(\"plate-setup-tab-head\");\n        $(this.tabContainer).append(this.tabHead);\n\n        let tabData = this.options.attributes.tabs;\n        let that = this;\n\n        tabData.forEach(function(tab, tabIndex) {\n          that.allTabs[tabIndex] = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab\");\n          $(that.allTabs[tabIndex]).data(\"index\", tabIndex)\n            .text(tab.name);\n\n          $(that.allTabs[tabIndex]).click(function() {\n            that._tabClickHandler(this);\n          });\n\n          $(that.tabHead).append(that.allTabs[tabIndex]);\n        });\n\n        this.tabDataContainer = this._createElement(\"<div></div>\").addClass(\"plate-setup-tab-data-container\");\n        $(this.tabContainer).append(this.tabDataContainer);\n\n        this._addDataTabs(tabData);\n\n        $(this.allTabs[0]).click();\n\n        this._addTabData();\n      },\n\n      _tabClickHandler: function(clickedTab) {\n\n        if (this.selectedTab) {\n          $(this.selectedTab).removeClass(\"plate-setup-tab-selected\")\n            .addClass(\"plate-setup-tab\");\n\n          let previouslyClickedTabIndex = $(this.selectedTab).data(\"index\");\n          $(this.allDataTabs[previouslyClickedTabIndex]).css(\"z-index\", 0);\n          this.readOnlyHandler();\n        }\n\n        $(clickedTab).addClass(\"plate-setup-tab-selected\");\n\n        this.selectedTab = clickedTab;\n\n        let clickedTabIndex = $(clickedTab).data(\"index\");\n        $(this.allDataTabs[clickedTabIndex]).css(\"z-index\", 1000);\n      },\n\n      _addDataTabs: function(tabs) {\n        this.allDataTabs = tabs.map(function () {\n          return this._createElement(\"<div></div>\").addClass(\"plate-setup-data-div\").css(\"z-index\", 0);\n        }, this);\n        $(this.tabContainer).append(this.allDataTabs);\n      }\n    };\n  }\n})(jQuery);","var plateMapWidget = plateMapWidget || {};\n\n(function($) {\n\n  plateMapWidget.undoRedoManager = function() {\n\n    return {\n\n      undoRedoArray: [],\n\n      actionPointer: null,\n\n      addToUndoRedo: function() {\n        var state = this.createState();\n        if (this.actionPointer != null) {\n          var i = this.actionPointer + 1;\n          if (i < this.undoRedoArray.length) {\n            this.undoRedoArray.splice(i, this.undoRedoArray.length - i);\n          }\n        }\n        this.actionPointer = null;\n        this.undoRedoArray.push(state);\n      },\n\n      _configureUndoRedoArray: function() {\n\n        var data = {\n          checkboxes: [],\n          derivative: {},\n          selectedIndices: [0]\n        };\n\n        this.undoRedoArray = [];\n        this.actionPointer = null;\n        this.undoRedoArray.push($.extend({}, data));\n      },\n\n      clearHistory: function () {\n        this.undoRedoArray = this.undoRedoArray.slice(-1);\n        this.actionPointer = null;\n      },\n\n      undo: function() {\n        console.log(\"undo\");\n        return this.shiftUndoRedo(-1);\n      },\n\n      redo: function() {\n        console.log(\"redo\");\n        return this.shiftUndoRedo(1);\n      },\n\n      shiftUndoRedo: function(pointerDiff) {\n        var pointer = this.actionPointer;\n        if (pointer == null) {\n          pointer = this.undoRedoArray.length - 1;\n        }\n        pointer += pointerDiff;\n        return this.setUndoRedo(pointer);\n      },\n\n      setUndoRedo: function(pointer) {\n        if (pointer < 0) {\n          return false;\n        }\n        if (pointer >= this.undoRedoArray.length) {\n          return false;\n        }\n        this.actionPointer = pointer;\n        this.setData(this.undoRedoArray[pointer], true);\n        return true;\n      }\n    }\n  };\n\n})(jQuery);"]}