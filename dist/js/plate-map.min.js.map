{"version":3,"sources":["add-data-on-change.js","add-data-to-tabs.js","add-tab-data.js","add-warning-msg.js","bottom-table.js","canvas.js","check-box.js","color-manager.js","create-canvas-elements.js","create-field.js","engine.js","fabric-events.js","image_assets.js","interface.js","load-plate.js","main.js","overlay.js","plate-layout.js","preset.js","tabs.js","undo-redo-manager.js","well-area.js"],"names":["plateLayOutWidget","$","fabric","addDataOnChange","_addAllData","data","this","allSelectedObjects","noOfSelectedObjects","length","wells","objectIndex","well","tile","index","engine","derivative","extend","defaultWell","processedData","processWellData","wellEmpty","emptyWellWithDefaultVal","disableAddDeleteWell","wellCopy","JSON","parse","stringify","defaultValue","key","_applyFieldData","_getAllMultipleVal","applyFieldWarning","_colorMixer","derivativeChange","newData","curWell","wellList","id","v","undefined","multi","curData","preData","newDt","_getMultiData","push","fieldId","addNew","added","removed","value","add","listIdx","toString","map","val","subFieldId","indexOf","removeIndex","removeListIndex","newPreData","idx","parseInt","undoRedoActive","createObject","addToUndoRedo","searchAndStack","applyColors","mainFabricCanvas","renderAll","_trigger","checkboxes","globalSelectedAttributes","slice","selectedAreas","focalWell","requiredField","jQuery","addDataToFields","_addDataToTabFields","values","fieldMap","setValue","addTabData","fieldList","autoId","_addTabData","tabData","options","attributes","tabs","that","multiplexFieldArray","forEach","tab","tabPointer","tabFields","fieldArray","field","field_val","console","log","type","_makeMultiplexField","_makeRegularField","allDataTabs","multipleFieldList","_makeSubField","wrapperDiv","_createElement","addClass","wrapperDivLeftSide","wrapperDivRightSide","nameContainer","text","name","fieldContainer","append","root","required","checkbox","_addCheckBox","_createField","onChange","getValue","subFieldList","requiredSubField","subFieldKey","multiplexFields","subFieldData","subField","multiplexId","subFields","subfield","mainMultiplexField","mainRefField","curId","singleSelectValue","curVal","returnVal","_changeMultiFieldValue","curDataLs","detailData","addWarningMsg","fieldWarningMsg","include","imgId","img","html","_assets","warningImg","attr","find","prepend","popText","hover","e","style","display","hide","remove","removeWarningMsg","fieldData","i","applyMultiplexSubFieldColor","Array","bottomTable","_bottomScreen","bottomContainer","bottomTableContainer","container","addBottomTableHeadings","bottomRow","singleField","empty","rowCounter","adjustFieldWidth","tileAttrText","getText","addBottomTableRow","color","singleStack","modelTile","allTiles","row","plateIdDiv","numberText","click","evt","addressToSelect","addressIdx","indexToAddress","ctrlKey","getSelectedAddress","setSelectedWell","selectedAddress","colorPairs","colorStops","css","dataDiv","bottomForFirstTime","createExportButton","downloadCSV","csv","filename","csvFile","downloadLink","Blob","document","createElement","download","href","window","URL","createObjectURL","body","appendChild","exportData","format","rows","querySelectorAll","colorLocMap","colorLocIdxMap","stackUpWithColor","dim","getDimensions","colorIdx","locIdx","cols","j","innerText","replace","loc","join","overlayContainer","descriptionDiv","buttonContainer","exportButton","resetExportText","classList","setTimeout","clipboardButton","clipboard","ClipboardJS","get","resetClipboardText","on","canvas","allPreviouslySelectedObjects","colorPointer","goldenRatio","_createCanvas","normalCanvas","canvasContainer","_initiateFabricCanvas","w","width","h","height","_setCanvasArea","Canvas","backgroundColor","selection","stateful","hoverCursor","renderOnAddRemove","setWidth","setHeight","checkBox","checkImage","dontImg","_applyCheckboxHandler","checkBoxImage","machineClick","changes","changeCheckboxes","changeSubFieldsCheckboxes","subFieldToInclude","clicked","Boolean","doImg","gsa","multiplexCheckedSubField","globalSelectedMultiplexSubfield","_clearPresetSelection","setSubFieldCheckboxes","fieldIds","setCheckboxes","colorManager","createCanvasElements","scaleFactor","baseSizes","spacing","tile_radius","center_radius_complete","center_radius_incomplete","label_size","label_spacing","text_size","stroke","gap","Math","min","dimensions","sizes","prop","_canvas","_fixRowAndColumn","_putCircles","d1","d2","fontSize","top","left","tempFabricText","IText","fill","originX","originY","fontFamily","selectable","fontWeight","rowIndex","tileCounter","col","_createTile","background","highlight","circle","circleCenter","circleText","_addLargeRectangleOverlay","_fabricEvents","visible","colorIndex","address","Circle","radius","hasControls","hasBorders","lockMovementX","lockMovementY","evented","setGradient","x1","x2","y1","y2","r1","r2","0","1","Rect","strokeWidth","lockScalingX","lockScalingY","setTileComplete","complete","setTileVisible","setTileColor","String","overLay","opacity","createField","_createTextField","_createNumericField","_createSelectField","_createMultiSelectField","_createBooleanField","_createMultiplexField","input","parseValue","trim","disabled","bool","parseText","generated","_createOpts","config","opts","allowClear","placeholder","minimumResultsForSearch","data_specified","ajax","optMap","opt","select2","trigger","one","preventDefault","multiple","_parseOne","_parseMany","vals","multiOnChange","params","_createDeleteButton","units","defaultUnit","unitInput","hasUnits","unitText","selected","unit","setUnitOpts","newUnits","curUnit","cleanUnit","newOpts","isPlainObject","parseRegularValue","parseUnit","getRegularValue","isNaN","getUnit","hasMultiplexUnit","unitTypeKey","unitMap","setUnit","setRegularValue","Number","toLowerCase","u","getRegularText","textVal","removeClass","nameContainer1","fieldContainer1","singleSelect","appendTo","multiselectSetValue","setSingleSelectOptions","selected_v","hasClass","singleSelectChange","updateSubFieldUnitOpts","curSubField","readOnlyHandler","newSubFieldValue","subFieldName","multiselectValues","newOptions","valMap","curOpts","hasOwnProperty","unitOptions","curIds","curOpt","newMultiplexVal","selectList","selectedVal","newVal","selectVal","checkedSubfields","valIdx","subV","subText","optId","x","checkMultiplexCompletion","valList","valCount","completionPct","getSubfieldStatus","req","subFieldWarningMap","warningStatus","multiplexVals","multiplexIdx","updateSubFieldWarningMap","mainFieldStatus","warningText","mainFieldWarning","parseMainFieldVal","_deleteDialog","valToRemove","allSelectedMultipleVal","Object","keys","dialogDiv","killDialog","dialogContent","tableArea","buttonRow","table","_deleteDialogTable","readOnly","deleteCheckedButton","each","decideSelectedFields","cancelButton","show","onclick","event","target","colName","thead","tbody","tr","deleteButton","THIS","colorMap","Map","stackPointer","isArray","derivativeJson","wellData","selectedSubFields","curMultiplexVals","isEmptyObject","k","parseFloat","sort","a","b","refDerivativeIndex","referenceDerivative","arr","wholeNoTiles","wholePercentage","tileIndex","set","completion","checkCompletion","floor","overLayTextContainer","multiplexStatus","fabricEvents","colorToIndex","startCoords","y","_clickCoords","rect","getBoundingClientRect","clientX","clientY","getPlates","selecting","coords","areas","_wellToCoords","_coordsToRect","_coordsToWell","shiftKey","_rectToArea","setSelection","endCoords","area","scrollToGroup","selectObjectInBottomTab","_areasToTiles","_setSelectedTiles","_setFocalWellRect","activeElement","blur","flag","locToAddress","r","c","addressAllowToEdit","setFieldsDisabled","_areaToRect","_wellToArea","focalWellRect","selectedTiles","_getSelectedWells","_getCommonFields","referenceWell","referenceFields","fields","refArr","agrArr","containsObject","inArray","obj","list","equality","evaluate","listKey","_getCommonWell","multiplexField","curMultipleVal","multipleVal","getDifferentWellsVals","wellsHash","wellId","differentWellsVals","commonWell","allFieldVal","fieldIdx","wellIdx","diffWellVal","curWellData","commonVal","curMultiVal","getWellSetAddressWithData","assets","interface","_createInterface","divIdentifier","topSection","topLeft","topRight","overLayContainer","_createOverLay","element","_createTabAtRight","_createTabs","_placePresetTabs","_setShortcuts","keyup","_handleShortcuts","_configureUndoRedoArray","addEventListener","copyCriteria","clearCriteria","pasteCriteria","keyCode","metaKey","redo","undo","loadPlate","sanitizeWell","sanitizeAreas","sanitized","setData","minCol","_coordIndex","maxCol","minRow","maxRow","max","_wellInArea","newWell","GET_PLATES","IS_READ_ONLY","IS_DISABLE_ADD_DELETE_WELL","GET_SELECTED_OBJECT","SETSELECTEDWELL","scrollTo","to","duration","perTick","scrollTop","overlay","overLayButtonContainer","clearCriteriaButton","copyCriteriaButton","pasteCriteriaButton","undoButton","redoButton","hasWellUpdate","alert","widget","addressToLoc","layoutAddress","m","exec","toUpperCase","row_v","charCodeAt","locToIndex","t","addressToIndex","_rowKey","c1","c2","code","fromCharCode","indexToLoc","_create","numRows","numCols","component","className","isReadOnly","_init","addData","getTextDerivative","wellsData","textDerivative","textValWell","textFieldIdWell","textFieldVal","getWellsDifferences","isDisableAddDeleteWell","column_with_default_val","actionPointer","undoRedoArray","getSelectedObject","selectedObjects","selectedObjectAddress","trs","tds","children","isSelected","querySelector","innerHTML","offsetTop","getSelectedIndex","selectedObj","addressList","locMap","apply","preset","me","presets","wellAttrContainer","tabContainer","presetTabContainer","divText","title","presetButton","_selectPreset","allTabs","tabHead","tabIndex","_tabClickHandler","tabDataContainer","_addDataTabs","clickedTab","selectedTab","previouslyClickedTabIndex","clickedTabIndex","undoRedoManager","splice","shiftUndoRedo","pointerDiff","pointer","setUndoRedo","wellArea","reduce","tiles","_encodeArea","_encodeAreas","_decodeWell","wellAddress","match","adRx","RegExp","_decodeArea","areaAddress","split","_decodeAreas","areasAddress","abs","count","coord","center","hw","right","bottom"],"mappings":"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","file":"plate-map.min.js","sourcesContent":["var plateLayOutWidget = plateLayOutWidget || {};\n\n(function($, fabric) {\n\n  plateLayOutWidget.addDataOnChange = function() {\n    // This object is invoked when something in the tab fields change\n    return {\n\n      _addAllData: function(data) {\n        // Method to add data when something changes in the tabs. Its going to be tricky , just starting.\n        if (this.allSelectedObjects) {\n          var noOfSelectedObjects = this.allSelectedObjects.length;\n          var wells = [];\n          for (var objectIndex = 0; objectIndex < noOfSelectedObjects; objectIndex++) {\n            var tile = this.allSelectedObjects[objectIndex];\n            var well;\n            if (tile.index in this.engine.derivative) {\n              well = this.engine.derivative[tile.index];\n            } else {\n              well = $.extend(true, {}, this.defaultWell);\n              this.engine.derivative[tile.index] = well;\n            }\n            var processedData = this.processWellData(data, well, noOfSelectedObjects, wells);\n            wells = processedData.wells;\n            well = processedData.well;\n            var empty = this.engine.wellEmpty(well);\n            if (empty) {\n              if (this.emptyWellWithDefaultVal && this.disableAddDeleteWell) {\n                var wellCopy = JSON.parse(JSON.stringify(well));\n                var defaultValue = this.emptyWellWithDefaultVal;\n                for (var key in defaultValue) {\n                  if (key in wellCopy) {\n                    wellCopy[key] = defaultValue[key];\n                    this._applyFieldData(key, defaultValue[key]);\n                  }\n                }\n                this.engine.derivative[tile.index] = wellCopy;\n              } else {\n                delete this.engine.derivative[tile.index];\n              }\n            }\n          }\n        }\n        // update multiplex remove all field\n        this._getAllMultipleVal(wells);\n        this.applyFieldWarning(wells);\n        // create well when default field is sent for the cases when user delete all fields during disabledNewDeleteWell mode\n        this._colorMixer();\n        this.derivativeChange();\n      },\n\n      processWellData: function(newData, curWell, noOfSelectedObjects, wellList) {\n\n        if (!wellList) {\n          wellList = [];\n        }\n        for (var id in newData) {\n          var v;\n          if (newData[id] !== undefined && newData[id] !== null) {\n            if (newData[id].multi) {\n              var curData = newData[id];\n              var preData = curWell[id];\n              var newDt = this._getMultiData(preData, curData, id, noOfSelectedObjects);\n              // need to replace newData\n              v = JSON.parse(JSON.stringify(newDt));\n            } else {\n              v = JSON.parse(JSON.stringify(newData[id]));\n            }\n          } else {\n            v = JSON.parse(JSON.stringify(newData[id]));\n          }\n          curWell[id] = v;\n          wellList.push(curWell);\n        }\n\n        return {\n          well: curWell,\n          wells: wellList\n        }\n      },\n\n      _getMultiData: function(preData, curData, fieldId, noOfSelectedObjects) {\n        var addNew = curData.added;\n        var removed = curData.removed;\n        if (addNew) {\n          if (preData) {\n            if (addNew.value) {\n              var add = true;\n              for (var listIdx in preData) {\n                var multiplexData = preData[listIdx];\n                // for cases when the add new data exist in well\n                if (multiplexData[fieldId].toString() === addNew.id.toString()) {\n                  add = false;\n                  // update subfield value\n                  preData = preData.map(function(val) {\n                    if (val[fieldId].toString() === addNew.id.toString()) {\n                      for (var subFieldId in val) {\n                        // over write previous data if only one well is selected\n                        if (subFieldId in addNew.value && subFieldId !== fieldId) {\n                          if (noOfSelectedObjects === 1) {\n                            val[subFieldId] = addNew.value[subFieldId];\n                          } else if (addNew.value[subFieldId]) {\n                            val[subFieldId] = addNew.value[subFieldId];\n                          }\n                        }\n                      }\n                    }\n                    return val;\n                  })\n                }\n              }\n              if (add) {\n                preData.push(addNew.value);\n              }\n            } else if (preData.indexOf(addNew) < 0) {\n              preData.push(addNew);\n            }\n          } else {\n            preData = [];\n            if (addNew.value) {\n              preData.push(addNew.value);\n            } else if (addNew) {\n              preData.push(addNew);\n            }\n          }\n        }\n\n        var removeListIndex = function(preData, removeIndex) {\n          var newPreData = [];\n          for (var idx in preData) {\n            if (parseInt(idx) !== parseInt(removeIndex)) {\n              newPreData.push(preData[idx]);\n            }\n          }\n          return newPreData;\n        };\n\n        if (removed) {\n          var removeIndex;\n          // for multiplex field\n          if (removed.value) {\n            for (var listIdx in preData) {\n              var multiplexData = preData[listIdx];\n              if (multiplexData[fieldId].toString() === removed.id.toString()) {\n                removeIndex = listIdx;\n              }\n            }\n            // remove nested element\n            preData = removeListIndex(preData, removeIndex);\n          } else {\n            if (preData) {\n              removeIndex = preData.indexOf(removed);\n              if (removeIndex >= 0) {\n                preData = removeListIndex(preData, removeIndex);\n              }\n            }\n          }\n        }\n        if (preData && (preData.length == 0)) {\n          preData = null;\n        }\n        return preData\n      },\n\n      _colorMixer: function() {\n        if (!this.undoRedoActive) {\n          var data = this.createObject();\n          this.addToUndoRedo(data);\n        }\n        this.engine.searchAndStack();\n        this.engine.applyColors();\n        this.mainFabricCanvas.renderAll();\n      },\n\n      derivativeChange: function() {\n        this._trigger(\"updateWells\", null, this.createObject());\n      },\n\n      createObject: function() {\n        var derivative = $.extend(true, {}, this.engine.derivative);\n        var checkboxes = this.globalSelectedAttributes.slice();\n        var selectedAreas = this.selectedAreas.slice();\n        var focalWell = this.focalWell;\n\n        return {\n          \"derivative\": derivative,\n          \"checkboxes\": checkboxes,\n          \"selectedAreas\": selectedAreas,\n          \"focalWell\": focalWell,\n          \"requiredField\": this.requiredField\n        };\n      }\n    };\n  }\n})(jQuery, fabric);","var plateLayOutWidget = plateLayOutWidget || {};\n\n(function($, fabric) {\n\n  plateLayOutWidget.addDataToFields = function() {\n\n    return {\n\n      _addDataToTabFields: function(values) {\n        // Configure how data is added to tab fields\n        for (var id in values) {\n          this._applyFieldData(id, values[id]);\n        }\n      },\n\n      _applyFieldData: function(id, v) {\n        this.fieldMap[id].setValue(v);\n      }\n    }\n  }\n})(jQuery, fabric)","var plateLayOutWidget = plateLayOutWidget || {};\n\n(function($, fabric) {\n\n  plateLayOutWidget.addTabData = function() {\n\n    return {\n\n      fieldList: [],\n      fieldMap: {},\n      autoId: 1,\n\n      _addTabData: function() {\n        // Here we may need more changes because attributes format likely to change\n        var tabData = this.options.attributes.tabs;\n        var that = this;\n        this.requiredField = [];\n        var multiplexFieldArray = [];\n        tabData.forEach(function(tab, tabPointer) {\n          if (tab[\"fields\"]) {\n            var tabFields = tab[\"fields\"];\n            var fieldArray = [];\n            var fieldArrayIndex = 0;\n            // Now we look for fields in the json\n            for (var field in tabFields) {\n              var data = tabFields[field];\n\n              if (!data.id) {\n                data.id = \"Auto\" + that.autoId++;\n                console.log(\"Field autoassigned id \" + data.id);\n              }\n              if (!data.type) {\n                data.type = \"text\";\n                console.log(\"Field \" + data.id + \" autoassigned type \" + data.type);\n              }\n\n              var field_val;\n              if (data.type === \"multiplex\") {\n                field_val = that._makeMultiplexField(data, tabPointer, fieldArray);\n                multiplexFieldArray.push(field_val);\n              } else {\n                field_val = that._makeRegularField(data, tabPointer, fieldArray, true);\n                if (data.type === \"multiselect\") {\n                  multiplexFieldArray.push(field_val);\n                }\n              }\n              ;\n            }\n\n            that.allDataTabs[tabPointer][\"fields\"] = fieldArray;\n          } else {\n            console.log(\"unknown format in field initialization\");\n          }\n        });\n        that.multipleFieldList = multiplexFieldArray;\n      },\n\n      _makeSubField: function(data, tabPointer, fieldArray) {\n        var that = this;\n        if (!data.id) {\n          data.id = \"Auto\" + that.autoId++;\n          console.log(\"Field autoassigned id \" + data.id);\n        }\n        if (!data.type) {\n          data.type = \"text\";\n          console.log(\"Field \" + data.id + \" autoassigned type \" + data.type);\n        }\n        var wrapperDiv = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-default-field\");\n        var wrapperDivLeftSide = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-left-side\");\n        var wrapperDivRightSide = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-right-side\");\n        var nameContainer = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-name\").text(data.name);\n        var fieldContainer = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-container\");\n\n        $(wrapperDivRightSide).append(nameContainer);\n        $(wrapperDivRightSide).append(fieldContainer);\n        $(wrapperDiv).append(wrapperDivLeftSide);\n        $(wrapperDiv).append(wrapperDivRightSide);\n        $(that.allDataTabs[tabPointer]).append(wrapperDiv);\n\n        var field = {\n          id: data.id,\n          name: data.name,\n          root: wrapperDiv,\n          data: data,\n          required: data.required || false\n        };\n\n        fieldArray.push(field);\n        that.fieldMap[data.id] = field;\n\n        return field;\n      },\n\n      _makeRegularField: function(data, tabPointer, fieldArray, checkbox) {\n        var that = this;\n        var wrapperDiv = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-default-field\");\n        var wrapperDivLeftSide = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-left-side\");\n        var wrapperDivRightSide = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-right-side \");\n        var nameContainer = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-name\").text(data.name);\n        var fieldContainer = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-container\");\n\n        wrapperDivRightSide.append(nameContainer);\n        wrapperDivRightSide.append(fieldContainer);\n        wrapperDiv.append(wrapperDivLeftSide);\n        wrapperDiv.append(wrapperDivRightSide);\n        that.allDataTabs[tabPointer].append(wrapperDiv);\n\n        var field = {\n          id: data.id,\n          name: data.name,\n          root: wrapperDiv,\n          data: data,\n          required: data.required\n        };\n\n        if (field.required) {\n          that.requiredField.push(field.id);\n        }\n\n        fieldArray.push(field);\n        that.fieldList.push(field);\n        that.fieldMap[field.id] = field;\n\n        // Adding checkbox\n        if (checkbox) {\n          that._addCheckBox(field);\n        }\n        that._createField(field);\n\n        field.onChange = function() {\n          var v = field.getValue();\n          var data = {};\n          data[field.id] = v;\n          that._addAllData(data);\n        };\n        return field;\n      },\n\n      _makeMultiplexField: function(data, tabPointer, fieldArray) {\n        var that = this;\n        var wrapperDiv = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-default-field\");\n        var wrapperDivLeftSide = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-left-side\");\n        var wrapperDivRightSide = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-right-side \");\n        var nameContainer = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-name\").text(data.name);\n        var fieldContainer = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-container\");\n\n        wrapperDivRightSide.append(nameContainer);\n        wrapperDivRightSide.append(fieldContainer);\n        wrapperDiv.append(wrapperDivLeftSide);\n        wrapperDiv.append(wrapperDivRightSide);\n        that.allDataTabs[tabPointer].append(wrapperDiv);\n\n        var field = {\n          id: data.id,\n          name: data.name,\n          root: wrapperDiv,\n          data: data,\n          required: data.required\n        };\n\n        fieldArray.push(field);\n        that.fieldList.push(field);\n        that.fieldMap[data.id] = field;\n\n        var subFieldList = [];\n        //create subfields\n        var requiredSubField = [];\n        for (var subFieldKey in data.multiplexFields) {\n          var subFieldData = data.multiplexFields[subFieldKey];\n          var subField = that._makeSubField(subFieldData, tabPointer, fieldArray);\n          subFieldList.push(subField);\n\n          // stores required  subField\n          if (subFieldData.required) {\n            requiredSubField.push(subField.id);\n          }\n        }\n\n        //store required field\n        if (field.required || requiredSubField.length) {\n          this.requiredField.push({\n            multiplexId: field.id,\n            subFields: requiredSubField\n          });\n        }\n\n        field.subFieldList = subFieldList;\n        that._createField(field);\n        that._addCheckBox(field);\n\n        subFieldList.forEach(function(subfield) {\n          subfield.mainMultiplexField = field;\n          fieldArray.push(subfield);\n          that._createField(subfield);\n          that._addCheckBox(subfield);\n          delete that.defaultWell[subfield.id];\n          // overwrite subField setvalue\n          subfield.onChange = function() {\n            var v = subfield.getValue();\n            var mainRefField = subfield.mainMultiplexField;\n            var curId = mainRefField.singleSelectValue();\n            //var curDataLs = mainRefField.detailData;\n            var curVal = {};\n            curVal[mainRefField.id] = curId;\n            //append subfields\n            curVal[subfield.id] = v;\n            var returnVal = {\n              id: curId,\n              value: curVal\n            };\n\n            field._changeMultiFieldValue(returnVal, null);\n            var curDataLs = mainRefField.detailData;\n            if (curDataLs !== null) {\n              curId = mainRefField.singleSelectValue();\n              curDataLs = curDataLs.map(function(curData) {\n                if (curData[mainRefField.id] === curId) {\n                  curData[subfield.id] = v;\n                }\n                return curData;\n              });\n            }\n            mainRefField.detailData = curDataLs;\n          };\n\n        });\n\n        return field;\n      }\n    }\n  }\n\n})(jQuery, fabric);\n","var plateLayOutWidget = plateLayOutWidget || {};\n\n(function($, fabric) {\n\n  plateLayOutWidget.addWarningMsg = function() {\n    // For those check boxes associated with every field in the tab\n    return {\n      fieldWarningMsg: function(field, text, include) {\n        var that = this;\n        var imgId = \"fieldWarning\" + field.id;\n        var img = $(\"<span>\").html(that._assets.warningImg).attr(\"id\", imgId).addClass(\"plate-field-warning-image\");\n        //field.root.find(\".plate-setup-tab-name\").append('<img id=\"theImg\" src=\"theImg.png\" />')\n        if (include) {\n          if (field.root.find(\"#\" + imgId).length <= 0) {\n            field.root.find(\".plate-setup-tab-name\").text(\" \" + field.name);\n            field.root.find(\".plate-setup-tab-name\").prepend(img);\n\n            var popText = $(\"<div/>\").addClass(\"pop-out-text\");\n            popText.text(text);\n            field.root.find(\".plate-setup-tab-name\").append(popText);\n\n            $(\"#\" + imgId).hover(function(e) {\n              popText[0].style.display = 'flex';\n            }, function() {\n              popText.hide();\n            });\n          }\n\n\n        } else {\n          if (field.root.find(\"#\" + imgId).length > 0) {\n            field.root.find(\".plate-setup-tab-name\").text(field.name);\n            $(\"#\" + imgId).remove();\n          }\n        }\n      },\n\n      removeWarningMsg: function(field, text, include) {\n        var that = this;\n        var imgId = \"fieldWarning\" + field.id;\n        var img = $(\"<span>\").html(that._assets.warningImg).attr(\"id\", imgId).addClass(\"plate-field-warning-image\");\n        //field.root.find(\".plate-setup-tab-name\").append('<img id=\"theImg\" src=\"theImg.png\" />')\n        if (include) {\n          field.root.find(\".plate-setup-tab-name\").append(img);\n\n          var popText = $(\"<div/>\").addClass(\"pop-out-text\");\n          popText.text(text);\n          field.root.find(\".plate-setup-tab-name\").append(popText);\n\n          $(\"#\" + imgId).hover(function(e) {\n            popText[0].style.display = 'inline-block';\n          }, function() {\n            popText.hide();\n          });\n\n        } else {\n          $(\"#\" + imgId).remove();\n          if (field.root.find(\"#\" + imgId).length > 0) {\n            //field.root.find(\".plate-setup-tab-name\").remove(img);\n            $(\"#\" + imgId).remove();\n          }\n        }\n      },\n\n      applyFieldWarning: function(wells) {\n        var that = this;\n        var req = 0;\n        var fill = 0;\n        var fieldData = {};\n        that.fieldList.forEach(function(field) {\n          fieldData[field.id] = [];\n        });\n        wells.forEach(function(well) {\n          if (!that.engine.wellEmpty(well)) {\n            for (var fieldId in fieldData) {\n              if (fieldId in well) {\n                fieldData[fieldId].push(well[fieldId]);\n              } else {\n                fieldData[fieldId].push(null);\n              }\n            }\n          }\n        });\n        for (var i = 0; i < that.fieldList.length; i++) {\n          var field = that.fieldList[i];\n          if (field.applyMultiplexSubFieldColor) {\n            field.applyMultiplexSubFieldColor(fieldData[field.id]);\n          } else {\n            if (field.required) {\n              var include = false;\n              fieldData[field.id].forEach(function(val) {\n                // for multiselect\n                if (val instanceof Array) {\n                  if (val.length === 0) {\n                    include = true;\n                  }\n                } else {\n                  if (val === null) {\n                    include = true;\n                  }\n                }\n              });\n              //field.root.find(\".plate-setup-tab-name\").css(\"background\", color);\n              that.fieldWarningMsg(field, \"required field\", include);\n            }\n          }\n        }\n      }\n    }\n  }\n})(jQuery, fabric);","var plateLayOutWidget = plateLayOutWidget || {};\n\n(function($, fabric) {\n\n  plateLayOutWidget.bottomTable = function() {\n    // for bottom table\n    return {\n      _bottomScreen: function() {\n        this.bottomContainer = this._createElement(\"<div></div>\").addClass(\"plate-setup-bottom-container\");\n        this.bottomTableContainer = this._createElement(\"<div></div>\").addClass(\"plate-setup-bottom-table-container\");\n        this.bottomTable = this._createElement(\"<table></table>\").addClass(\"plate-setup-bottom-table\");\n        this.bottomTableContainer.append(this.bottomTable);\n        this.bottomContainer.append(this.bottomTableContainer);\n        this.container.append(this.bottomContainer);\n      },\n\n      addBottomTableHeadings: function() {\n\n        this.bottomRow = this._createElement(\"<tr></tr>\");\n\n        var singleField = this._createElement(\"<th></th>\")\n          .text(\"Group\");\n        this.bottomRow.prepend(singleField);\n        // Now we append all the captions at the place.\n        this.bottomTable.empty();\n        this.bottomTable.append(this.bottomRow);\n\n        this.rowCounter = 1;\n\n        for (var i = 0; i < this.globalSelectedAttributes.length; i++) {\n          var attr = this.globalSelectedAttributes[i];\n          var field = this.fieldMap[attr];\n          var singleField = this._createElement(\"<th></th>\").text(field.name);\n          this.bottomRow.append(singleField);\n          this.rowCounter = this.rowCounter + 1;\n        }\n\n        this.adjustFieldWidth(this.bottomRow);\n      },\n\n      tileAttrText: function(tile, attr) {\n        var well = this.engine.derivative[tile.index];\n        var field = this.fieldMap[attr];\n        return field.getText(well[attr]);\n      },\n\n      addBottomTableRow: function(color, singleStack) {\n        var that = this;\n        var modelTile = this.allTiles[singleStack[0]];\n        var row = this._createElement(\"<tr></tr>\");\n        var plateIdDiv = this._createElement(\"<td></td>\").addClass(\"plate-setup-bottom-id\");\n        var numberText = this._createElement(\"<button/>\");\n        numberText.addClass(\"plate-setup-color-text\");\n        numberText.text(color);\n        plateIdDiv.append(numberText);\n\n        numberText.click(function(evt) {\n          var addressToSelect = singleStack.map(function(addressIdx) {\n            return that.indexToAddress(addressIdx)\n          });\n          if (evt.ctrlKey) {\n            that.getSelectedAddress().forEach(function(val) {\n              if (addressToSelect.indexOf(val) < 0) {\n                addressToSelect.push(val);\n              }\n            })\n          }\n          that.setSelectedWell(addressToSelect);\n          that._trigger(\"selectedWells\", null, {selectedAddress: that.getSelectedAddress()});\n        });\n\n        if (color > 0) {\n          color = ((color - 1) % (this.colorPairs.length - 1)) + 1;\n        }\n        var colorStops = this.colorPairs[color];\n\n        plateIdDiv.css(\"background\", \"linear-gradient(to right, \" + colorStops[0] + \" , \" + colorStops[1] + \")\");\n\n        row.append(plateIdDiv);\n\n        for (var i = 0; i < this.globalSelectedAttributes.length; i++) {\n          var attr = this.globalSelectedAttributes[i];\n          var text = this.tileAttrText(modelTile, attr);\n          var dataDiv = this._createElement(\"<td></td>\").text(text);\n          row.append(dataDiv);\n        }\n        this.bottomTable.append(row);\n        this.adjustFieldWidth(row);\n      },\n\n      bottomForFirstTime: function() {\n        this.addBottomTableHeadings();\n        // This is executed for the very first time.. !\n        var row = this._createElement(\"<tr></tr>\");\n\n        var colorStops = this.colorPairs[0];\n        var plateIdDiv = this._createElement(\"<td></td>\");\n        plateIdDiv.css(\"background\", \"-webkit-linear-gradient(left, \" + colorStops[0] + \" , \" + colorStops[1] + \")\");\n        row.append(plateIdDiv);\n        this.bottomTable.append(row);\n        this.createExportButton();\n      },\n\n      adjustFieldWidth: function(row) {\n\n        var length = this.rowCounter;\n        if ((length) * 150 > 1024) {\n          row.css(\"width\", (length) * 152 + \"px\");\n        }\n      },\n\n      downloadCSV: function(csv, filename) {\n        var csvFile;\n        var downloadLink;\n\n        // CSV file\n        csvFile = new Blob([csv], {\n          type: \"text/csv\"\n        });\n\n        // Download link\n        downloadLink = document.createElement(\"a\");\n\n        // File name\n        downloadLink.download = filename;\n\n        // Create a link to the file\n        downloadLink.href = window.URL.createObjectURL(csvFile);\n\n        // Hide download link\n        downloadLink.style.display = \"none\";\n\n        // Add the link to DOM\n        document.body.appendChild(downloadLink);\n\n        // Click download link\n        downloadLink.click();\n      },\n\n      exportData: function(format) {\n        var data = [];\n        var rows = document.querySelectorAll(\"table tr\");\n\n        var colorLocMap = {};\n        var colorLocIdxMap = this.engine.stackUpWithColor;\n        var dim = this.getDimensions();\n        var that = this;\n        for (var colorIdx in colorLocIdxMap) {\n          colorLocMap[colorIdx] = colorLocIdxMap[colorIdx].map(function(locIdx) {\n            return that.indexToAddress(locIdx, dim);\n          })\n        }\n\n        for (var i = 0; i < rows.length; i++) {\n          var row = [],\n            cols = rows[i].querySelectorAll(\"td, th\");\n\n          for (var j = 0; j < cols.length; j++) {\n            var v = \"\";\n            if (cols[j].innerText) {\n              if (format === \"csv\") {\n                v = '\"' + cols[j].innerText.replace(/\"/g, '\"\"') + '\"';\n              } else {\n                v = cols[j].innerText;\n              }\n            }\n            row.push(v);\n\n            // add location column\n            if (i === 0 && j === 0) {\n              if (format === \"csv\") {\n                row.push('\"Location\"');\n              } else if (format === 'clipboard') {\n                row.push(\"Location\");\n              }\n\n            }\n            if (i !== 0 && j === 0) {\n              var loc = '';\n              if (colorLocMap[parseInt(cols[j].innerText)]) {\n                if (format === \"csv\") {\n                  loc = '\"' + colorLocMap[parseInt(cols[j].innerText)].join(\",\") + '\"';\n                } else if (format === 'clipboard') {\n                  loc = colorLocMap[parseInt(cols[j].innerText)].join(\",\");\n                }\n              }\n              row.push(loc);\n            }\n          }\n\n          if (format === \"csv\") {\n            data.push(row.join(\",\"));\n          } else if (format === 'clipboard') {\n            data.push(row.join(\"\\t\"));\n            //data.push(row);   // for text type\n          }\n\n        }\n        if (format === \"csv\") {\n          // Download CSV file\n          this.downloadCSV(data.join(\"\\n\"), 'table.csv');\n        } else if (format === 'clipboard') {\n          //return formatTableToString(data);   // for text type\n          return data.join(\"\\n\");\n        }\n      },\n\n      createExportButton: function() {\n        var that = this;\n        var overlayContainer = $(\"<div>\").addClass(\"plate-setup-bottom-control-container\");\n\n        var descriptionDiv = $(\"<div>\").addClass(\"plate-setup-overlay-text-container\");\n        descriptionDiv.text(\"Color groups\");\n        overlayContainer.append(descriptionDiv);\n\n        var buttonContainer = $(\"<div>\").addClass(\"plate-setup-overlay-bottom-button-container\");\n\n        // create export csv option\n        var exportButton = $(\"<button/>\").addClass(\"plate-setup-button\");\n        exportButton.text(\"Export CSV\");\n        buttonContainer.append(exportButton);\n\n        exportButton.click(function() {\n          that.exportData('csv');\n          exportButton.text(\"Exported\");\n          exportButton[0].classList.remove(\"plate-setup-button\");\n          exportButton.addClass(\"plate-setup-clicked-button\");\n          setTimeout(resetExportText, 3000);\n        });\n\n        function resetExportText() {\n          exportButton.text(\"Export CSV\");\n          exportButton[0].classList.remove(\"plate-setup-clicked-button\");\n          exportButton.addClass(\"plate-setup-button\");\n        }\n\n        // creat clipboard option, CLipboard is an external js file located in vendor/asset/javascripts\n        var clipboardButton = $(\"<button/>\").addClass(\"plate-setup-button\");\n        clipboardButton.text(\"Copy To Clipboard\");\n        buttonContainer.append(clipboardButton);\n\n        var clipboard = new ClipboardJS(clipboardButton.get(0), {\n          text: function() {\n            return that.exportData(\"clipboard\");\n          }\n        });\n\n        clipboard.on('success', function(e) {\n          clipboardButton.text(\"Copied as tab-delimited format\");\n          clipboardButton[0].classList.remove(\"plate-setup-button\");\n          clipboardButton.addClass(\"plate-setup-clicked-button\");\n          setTimeout(resetClipboardText, 3000);\n        });\n\n        function resetClipboardText() {\n          clipboardButton.text(\"Copy To Clipboard\");\n          clipboardButton[0].classList.remove(\"plate-setup-clicked-button\");\n          clipboardButton.addClass(\"plate-setup-button\");\n        }\n\n        clipboard.on('error', function(e) {\n          clipboardButton.text(\"Failed to copy table to clipboard: browser may be incompatible\");\n          setTimeout(resetClipboardText, 3000);\n        });\n\n        overlayContainer.append(buttonContainer);\n        this.bottomContainer.prepend(overlayContainer);\n      }\n    };\n  }\n})(jQuery, fabric);","var plateLayOutWidget = plateLayOutWidget || {};\n\n(function($, fabric) {\n\n  plateLayOutWidget.canvas = function() {\n    //\n    return {\n\n      allSelectedObjects: null, // Contains all the selected objets, when click and drag.\n\n      allPreviouslySelectedObjects: null,\n\n      colorPointer: 0,\n\n      goldenRatio: 0.618033988749895,\n\n      _createCanvas: function() {\n        this.normalCanvas = this._createElement(\"<canvas>\").attr(\"id\", \"DNAcanvas\");\n        $(this.canvasContainer).append(this.normalCanvas);\n      },\n\n      _initiateFabricCanvas: function() {\n        var w = this.canvasContainer.width();\n        var h = this.canvasContainer.height();\n\n        this._setCanvasArea(w, h);\n\n        this.mainFabricCanvas = new fabric.Canvas('DNAcanvas', {\n          backgroundColor: '#f5f5f5',\n          selection: false,\n          stateful: false,\n          hoverCursor: \"pointer\",\n          renderOnAddRemove: false,\n        })\n          .setWidth(w)\n          .setHeight(h);\n      },\n\n    };\n  }\n})(jQuery, fabric);","var plateLayOutWidget = plateLayOutWidget || {};\n\n(function($, fabric) {\n\n  plateLayOutWidget.checkBox = function() {\n    // For those check boxes associated with every field in the tab\n    return {\n\n      globalSelectedAttributes: [],\n\n      _addCheckBox: function(field) {\n        var checkImage = $(\"<span>\").html(this._assets.dontImg).addClass(\"plate-setup-tab-check-box bg-light\")\n          .data(\"clicked\", false);\n        checkImage.data(\"linkedFieldId\", field.id);\n        field.root.find(\".plate-setup-tab-field-left-side\").empty().append(checkImage);\n        this._applyCheckboxHandler(checkImage); // Adding handler for change the image when clicked\n        field.checkbox = checkImage;\n      },\n\n      _applyCheckboxHandler: function(checkBoxImage) {\n        // We add checkbox handler here, thing is it s not checkbox , its an image and we change\n        // source\n        var that = this;\n        checkBoxImage.click(function(evt, machineClick) {\n          var checkBox = $(this);\n\n          var changes = {};\n          changes[checkBox.data(\"linkedFieldId\")] = !checkBox.data(\"clicked\");\n\n          that.changeCheckboxes(changes);\n        });\n      },\n\n      changeSubFieldsCheckboxes: function(field, changes) {\n        var that = this;\n        var subFieldToInclude = [];\n\n        field.subFieldList.forEach(function(subField) {\n          var checkImage = subField.checkbox;\n          var fieldId = checkImage.data(\"linkedFieldId\");\n          var clicked = checkImage.data(\"clicked\");\n          if (fieldId in changes) {\n            clicked = Boolean(changes[fieldId]);\n          }\n          checkImage.data(\"clicked\", clicked);\n          if (clicked) {\n            checkImage.html(that._assets.doImg);\n            subFieldToInclude.push(subField.id);\n          } else {\n            checkImage.html(that._assets.dontImg);\n          }\n        });\n        return subFieldToInclude;\n      },\n\n      changeCheckboxes: function(changes) {\n        var gsa = [];\n        var multiplexCheckedSubField = {};\n        for (var i = 0; i < this.fieldList.length; i++) {\n          var field = this.fieldList[i];\n          if (field.checkbox) {\n            if (field.subFieldList) {\n              multiplexCheckedSubField[field.id] = this.changeSubFieldsCheckboxes(field, changes);\n            }\n\n            var checkImage = field.checkbox;\n            var fieldId = checkImage.data(\"linkedFieldId\");\n            var clicked = checkImage.data(\"clicked\");\n            if (fieldId in changes) {\n              clicked = Boolean(changes[fieldId]);\n            }\n            checkImage.data(\"clicked\", clicked);\n            if (clicked) {\n              gsa.push(fieldId);\n              checkImage.html(this._assets.doImg);\n            } else {\n              checkImage.html(this._assets.dontImg);\n            }\n          }\n        }\n        this.globalSelectedMultiplexSubfield = multiplexCheckedSubField;\n        this.globalSelectedAttributes = gsa;\n        this._clearPresetSelection();\n        this._colorMixer();\n      },\n\n      setSubFieldCheckboxes: function(field, fieldIds) {\n        var that = this;\n        var subFieldToInclude = [];\n        field.subFieldList.forEach(function(subField) {\n          var checkImage = subField.checkbox;\n          var fieldId = checkImage.data(\"linkedFieldId\");\n          var clicked = fieldIds.indexOf(fieldId) >= 0;\n          checkImage.data(\"clicked\", clicked);\n          if (clicked) {\n            checkImage.html(that._assets.doImg);\n            subFieldToInclude.push(subField.id);\n          } else {\n            checkImage.html(that._assets.dontImg);\n          }\n        });\n        return subFieldToInclude;\n      },\n\n      setCheckboxes: function(fieldIds) {\n        fieldIds = fieldIds || [];\n        var gsa = [];\n        var multiplexCheckedSubField = {};\n\n        for (var i = 0; i < this.fieldList.length; i++) {\n          var field = this.fieldList[i];\n          if (field.checkbox) {\n            // special handling for multiplex field\n            if (field.subFieldList) {\n              multiplexCheckedSubField[field.id] = this.setSubFieldCheckboxes(field, fieldIds);\n            }\n\n            var checkImage = field.checkbox;\n            var fieldId = checkImage.data(\"linkedFieldId\");\n            var clicked = fieldIds.indexOf(fieldId) >= 0;\n            checkImage.data(\"clicked\", clicked);\n            if (clicked) {\n              gsa.push(fieldId);\n              checkImage.html(this._assets.doImg);\n            } else {\n\n              checkImage.html(this._assets.dontImg);\n            }\n          }\n        }\n        this.globalSelectedMultiplexSubfield = multiplexCheckedSubField;\n        this.globalSelectedAttributes = gsa;\n        this._clearPresetSelection();\n        this._colorMixer();\n      }\n\n    };\n  }\n})(jQuery, fabric);","var plateLayOutWidget = plateLayOutWidget || {};\n\n(function($, fabric) {\n\n  plateLayOutWidget.colorManager = function() {\n\n    return {\n      // See these are color pairs for the gradient.\n      colorPairs: [\n        [\"#e6e6e6\", \"#808080\"],\n        [\"#66e8ff\", \"#0082c8\"],\n        [\"#ff7fb1\", \"#e6194b\"],\n        [\"#a2ffb1\", \"#3cb44b\"],\n        [\"#f784ff\", \"#911eb4\"],\n        [\"#ffe897\", \"#f58231\"],\n        [\"#6666ff\", \"#0000FF\"],\n        [\"#ffff7f\", \"#ffe119\"],\n        [\"#acffff\", \"#46f0f0\"],\n        [\"#ff98ff\", \"#f032e6\"],\n        [\"#ffffa2\", \"#d2f53c\"],\n        [\"#ffffff\", \"#fabebe\"],\n        [\"#66e6e6\", \"#008080\"],\n        [\"#ffffff\", \"#e6beff\"],\n        [\"#ffd48e\", \"#aa6e28\"],\n        [\"#e66666\", \"#800000\"],\n        [\"#ffffff\", \"#aaffc3\"],\n        [\"#e6e666\", \"#808000\"],\n        [\"#ffffff\", \"#ffd8b1\"],\n        [\"#66a9ef\", \"#004389\"],\n        [\"#ff6672\", \"#a7000c\"],\n        [\"#66db72\", \"#00750c\"],\n        [\"#b866db\", \"#520075\"],\n        [\"#ffa966\", \"#b64300\"],\n        [\"#ffff66\", \"#c0a200\"],\n        [\"#6dffff\", \"#07b1b1\"],\n        [\"#ff66ff\", \"#b100a7\"],\n        [\"#f9ff66\", \"#93b600\"],\n        [\"#ffe5e5\", \"#bb7f7f\"],\n        [\"#66a7a7\", \"#004141\"],\n        [\"#ffe5ff\", \"#a77fc0\"],\n        [\"#d19566\", \"#6b2f00\"],\n        [\"#ffffef\", \"#c0bb89\"],\n        [\"#d1ffea\", \"#6bc084\"],\n        [\"#a7a766\", \"#414100\"],\n        [\"#ffffd8\", \"#c09972\"],\n        [\"#a5ffff\", \"#3fc1ff\"],\n        [\"#ffbef0\", \"#ff588a\"],\n        [\"#e1fff0\", \"#7bf38a\"],\n        [\"#ffc3ff\", \"#d05df3\"],\n        [\"#ffffd6\", \"#ffc170\"],\n        [\"#a5a5ff\", \"#3f3fff\"],\n        [\"#ffffbe\", \"#ffff58\"],\n        [\"#ebffff\", \"#85ffff\"],\n        [\"#ffd7ff\", \"#ff71ff\"],\n        [\"#a5ffff\", \"#3fbfbf\"],\n        [\"#ffffcd\", \"#e9ad67\"],\n        [\"#ffa5a5\", \"#bf3f3f\"],\n        [\"#ffffa5\", \"#bfbf3f\"]\n      ]\n    }\n  }\n\n})(jQuery, fabric);","var plateLayOutWidget = plateLayOutWidget || {};\n\n(function($, fabric) {\n\n  plateLayOutWidget.createCanvasElements = function() {\n    // this class manages creating all the elements within canvas\n    return {\n\n      scaleFactor: 1,\n\n      baseSizes: {\n        spacing: 48,\n        tile_radius: 22,\n        center_radius_complete: 10,\n        center_radius_incomplete: 14,\n        label_size: 14,\n        label_spacing: 24,\n        text_size: 13,\n        stroke: 0.5,\n        gap: 2\n      },\n\n      _setCanvasArea: function(w, h) {\n        this.scaleFactor = Math.min(\n          h / (this.dimensions.rows * this.baseSizes.spacing + this.baseSizes.label_spacing),\n          w / (this.dimensions.cols * this.baseSizes.spacing + this.baseSizes.label_spacing));\n\n        var sizes = {};\n        for (var prop in this.baseSizes) {\n          sizes[prop] = this.baseSizes[prop] * this.scaleFactor;\n        }\n        this.sizes = sizes;\n      },\n\n      _canvas: function() {\n        // Those 1,2,3 s and A,B,C s\n        this._fixRowAndColumn();\n\n        // All those circles in the canvas.\n        this._putCircles();\n      },\n\n      _fixRowAndColumn: function() {\n        var cols = this.dimensions.cols;\n        var rows = this.dimensions.rows;\n\n        var spacing = this.sizes.spacing;\n        var d1 = this.sizes.label_spacing / 2;\n        var d2 = this.sizes.label_spacing + this.sizes.spacing / 2;\n        var fontSize = this.sizes.label_size;\n\n        // For column\n        var top = d1;\n        var left = d2;\n        for (var i = 1; i <= cols; i++) {\n          var tempFabricText = new fabric.IText(i.toString(), {\n            fill: 'black',\n            originX: 'center',\n            originY: 'center',\n            fontSize: fontSize,\n            top: top,\n            left: left,\n            fontFamily: '\"Roboto\", Arial, sans-serif',\n            selectable: false,\n            fontWeight: \"400\"\n          });\n          left += spacing;\n\n          this.mainFabricCanvas.add(tempFabricText);\n        }\n\n        // for row\n        top = d2;\n        left = d1;\n        for (var i = 1; i <= rows; i++) {\n          var tempFabricText = new fabric.IText(this.rowIndex[i - 1], {\n            fill: 'black',\n            originX: 'center',\n            originY: 'center',\n            fontSize: fontSize,\n            top: top,\n            left: left,\n            fontFamily: '\"Roboto\", Arial, sans-serif',\n            selectable: false,\n            fontWeight: \"400\"\n          });\n          top += spacing;\n\n          this.mainFabricCanvas.add(tempFabricText);\n        }\n      },\n\n      _putCircles: function() {\n        var cols = this.dimensions.cols;\n        var rows = this.dimensions.rows;\n\n        var tileCounter = 0;\n        for (var row = 0; row < rows; row++) {\n          for (var col = 0; col < cols; col++) {\n            var index = this.allTiles.length;\n            var tile = this._createTile(row, col);\n            tile.index = tileCounter++;\n            this.allTiles.push(tile);\n            this.mainFabricCanvas.add(tile.background);\n            this.mainFabricCanvas.add(tile.highlight);\n            this.mainFabricCanvas.add(tile.circle);\n            this.mainFabricCanvas.add(tile.circleCenter);\n            this.mainFabricCanvas.add(tile.circleText);\n          }\n        }\n\n        this._addLargeRectangleOverlay();\n        this._fabricEvents();\n      },\n\n      _createTile: function(row, col) {\n        var tile = {};\n\n        tile.visible = false;\n        tile.colorIndex = null;\n        tile.row = row;\n        tile.col = col;\n        tile.address = this.rowIndex[row] + (col + 1);\n\n        var top = (row + 1) * this.sizes.spacing;\n        var left = (col + 1) * this.sizes.spacing;\n\n        tile.background = new fabric.Circle({\n          top: top,\n          left: left,\n          radius: this.sizes.tile_radius,\n          originX: 'center',\n          originY: 'center',\n          hasControls: false,\n          hasBorders: false,\n          lockMovementX: true,\n          lockMovementY: true,\n          evented: false,\n        });\n\n        tile.background.setGradient(\"fill\", {\n          type: \"radial\",\n          x1: this.sizes.tile_radius,\n          x2: this.sizes.tile_radius,\n          y1: this.sizes.tile_radius + this.sizes.gap,\n          y2: this.sizes.tile_radius + this.sizes.gap,\n          r1: this.sizes.tile_radius - this.sizes.gap,\n          r2: this.sizes.tile_radius,\n          colorStops: {\n            0: 'rgba(0,0,0,0.1)',\n            1: 'rgba(0,0,0,0.2)'\n          }\n        });\n\n        tile.highlight = new fabric.Rect({\n          originX: 'center',\n          originY: 'center',\n          top: top,\n          left: left,\n          width: this.sizes.spacing,\n          height: this.sizes.spacing,\n          fill: \"rgba(0,0,0,0.4)\",\n          evented: false,\n          visible: false\n        });\n\n        tile.circle = new fabric.Circle({\n          originX: 'center',\n          originY: 'center',\n          top: top,\n          left: left,\n          radius: this.sizes.tile_radius,\n          stroke: 'gray',\n          strokeWidth: this.sizes.stroke,\n          evented: false,\n          visible: false\n        });\n\n        tile.circleCenter = new fabric.Circle({\n          originX: 'center',\n          originY: 'center',\n          top: top,\n          left: left,\n          radius: this.sizes.center_radius_incomplete,\n          fill: \"white\",\n          stroke: 'gray',\n          strokeWidth: this.sizes.stroke,\n          evented: false,\n          visible: false\n        });\n\n        tile.circleText = new fabric.IText(\"\", {\n          originX: 'center',\n          originY: 'center',\n          top: top,\n          left: left,\n          fill: 'black',\n          fontFamily: '\"Roboto\", Arial, sans-serif',\n          fontSize: this.sizes.text_size,\n          lockScalingX: true,\n          lockScalingY: true,\n          evented: false,\n          visible: false\n        });\n\n        return tile;\n      },\n\n      setTileComplete: function(tile, complete) {\n        if (complete) {\n          tile.circleCenter.radius = this.sizes.center_radius_complete;\n          tile.circleText.fill = \"black\";\n          tile.circleText.fontWeight = 'normal';\n        } else {\n          tile.circleCenter.radius = this.sizes.center_radius_incomplete;\n          tile.circleText.fill = \"red\";\n          tile.circleText.fontWeight = 'bold';\n        }\n      },\n\n      setTileVisible: function(tile, visible) {\n        tile.visible = visible;\n        tile.circle.visible = tile.visible;\n        tile.circleCenter.visible = tile.visible;\n        tile.circleText.visible = tile.visible;\n      },\n\n      setTileColor: function(tile, color) {\n        this.setTileVisible(tile, true);\n        tile.colorIndex = parseInt(color);\n        tile.circleText.text = String(tile.colorIndex);\n\n        if (color > 0) {\n          color = ((color - 1) % (this.colorPairs.length - 1)) + 1;\n        }\n        var colorStops = this.colorPairs[color];\n\n        tile.circle.setGradient(\"fill\", {\n          y2: 2 * this.sizes.tile_radius,\n          colorStops: colorStops\n        });\n      },\n\n      _addLargeRectangleOverlay: function() {\n\n        this.overLay = new fabric.Rect({\n          width: 632,\n          height: 482,\n          left: 0,\n          top: 0,\n          opacity: 0.0,\n          originX: 'left',\n          originY: 'top',\n          lockMovementY: true,\n          lockMovementX: true,\n          selectable: false\n        });\n\n        this.mainFabricCanvas.add(this.overLay);\n      }\n    };\n  }\n})(jQuery, fabric);\n","var plateLayOutWidget = plateLayOutWidget || {};\n\n(function($, fabric) {\n\n  plateLayOutWidget.createField = function() {\n    // It creates those fields in the tab , there is 4 types of them.\n    return {\n\n      _createField: function(field) {\n        switch (field.data.type) {\n          case \"text\":\n            this._createTextField(field);\n            break;\n\n          case \"numeric\":\n            this._createNumericField(field);\n            break;\n\n          case \"select\":\n            this._createSelectField(field);\n            break;\n\n          case \"multiselect\":\n            this._createMultiSelectField(field);\n            break;\n\n          case \"boolean\":\n            this._createBooleanField(field);\n            break;\n\n          case \"multiplex\":\n            this._createMultiplexField(field);\n            break;\n        }\n      },\n\n      _createTextField: function(field) {\n        var id = field.id;\n        var that = this;\n        var input = this._createElement(\"<input>\").attr(\"id\", id)\n          .addClass(\"plate-setup-tab-input\");\n\n        field.root.find(\".plate-setup-tab-field-container\").append(input);\n        that.defaultWell[id] = null;\n\n        field.parseValue = function(v) {\n          if (v) {\n            v = String(v);\n          } else {\n            v = null;\n          }\n          return v;\n        };\n\n        field.getValue = function() {\n          var v = input.val().trim();\n          if (v == \"\") {\n            v = null;\n          }\n          return v;\n        };\n\n        field.setValue = function(v) {\n          input.val(v);\n        };\n\n        field.getText = function(v) {\n          if (v == null) {\n            return \"\";\n          }\n          return v;\n        };\n\n        field.disabled = function(bool) {\n          field.input.prop(\"disabled\", bool);\n        };\n\n        field.parseText = field.parseValue;\n\n        input.on(\"input\", function(e, generated) {\n          field.onChange();\n        });\n\n        field.input = input;\n      },\n\n      _createOpts: function(config) {\n        var opts = {\n          allowClear: true,\n          placeholder: \"select\",\n          minimumResultsForSearch: 10\n        };\n        var data_specified = false;\n\n        if (config.options) {\n          opts.data = config.options;\n          data_specified = true;\n        }\n        if (config.ajax) {\n          opts.ajax = ajax;\n          data_specified = true;\n        }\n        if (!data_specified) {\n          throw \"Must specify data or ajax\";\n        }\n        return opts;\n      },\n\n      _createSelectField: function(field) {\n        var id = field.id;\n        var that = this;\n        var input = this._createElement(\"<select/>\").attr(\"id\", id)\n          .addClass(\"plate-setup-tab-select-field\");\n\n        field.root.find(\".plate-setup-tab-field-container\").append(input);\n        that.defaultWell[id] = null;\n\n        var opts = that._createOpts(field.data);\n        var optMap = {};\n        opts.data.forEach(function(opt) {\n          optMap[String(opt.id)] = opt;\n        });\n\n        input.select2(opts);\n\n        field.parseValue = function(value) {\n          var v = value;\n\n          if (v === \"\") {\n            v = null;\n          }\n          if (v == null) {\n            return null;\n          }\n          v = String(v);\n          if (v in optMap) {\n            return optMap[v].id;\n          } else {\n            throw \"Invalid value \" + value + \" for select field \" + id;\n          }\n        };\n\n        field.disabled = function(bool) {\n          field.input.prop(\"disabled\", bool);\n        };\n\n        field.getValue = function() {\n          return field.parseValue(input.val());\n        };\n\n        field.setValue = function(v) {\n          input.val(v);\n          input.trigger(\"change.select2\")\n        };\n\n        field.getText = function(v) {\n          if (v == null) {\n            return \"\";\n          }\n          return optMap[String(v)].text;\n        };\n\n        field.parseText = function(value) {\n          var v = value;\n\n          if (v === \"\") {\n            v = null;\n          }\n          if (v == null) {\n            return null;\n          }\n          v = String(v);\n          if (v in optMap) {\n            return optMap[v].text;\n          } else {\n            throw \"Invalid text value \" + value + \" for select field \" + id;\n          }\n        };\n\n        input.on(\"change\", function(e, generated) {\n          field.onChange();\n        });\n\n\n        input.on('select2:unselect', function (evt) {\n            // Prevent select2 v4.0.6rc1 opening dropdown on unselect\n            input.one('select2:opening', function(e) { e.preventDefault(); });\n        });\n\n        field.input = input;\n      },\n\n      _createMultiSelectField: function(field) {\n        var id = field.id;\n        var that = this;\n        var input = this._createElement(\"<select/>\").attr(\"id\", id)\n          .addClass(\"plate-setup-tab-multiselect-field\");\n        input.attr(\"multiple\", \"multiple\");\n\n        field.root.find(\".plate-setup-tab-field-container\").append(input);\n        that.defaultWell[id] = null;\n\n        var opts = that._createOpts(field.data);\n        opts.multiple = true;\n        var optMap = {};\n        opts.data.forEach(function(opt) {\n          optMap[String(opt.id)] = opt;\n        });\n        input.select2(opts);\n\n        field.disabled = function(bool) {\n          input.prop(\"disabled\", bool);\n        };\n\n        field._parseOne = function(val) {\n          val = String(val);\n          if (val in optMap) {\n            return optMap[val].id;\n          } else {\n            throw \"Invalid value \" + val + \" for multiselect field \" + id;\n          }\n        };\n\n        field._parseMany = function(vals) {\n          if (vals && vals.length) {\n            vals = vals.map(field._parseOne);\n          } else {\n            vals = null;\n          }\n          return vals;\n        }\n\n        field.parseValue = function(value) {\n          return field._parseMany(value);\n        };\n\n        field.getValue = function() {\n          return field._parseMany(input.val());\n        };\n\n        field.setValue = function(v) {\n          v = v || [];\n          input.val(v);\n          input.trigger(\"change.select2\");\n        };\n\n        field.getText = function(v) {\n          if (v == null) {\n            return \"\";\n          }\n          if (v.length > 0) {\n            return v.map(function(v) {\n              return optMap[String(v)].text\n            }).join(\"; \");\n          }\n          return \"\";\n        };\n\n        field.multiOnChange = function(added, removed) {\n          if (added) {\n            added = added.id;\n          }\n          if (removed) {\n            removed = removed.id;\n          }\n          var data = {};\n          data[field.id] = {\n            multi: true,\n            added: added,\n            removed: removed\n          };\n\n          that._addAllData(data);\n        };\n\n        field.parseText = function(value) {\n          var v = value;\n          if (v && v.length) {\n            v = v.map(function(opt) {\n              opt = String(opt);\n              if (opt in optMap) {\n                return optMap[opt].text;\n              } else {\n                throw \"Invalid text value \" + opt + \" for multiselect field \" + id;\n              }\n            });\n          } else {\n            v = null;\n          }\n          return v;\n        };\n\n        input.on(\"select2:select\", function (e) {\n          var v = field._parseOne(e.params.data.id)\n          v = {id: v};\n          field.multiOnChange(v, null);\n        });\n\n        input.on(\"select2:unselect\", function (e) {\n          var v = field._parseOne(e.params.data.id)\n          v = {id: v};\n          field.multiOnChange(null, v);\n          // Prevent select2 v4.0.6rc1 opening dropdown on unselect\n          input.one('select2:opening', function(e) { e.preventDefault(); });\n        });\n\n        field.input = input;\n\n        that._createDeleteButton(field);\n      },\n\n      _createNumericField: function(field) {\n        var id = field.id;\n        var data = field.data;\n        var that = this;\n        var input = this._createElement(\"<input>\").addClass(\"plate-setup-tab-input\")\n          .attr(\"placeholder\", data.placeholder || \"\").attr(\"id\", id);\n\n        field.root.find(\".plate-setup-tab-field-container\").append(input);\n        that.defaultWell[id] = null;\n\n        // Adding unit\n        var units = data.units || [];\n        var defaultUnit = data.defaultUnit || null;\n        var unitInput = null;\n        if (defaultUnit) {\n          if (units.length) {\n            if (units.indexOf(defaultUnit) < 0) {\n              defaultUnit = units[0];\n            }\n          } else {\n            units = [defaultUnit];\n          }\n        } else {\n          if (units.length) {\n            defaultUnit = units[0];\n          }\n        }\n\n        if (units.length) {\n          field.units = units;\n          field.hasUnits = true;\n          field.defaultUnit = defaultUnit;\n          if (units.length == 1) {\n            var unitText = $(\"<div></div>\").addClass(\"plate-setup-tab-unit\");\n            unitText.text(defaultUnit);\n            field.root.find(\".plate-setup-tab-field-container\").append(unitText);\n          } else {\n            unitInput = this._createElement(\"<select/>\").attr(\"id\", id)\n              .addClass(\"plate-setup-tab-label-select-field\");\n\n            field.root.find(\".plate-setup-tab-field-container\").append(unitInput);\n\n            var selected = null;\n            var unitData = units.map(function(unit) {\n              var o = {\n                id: unit,\n                text: unit\n              };\n              if (unit == defaultUnit) {\n                selected = unit;\n              }\n              return o;\n            });\n\n            var opts = {\n              data: unitData,\n              allowClear: false,\n              minimumResultsForSearch: 10\n            };\n\n            unitInput.select2(opts);\n            unitInput.val(selected);\n          }\n        }\n\n        field.disabled = function(bool) {\n          field.input.prop(\"disabled\", bool);\n          if (unitInput) {\n            unitInput.prop(\"disabled\", bool);\n          }\n        };\n\n        field.setUnitOpts = function(opts) {\n          field.units = opts || null;\n          field.defaultUnit = null;\n\n          var newUnits = [];\n          var selected = null;\n          if (field.units && field.units.length) {\n            field.defaultUnit = field.units[0];\n            newUnits = field.units.map(function(curUnit) {\n              var cleanUnit = {\n                id: curUnit,\n                text: curUnit\n              };\n              if (curUnit == field.defaultUnit) {\n                selected = curUnit;\n              }\n              return cleanUnit;\n            });\n          }\n\n          var newOpts = {\n            data: newUnits,\n            allowClear: false,\n            minimumResultsForSearch: 10\n          };\n          unitInput.select2(\"destroy\");\n          unitInput.val(null);\n          unitInput.empty();\n          unitInput.select2(newOpts);\n          unitInput.val(selected);\n        };\n\n        field.parseValue = function(value) {\n          var v;\n          if ($.isPlainObject(value)) {\n            if (field.hasUnits) {\n              v = field.parseRegularValue(value.value);\n              if (v === null) {\n                return null;\n              }\n              return {\n                value: v,\n                unit: field.parseUnit(value.unit)\n              };\n            } else {\n              throw \"Value must be plain numeric for numeric field \" + id;\n            }\n          } else {\n            if (field.hasUnits) {\n              v = field.parseRegularValue(value);\n              if (v === null) {\n                return null;\n              }\n              return {\n                value: v,\n                unit: field.defaultUnit\n              };\n            } else {\n              return field.parseRegularValue(value);\n            }\n          }\n        };\n\n        field.getValue = function() {\n          var v = field.getRegularValue();\n\n          if ((v === null) || isNaN(v)) {\n            return null;\n          } else if (field.hasUnits) {\n            var returnVal = {\n              value: v,\n              unit: field.getUnit()\n            };\n\n            if (field.data.hasMultiplexUnit) {\n              // include unitTypeId and UnitId to returnVal\n              for (var unitTypeKey in field.data.unitMap) {\n                var unitTypeUnits = field.data.unitMap[unitTypeKey];\n                unitTypeUnits.forEach(function(unit) {\n                  if (unit.text === returnVal.unit) {\n                    returnVal['unitTypeId'] = unitTypeKey;\n                    returnVal['unitId'] = unit.id;\n                  }\n                })\n              }\n            }\n            return returnVal;\n          } else {\n            return v;\n          }\n        };\n\n        field.setValue = function(value) {\n          if (field.hasUnits) {\n            if ($.isPlainObject(value)) {\n              field.setUnit(value.unit || field.defaultUnit);\n              field.setRegularValue(value.value);\n\n            } else {\n              field.setRegularValue(value);\n              field.setUnit(field.defaultUnit)\n            }\n          } else {\n            field.setRegularValue(value);\n          }\n        };\n\n        field.parseRegularValue = function(value) {\n          if (value == null) {\n            return null;\n          }\n          var v = String(value).trim();\n          if (v === \"\") {\n            return null;\n          }\n          v = Number(value);\n          if (isNaN(v)) {\n            throw \"Invalid value \" + value + \" for numeric field \" + id;\n          }\n          return v;\n        };\n\n        field.getRegularValue = function() {\n          var v = input.val().trim();\n          if (v == \"\") {\n            v = null;\n          } else {\n            v = Number(v);\n          }\n          return v;\n        };\n\n        field.setRegularValue = function(value) {\n          input.val(value);\n        };\n\n        field.parseUnit = function(unit) {\n          if (unit == null || unit === \"\") {\n            return field.defaultUnit;\n          }\n          for (var i = 0; i < units.length; i++) {\n            if (unit.toLowerCase() == units[i].toLowerCase()) {\n              return units[i];\n            }\n          }\n          throw \"Invalid unit \" + unit + \" for field \" + id;\n        };\n\n        field.getUnit = function() {\n          if (unitInput) {\n            return unitInput.val();\n          } else {\n            return field.defaultUnit;\n          }\n        };\n\n        field.setUnit = function(unit) {\n          if (unitInput) {\n            unit = unit || field.defaultUnit;\n            unitInput.val(unit);\n            unitInput.trigger(\"change.select2\");\n          }\n        };\n\n        // val now contains unit\n        field.getText = function(val) {\n          if (typeof (val) === 'object' && val) {\n            var v = val.value;\n            var u = val.unit;\n            if (v == null) {\n              return \"\";\n            }\n            v = v.toString();\n            if (!u) {\n              u = defaultUnit;\n            }\n            if (u) {\n              v = v + \" \" + u;\n            }\n            return v;\n          } else {\n            return field.getRegularText(val);\n          }\n        };\n\n        field.getRegularText = function(v) {\n          if (v == null) {\n            return \"\";\n          }\n          v = v.toString();\n          return v;\n        };\n\n        field.parseText = function(v) {\n          var textVal = field.parseValue(v);\n          if (textVal && typeof (textVal) === \"object\") {\n            return textVal.value + textVal.unit;\n          } else if (textVal) {\n            return textVal\n          } else {\n            return null;\n          }\n        };\n\n        input.on(\"input\", function() {\n          var v = field.getRegularValue();\n          if (isNaN(v)) {\n            //flag field as invalid\n            input.addClass(\"invalid\");\n          } else {\n            input.removeClass(\"invalid\");\n          }\n          field.onChange();\n        });\n        if (unitInput) {\n          unitInput.on(\"change\", function() {\n            field.onChange();\n          });\n        }\n\n        field.input = input;\n        field.unitInput = unitInput;\n      },\n\n      _createBooleanField: function(field) {\n        var id = field.id;\n        var that = this;\n        var input = this._createElement(\"<select/>\").attr(\"id\", id)\n          .addClass(\"plate-setup-tab-select-field\");\n        that.defaultWell[id] = null;\n\n        field.root.find(\".plate-setup-tab-field-container\").append(input);\n        var tval = {\n          id: \"true\",\n          text: \"true\"\n        };\n        var fval = {\n          id: \"false\",\n          text: \"false\"\n        };\n        var opts = {\n          data: [tval, fval],\n          placeholder: \"select\",\n          allowClear: true,\n          minimumResultsForSearch: -1\n        };\n\n        input.select2(opts);\n\n        field.disabled = function(bool) {\n          field.input.prop(\"disabled\", bool);\n        };\n\n        field.parseValue = function(value) {\n          if (value == null) {\n            return null;\n          }\n          var v = String(value).trim().toLowerCase();\n          if (v === \"true\") {\n            v = true;\n          } else if (v === \"false\") {\n            v = false;\n          } else if (v === \"\") {\n            v = null;\n          } else {\n            throw \"Invalid value \" + value + \" for boolean field \" + id;\n          }\n          return v;\n        };\n\n        field.getValue = function() {\n          var v = input.val();\n          switch (v) {\n            case \"true\":\n              return true;\n            case \"false\":\n              return false;\n            default:\n              return null;\n          }\n        };\n\n        field.setValue = function(v) {\n          if (v == true || v === \"true\") {\n            v = \"true\";\n          } else if (v == false || v === \"false\") {\n            v = \"false\";\n          } else {\n            v = null;\n          }\n          input.val(v);\n          input.trigger(\"change.select2\");\n        };\n\n        field.getText = function(v) {\n          if (v == null) {\n            return \"\";\n          }\n          return v.toString();\n        };\n\n        field.parseText = field.parseValue;\n\n        input.on(\"change\", function(e) {\n          field.onChange();\n        });\n\n\n        input.on('select2:unselect', function (evt) {\n          // Prevent select2 v4.0.6rc1 opening dropdown on unselect\n          input.one('select2:opening', function(e) { e.preventDefault(); });\n        });\n\n        field.input = input;\n      },\n\n      _createMultiplexField: function(field) {\n        var that = this;\n        // make correct multiplex data\n        this._createMultiSelectField(field);\n        // overwrite default well for multiplex field\n        that.defaultWell[field.id] = [];\n\n        // single select\n        var nameContainer1 = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-name-singleSelect\").text(\"Select to edit\");\n        var fieldContainer1 = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-container-singleSelect\");\n        field.root.find(\".plate-setup-tab-field-right-side\").append(nameContainer1, fieldContainer1);\n\n        field.singleSelect = this._createElement(\"<select/>\").attr(\"id\", field.id + \"SingleSelect\")\n          .addClass(\"plate-setup-tab-multiplex-single-select-field\");\n\n        field.singleSelect.appendTo(fieldContainer1);\n\n        var multiselectSetValue = field.setValue;\n\n        field.singleSelectValue = function() {\n          var v = field.singleSelect.val();\n          if (v === \"\") {\n            return null;\n          }\n          if (v == null) {\n            return null;\n          }\n          return field._parseOne(v)\n        };\n\n        var setSingleSelectOptions = function(v, selected_v) {\n          var opts = {\n            allowClear: false,\n            placeholder: \"select\",\n            minimumResultsForSearch: 10,\n            data: v || []\n          };\n          if (!selected_v) {\n            if (opts.data.length) {\n              selected_v = opts.data[0].id;\n            } else {\n              selected_v = null;\n            }\n          }\n          if (field.singleSelect.hasClass(\"select2-hidden-accessible\")) {\n            field.singleSelect.select2(\"destroy\");\n          }\n          field.singleSelect.val(null);\n          field.singleSelect.empty();\n          field.singleSelect.select2(opts);\n          field.singleSelect.val(selected_v);\n          field.singleSelect.prop(\"disabled\", opts.data.length == 0);\n          field.singleSelect.trigger(\"change.select2\");\n          field.singleSelect.on(\"change.select2\", singleSelectChange);\n        };\n\n        var singleSelectChange = function() {\n          var v = field.singleSelectValue();\n\n          field.updateSubFieldUnitOpts(v);\n\n          var curData = field.detailData || [];\n          var curSubField = null;\n          curData.forEach(function(val) {\n            if (val[field.id] === v) {\n              curSubField = val;\n            }\n          });\n\n          if (curSubField) {\n            // setvalue for subfield\n            field.subFieldList.forEach(function(subField) {\n              subField.disabled(false);\n              subField.setValue(curSubField[subField.id]);\n            });\n          } else {\n            field.subFieldList.forEach(function(subField) {\n              subField.disabled(true);\n              subField.setValue(null);\n            });\n          }\n          that.readOnlyHandler();\n        };\n\n        setSingleSelectOptions([]);\n\n        field._changeMultiFieldValue = function(added, removed) {\n          var newSubFieldValue = {};\n          for (var subFieldName in field.data.multiplexFields) {\n            var subFieldId = field.data.multiplexFields[subFieldName].id;\n            newSubFieldValue[subFieldId] = null;\n          }\n\n          var val;\n          if (added) {\n            if (added.value) {\n              val = added.value;\n            } else {\n              newSubFieldValue[field.id] = added.id;\n              val = newSubFieldValue;\n            }\n            added = {\n              id: added.id,\n              value: val\n            };\n          }\n\n          if (removed) {\n            if (removed.value) {\n              val = removed.value;\n            } else {\n              newSubFieldValue[field.id] = removed.id;\n              val = newSubFieldValue;\n            }\n            removed = {\n              id: removed.id,\n              value: val\n            };\n          }\n\n          var data = {};\n          data[field.id] = {\n            multi: true,\n            added: added,\n            removed: removed\n          };\n          that._addAllData(data);\n        };\n\n        // overwrite multiplex set value\n        field.setValue = function(v) {\n          // used to keep track of initially loaded multiplex data\n          field.detailData = v;\n          var multiselectValues = null;\n          if (v && v.length) {\n            multiselectValues = v.map(function(val) {\n              return val[field.id]\n            });\n          }\n\n          multiselectSetValue(multiselectValues);\n          var newOptions = field.input.select2('data') || [];\n          setSingleSelectOptions(newOptions);\n          singleSelectChange();\n        };\n\n        field.disabled = function(bool) {\n          field.input.prop(\"disabled\", bool);\n          field.subFieldList.forEach(function(subField) {\n            subField.disabled(bool);\n          });\n          if (bool) {\n            nameContainer1.text(\"Select to inspect\");\n          } else {\n            nameContainer1.text(\"Select to edit\");\n          }\n        };\n\n        field.parseValue = function(value) {\n          var v = value;\n          if (v && v.length) {\n            v = v.map(function(opt) {\n              var valMap = {};\n              valMap[field.id] = opt[field.id];\n              for (var subFieldId in opt) {\n                field.subFieldList.forEach(function(subField) {\n                  if (subField.id === subFieldId) {\n                    valMap[subField.id] = subField.parseValue(opt[subFieldId]);\n                  }\n                });\n              }\n              return valMap;\n            });\n          } else {\n            v = null;\n          }\n          return v;\n        };\n\n        field.updateSubFieldUnitOpts = function(val) {\n          var curOpts;\n          field.data.options.forEach(function(opt) {\n            if (opt.id === val) {\n              curOpts = opt;\n            }\n          });\n          field.subFieldList.forEach(function(subField) {\n            if (subField.data.hasMultiplexUnit) {\n              if (curOpts && curOpts.hasOwnProperty(\"unitOptions\")) {\n                subField.setUnitOpts(curOpts.unitOptions[subField.id]);\n              } else {\n                subField.setUnitOpts(null);\n              }\n            }\n          })\n        };\n\n        field.multiOnChange = function(added, removed) {\n          field._changeMultiFieldValue(added, removed);\n          var v = field.getValue();\n          var curData = field.detailData;\n          var curIds = [];\n          var curOpt = null;\n          //reshape data for saveback\n          if (curData) {\n            curIds = curData.map(function(val) {\n              return val[field.id]\n            });\n          }\n\n          var newMultiplexVal = [];\n          var selectList = [];\n          if (v) {\n            v.forEach(function(selectedVal) {\n              if (curData) {\n                curData.forEach(function(val) {\n                  if (val[field.id] === selectedVal) {\n                    newMultiplexVal.push(val)\n                  }\n                });\n              }\n              // cases when adding new data\n              if (curIds.indexOf(selectedVal) < 0) {\n                var newVal = {};\n                newVal[field.id] = selectedVal;\n\n                field.updateSubFieldUnitOpts(selectedVal);\n                field.subFieldList.forEach(function(subfield) {\n                  // special handling for subfield which has multiplexUnit\n                  if (subfield.hasUnits) {\n                    if (subfield.data.hasMultiplexUnit) {\n                      subfield.disabled(false);\n                      field.data.options.forEach(function(opt) {\n                        if (opt.id === selectedVal) {\n                          var val = {\n                            value: null,\n                            unit: subfield.units[0]\n                          };\n                          newVal[subfield.id] = subfield.parseValue(val);\n                        }\n                      });\n                    } else {\n                      if (subfield.data.units) {\n                        if (subfield.data.units.length > 1) {\n                          subfield.disabled(false);\n                        }\n                      }\n                      var val = {\n                        value: null,\n                        unit: subfield.defaultUnit\n                      };\n                      newVal[subfield.id] = subfield.parseValue(val);\n                    }\n                  } else {\n                    newVal[subfield.id] = subfield.parseValue(null);\n                  }\n                });\n                newMultiplexVal.push(newVal);\n              }\n            });\n\n            // make data for single select options\n            v.forEach(function(selectVal) {\n              field.data.options.forEach(function(opt) {\n                if (opt.id === selectVal) {\n                  selectList.push(opt);\n                }\n              });\n            });\n\n            var selected = field.singleSelectValue();\n            for (var i = 0; i < v.length; i++) {\n              if (added && (added.id === v[i])) {\n                curOpt = v[i];\n                break;\n              } else if (i === 0) {\n                curOpt = v[i];\n              } else if (v[i] === selected) {\n                curOpt = v[i];\n              }\n            }\n          }\n\n          field.detailData = newMultiplexVal;\n          setSingleSelectOptions(selectList, curOpt);\n          singleSelectChange();\n        };\n\n        field.getText = function(v) {\n          if (v === null) {\n            return \"\";\n          }\n          // get subfields that is selected from the checkbox\n          if (field.id in that.globalSelectedMultiplexSubfield) {\n            var checkedSubfields = that.globalSelectedMultiplexSubfield[field.id];\n            var returnVal = [];\n            for (var valIdx in v) {\n              var subV = v[valIdx];\n              var subText = [];\n              for (var optId in field.data.options) {\n                var opt = field.data.options[optId];\n                if (opt.id === subV[field.id]) {\n                  subText.push(opt.text);\n                }\n              }\n              field.subFieldList.forEach(function(subField) {\n                if (checkedSubfields.indexOf(subField.id) >= 0) {\n                  var x = subField.getText(subV[subField.id]);\n                  subText.push(subField.name + \": \" + x);\n                }\n              });\n              returnVal.push(\"{\" + subText.join(\", \") + \"}\");\n            }\n            return returnVal.join(\";\");\n          }\n        };\n\n        field.parseText = function(v) {\n          if (v === null) {\n            return \"\";\n          } else {\n            var returnVal = [];\n            for (var valIdx in v) {\n              var subV = v[valIdx];\n              var subText = [];\n              for (var optId in field.data.options) {\n                var opt = field.data.options[optId];\n                if (opt.id === subV[field.id]) {\n                  subText.push(opt.text);\n                }\n              }\n              field.subFieldList.forEach(function(subField) {\n                var x = subField.getText(subV[subField.id]);\n                if (x) {\n                  subText.push(x);\n                }\n              });\n              returnVal.push(subText);\n            }\n            return returnVal;\n          }\n        };\n\n        field.checkMultiplexCompletion = function(valList) {\n          var valCount = 0;\n          var completionPct = 0;\n          var include = false;\n\n          function getSubfieldStatus(vals) {\n            var req = 0;\n            var fill = 0;\n            for (var subFieldId in field.subFieldList) {\n              var subField = field.subFieldList[subFieldId];\n              var curVal = vals[subField.id];\n              if (subField.required) {\n                include = true;\n                req++;\n                if (typeof curVal === 'object' && curVal) {\n                  if (curVal.value) {\n                    fill++;\n                  }\n                } else if (curVal) {\n                  fill++;\n                }\n              }\n            }\n            return fill / req;\n          }\n\n          // for cases has value in multiplex field\n          if (valList) {\n            if (valList.length > 0) {\n              for (var idx in valList) {\n                valCount++;\n                var vals = valList[idx];\n                completionPct += getSubfieldStatus(vals);\n              }\n            } else if (field.required) {\n              include = true;\n              valCount = 1;\n            }\n          } else if (field.required) {\n            include = true;\n            valCount = 1;\n          }\n\n          return {\n            include: include,\n            completionPct: completionPct / valCount\n          };\n        };\n\n        // valList contains all of the vals for selected val\n        field.applyMultiplexSubFieldColor = function(valList) {\n          function updateSubFieldWarningMap(vals) {\n            for (var subFieldId in field.subFieldList) {\n              var subField = field.subFieldList[subFieldId];\n              // loop through each well's multiplexval list\n              if (vals === null) {\n                if (field.required && subField.required) {\n                  subFieldWarningMap[subField.id].warningStatus.push(true);\n                }\n              } else if (typeof (vals) === \"object\") {\n                if (vals.length === 0) {\n                  if (field.required && subField.required) {\n                    subFieldWarningMap[subField.id].warningStatus.push(true);\n                  }\n                } else {\n                  for (var multiplexIdx in vals) {\n                    var curVal = vals[multiplexIdx][subField.id];\n                    if (subField.required) {\n                      if (typeof (curVal) === 'object' && curVal) {\n                        if (!curVal.value) {\n                          subFieldWarningMap[subField.id].warningStatus.push(true);\n                        } else {\n                          subFieldWarningMap[subField.id].warningStatus.push(false);\n                        }\n                      } else if (!curVal) {\n                        subFieldWarningMap[subField.id].warningStatus.push(true);\n                      } else {\n                        subFieldWarningMap[subField.id].warningStatus.push(false);\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n\n          var subFieldWarningMap = {};\n          field.subFieldList.forEach(function(subField) {\n            if (subField.required) {\n              subFieldWarningMap[subField.id] = {\n                field: subField,\n                warningStatus: []\n              };\n            }\n          });\n\n          valList.forEach(function(multiplexVals) {\n            updateSubFieldWarningMap(multiplexVals);\n          });\n          // turn off main field when all subfield are filled\n\n          var requiredSubField = [];\n          var mainFieldStatus = [];\n          for (var subFieldId in subFieldWarningMap) {\n            var subField = subFieldWarningMap[subFieldId].field;\n            if (subFieldWarningMap[subFieldId].warningStatus.indexOf(true) >= 0) {\n              var text = subField.name + \" is a required subfield for \" + field.name + \", please make sure all \" + field.name + \" have \" + subField.name;\n              if (field.required) {\n                that.fieldWarningMsg(subField, text, true);\n                mainFieldStatus.push(true);\n              } else {\n                that.fieldWarningMsg(subField, text, true);\n                mainFieldStatus.push(true);\n              }\n            } else {\n              that.fieldWarningMsg(subField, \"none\", false);\n              mainFieldStatus.push(false);\n            }\n          }\n          var mainFieldWarning = false;\n          if (mainFieldStatus.indexOf(true) < 0) {\n            mainFieldWarning = false;\n          } else {\n            mainFieldWarning = true;\n          }\n          var warningText;\n          if (field.required) {\n            warningText = field.name + \" is a required field, please also fix missing required subfield(s) below\";\n          } else {\n            warningText = field.name + \" is not a required field, please fix missing required subfield(s) below or remove selected \" + field.name;\n          }\n          that.fieldWarningMsg(field, warningText, mainFieldWarning);\n        };\n\n        field.parseMainFieldVal = function(val) {\n          var optMap = field.data.options;\n          for (var idx = 0; idx < optMap.length; idx++) {\n            var curOpt = optMap[idx];\n            if (curOpt.id === val) {\n              return curOpt.text\n            }\n          }\n        };\n      },\n\n      _deleteDialog: function(field) {\n        var that = this;\n\n        var valMap = field.allSelectedMultipleVal;\n        var valToRemove;\n        if (valMap) {\n          valToRemove = Object.keys(valMap);\n        } else {\n          valToRemove = [];\n        }\n\n\n        var dialogDiv = $(\"<div/>\").addClass(\"delete-dialog modal\");\n        $('body').append(dialogDiv);\n\n        function killDialog() {\n          dialogDiv.hide();\n          dialogDiv.remove();\n        }\n\n        var dialogContent = $(\"<div/>\").addClass(\"modal-content\").appendTo(dialogDiv);\n        var tableArea = $(\"<div/>\").appendTo(dialogContent);\n        var buttonRow = $(\"<div/>\").addClass(\"dialog-buttons\").css(\"justify-content\", \"flex-end\").appendTo(dialogContent);\n\n        if (valToRemove.length > 0) {\n          // apply CSS property for table\n          $(\"<p/>\").text(field.name + \" in selected wells: choose items to delete and click the delete button below\").appendTo(tableArea);\n\n          var table = that._deleteDialogTable(field, valMap);\n          table.appendTo(tableArea);\n          table.addClass(\"plate-popout-table\");\n          table.find('td').addClass(\"plate-popout-td\");\n          table.find('th').addClass(\"plate-popout-th\");\n          table.find('tr').addClass(\"plate-popout-tr\");\n          if (!that.readOnly) {\n            var deleteCheckedButton = $(\"<button class='multiple-field-manage-delete-button'>Delete Checked Items</button>\");\n            buttonRow.append(deleteCheckedButton);\n            deleteCheckedButton.click(function() {\n              table.find(\"input:checked\").each(function() {\n                var val = this.value;\n                field.multiOnChange(null, {id: val});\n              });\n              // refresh selected fields after updating the multiplex field value\n              that.decideSelectedFields();\n              killDialog();\n            });\n          }\n\n        } else {\n          $(\"<p/>\").text(\"No \" + field.name + \" in the selected wells\").appendTo(tableArea);\n        }\n\n        var cancelButton = $(\"<button>Cancel</button>\");\n        buttonRow.append(cancelButton);\n        cancelButton.click(killDialog);\n\n        dialogDiv.show();\n\n        window.onclick = function(event) {\n          if (event.target == dialogDiv[0]) {\n            killDialog();\n          }\n        }\n      },\n\n      _deleteDialogTable: function(field, valMap) {\n        var that = this;\n        var colName = [field.name, \"Counts\"]; //Added because it was missing... no idea what the original should have been\n        if (!that.readOnly) {\n          colName.push(\"Delete\");\n        }\n        var table = $('<table/>');\n        var thead = $('<thead/>').appendTo(table);\n        var tr = $('<tr/>').appendTo(thead);\n\n        tr.append(colName.map(function(text) {\n          return $('<th/>').text(text);\n        }));\n\n        var tbody = $(\"<tbody/>\").appendTo(table);\n\n        field.data.options.forEach(function(opt) {\n          if (opt.id in valMap) {\n            var tr = $('<tr/>').appendTo(tbody);\n            var checkbox = $(\"<input type='checkbox'>\").prop(\"value\", opt.id);\n            $(\"<td/>\").text(opt.text).appendTo(tr);\n            $(\"<td/>\").text(valMap[opt.id]).appendTo(tr);\n            if (!that.readOnly) {\n              $(\"<td/>\").append(checkbox).appendTo(tr);\n            }\n          }\n        });\n\n        return table;\n      },\n\n      _createDeleteButton: function(field) {\n        var that = this;\n        var deleteButton = $(\"<button/>\").addClass(\"plate-setup-remove-all-button\");\n        deleteButton.id = field.id + \"Delete\";\n        deleteButton.text(\"Manage \" + field.name + \"...\");\n        var buttonContainer = that._createElement(\"<div></div>\").addClass(\"plate-setup-remove-all-button-container\");\n        buttonContainer.append(deleteButton);\n\n        field.deleteButton = deleteButton;\n        field.root.find(\".plate-setup-tab-field-right-side\").append(buttonContainer);\n\n        deleteButton.click(function() {\n          that._deleteDialog(field);\n        });\n      }\n\n    };\n  }\n})(jQuery, fabric);","var plateLayOutWidget = plateLayOutWidget || {};\n\n(function($, fabric) {\n\n  plateLayOutWidget.engine = function(THIS) {\n    // Methods which look after data changes and stack up accordingly\n    // Remember THIS points to plateLayOutWidget and 'this' points to engine\n    // Use THIS to refer parent this.\n    return {\n      engine: {\n\n        derivative: {},\n        colorMap: new Map(),\n        stackUpWithColor: {},\n        stackPointer: 2,\n\n        wellEmpty: function(well) {\n          for (var prop in well) {\n            var curVal = well[prop];\n            if (curVal !== null && curVal !== undefined) {\n              if (Array.isArray(curVal)) {\n                if (curVal.length > 0) {\n                  return false;\n                }\n              } else {\n                return false;\n              }\n            }\n          }\n          return true;\n        },\n\n        searchAndStack: function() {\n          // This method search and stack the change we made.\n          this.stackUpWithColor = {};\n          this.stackPointer = 1;\n          var derivativeJson = {};\n          for (var idx in this.derivative) {\n            var data = this.derivative[idx];\n            var wellData = {};\n            for (var i = 0; i < THIS.globalSelectedAttributes.length; i++) {\n              var attr = THIS.globalSelectedAttributes[i];\n\n              if (attr in THIS.globalSelectedMultiplexSubfield) {\n                var selectedSubFields = THIS.globalSelectedMultiplexSubfield[attr];\n                var newMultiplexVal = [];\n                for (var multiplexIdx in data[attr]) {\n                  var curMultiplexVals = data[attr][multiplexIdx];\n                  var newVal = {};\n                  newVal[attr] = curMultiplexVals[attr];\n                  selectedSubFields.forEach(function(subFieldId) {\n                    newVal[subFieldId] = curMultiplexVals[subFieldId];\n                  });\n                  newMultiplexVal.push(newVal);\n                }\n                wellData[attr] = newMultiplexVal;\n              } else {\n                if (data[attr] != null) {\n                  wellData[attr] = data[attr];\n                }\n              }\n            }\n            if ($.isEmptyObject(wellData)) {\n              derivativeJson[idx] = null;\n            } else {\n              derivativeJson[idx] = JSON.stringify(wellData);\n            }\n          }\n\n          while (!$.isEmptyObject(derivativeJson)) {\n            var keys = Object.keys(derivativeJson).map(function(k) {\n              return parseFloat(k, 10);\n            });\n            keys.sort(function(a, b) {\n              return a - b;\n            });\n\n            var refDerivativeIndex = keys[0];\n            var referenceDerivative = derivativeJson[refDerivativeIndex];\n            var arr = [];\n\n            if (!referenceDerivative) {\n              // if no checked box has value, push it to first spot\n              if (this.stackUpWithColor[0]) {\n                this.stackUpWithColor[0].push(refDerivativeIndex);\n              } else {\n                this.stackUpWithColor[0] = [refDerivativeIndex];\n              }\n\n              delete derivativeJson[refDerivativeIndex];\n            } else {\n              // if checked boxes have values\n              for (var i = 0; i < keys.length; i++) {\n                var idx = keys[i];\n                if (referenceDerivative == derivativeJson[idx]) {\n                  arr.push(idx);\n                  this.stackUpWithColor[this.stackPointer] = arr;\n                  delete derivativeJson[idx];\n                }\n              }\n              if (arr.length > 0)\n                this.stackPointer++;\n            }\n          }\n        },\n\n        applyColors: function() {\n\n          var wholeNoTiles = 0;\n          var wholePercentage = 0;\n\n          THIS.addBottomTableHeadings();\n\n          for (var i = 0; i < THIS.allTiles.length; i++) {\n            var tile = THIS.allTiles[i];\n            THIS.setTileVisible(tile, false);\n          }\n\n          for (var color = 0; color < this.stackPointer; color++) {\n            var arr = this.stackUpWithColor[color];\n            if (arr) {\n              THIS.addBottomTableRow(color, arr);\n\n              for (var tileIndex in arr) {\n                wholeNoTiles++;\n                var index = this.stackUpWithColor[color][tileIndex];\n                var tile = THIS.allTiles[index];\n                var well = this.derivative[index];\n                this.colorMap.set(index, color);\n                THIS.setTileColor(tile, color);\n                // Checks if all the required fields are filled\n                var completion = this.checkCompletion(well, tile);\n                THIS.setTileComplete(tile, completion == 1);\n                wholePercentage = wholePercentage + completion;\n              }\n            }\n          }\n\n          wholePercentage = Math.floor(100 * wholePercentage / wholeNoTiles);\n\n          if (isNaN(wholePercentage)) {\n            THIS.overLayTextContainer.text(\"Completion Percentage: 0%\");\n          } else {\n            THIS.overLayTextContainer.text(\"Completion Percentage: \" + wholePercentage + \"%\");\n          }\n        },\n\n        checkCompletion: function(wellData, tile) {\n          var req = 0;\n          var fill = 0;\n          for (var i = 0; i < THIS.fieldList.length; i++) {\n            var field = THIS.fieldList[i];\n            if (field.checkMultiplexCompletion) {\n              // also apply color\n              var multiplexStatus = field.checkMultiplexCompletion(wellData[field.id]);\n              if (multiplexStatus.include) {\n                fill += multiplexStatus.completionPct;\n                req++;\n              }\n            } else {\n              if (field.required) {\n                req++;\n                if (wellData[field.id] !== null) {\n                  fill++;\n                }\n              }\n            }\n          }\n          if (req === fill) {\n            return 1;\n          }\n          return fill / req;\n        },\n      }\n    }\n  }\n})(jQuery, fabric);","var plateLayOutWidget = plateLayOutWidget || {};\n\n(function($, fabric) {\n\n  plateLayOutWidget.fabricEvents = function() {\n    // This object contains Menu items and how it works;\n    return {\n      colorToIndex: {},\n      startCoords: {\n        x: 0,\n        y: 0\n      },\n      focalWell: {\n        row: 0,\n        col: 0\n      },\n      selectedAreas: [],\n\n      _clickCoords: function(evt) {\n        //Get XY Coords for a given event. \n        var rect = evt.e.target.getBoundingClientRect();\n        return {\n          x: evt.e.clientX - rect.left,\n          y: evt.e.clientY - rect.top\n        };\n      },\n\n      _fabricEvents: function() {\n        // Set up event handling. \n        var that = this;\n\n        $(that.target).on(\"getPlates\", function(evt, data) {\n          // This method should be compatable to redo/undo.\n          that.getPlates(JSON.parse(data));\n        });\n\n        that.mainFabricCanvas.on(\"mouse:down\", function(evt) {\n          // Start selecting new area\n          that.selecting = true;\n          var coords = that._clickCoords(evt);\n\n          var areas = that.selectedAreas.slice();\n          var focalWell = that.focalWell;\n          var startCoords = that._wellToCoords(focalWell, true);\n          var rect = that._coordsToRect(startCoords, coords);\n\n          if (evt.e.ctrlKey) {\n            //adding new area\n            startCoords = coords;\n            rect = that._coordsToRect(startCoords, coords);\n            focalWell = that._coordsToWell(startCoords);\n            if (evt.e.shiftKey) {\n              //replacing existing areas\n              areas = [that._rectToArea(rect)];\n            } else {\n              areas.push(that._rectToArea(rect));\n            }\n          } else {\n            if (evt.e.shiftKey) {\n              //Altering last area\n              areas[areas.length - 1] = that._rectToArea(rect);\n            } else {\n              //Creating new area\n              startCoords = coords;\n              rect = that._coordsToRect(startCoords, coords);\n              focalWell = that._coordsToWell(startCoords);\n              areas = [that._rectToArea(rect)];\n            }\n          }\n\n          that.startCoords = startCoords;\n          that.setSelection(areas, focalWell);\n          that.mainFabricCanvas.renderAll();\n        });\n\n        that.mainFabricCanvas.on(\"mouse:move\", function(evt) {\n          if (that.selecting) {\n            // continue selecting new area\n            var areas = that.selectedAreas.slice();\n            var endCoords = that._clickCoords(evt);\n            var rect = that._coordsToRect(that.startCoords, endCoords);\n            var area = that._rectToArea(rect);\n            if (area) {\n              areas[areas.length - 1] = area;\n            }\n\n            that.setSelection(areas, that.focalWell);\n            that.mainFabricCanvas.renderAll();\n          }\n\n        });\n\n        that.mainFabricCanvas.on(\"mouse:up\", function(evt) {\n          // finish selecting new area\n          that.selecting = false;\n          var areas = that.selectedAreas.slice();\n          var endCoords = that._clickCoords(evt);\n          var rect = that._coordsToRect(that.startCoords, endCoords);\n          var area = that._rectToArea(rect);\n          if (area) {\n            areas[areas.length - 1] = area;\n          }\n\n          that.setSelection(areas, that.focalWell);\n          that.decideSelectedFields();\n          that.mainFabricCanvas.renderAll();\n          that._trigger(\"selectedWells\", null, {selectedAddress: that.getSelectedAddress()});\n          if (that.options.scrollToGroup === undefined || that.options.scrollToGroup) {\n            that.selectObjectInBottomTab();\n          }\n        });\n      },\n\n      setSelection: function(areas, focalWell) {\n        this.selectedAreas = areas;\n        this.focalWell = focalWell;\n        this.allSelectedObjects = this._areasToTiles(areas);\n        this._setSelectedTiles();\n        this._setFocalWellRect(this.focalWell);\n        document.activeElement.blur();\n      },\n\n      _setFocalWellRect: function(well) {\n        var flag;\n        // check if not allow to add or delete existing wells\n        if (this.disableAddDeleteWell) {\n          var address = this.locToAddress({\n            r: well.row,\n            c: well.col\n          });\n          if (this.addressAllowToEdit.indexOf(address) < 0) {\n            flag = false;\n            this.setFieldsDisabled(true);\n          } else {\n            flag = true;\n            this.setFieldsDisabled(false);\n          }\n        } else if (well) {\n          flag = true;\n        }\n\n        if (flag) {\n          var rect = this._areaToRect(this._wellToArea(well));\n          var strokeWidth = 2;\n          if (this.focalWellRect) {\n            //update focalWellRect\n            this.focalWellRect.top = rect.top;\n            this.focalWellRect.left = rect.left;\n            this.focalWellRect.width = rect.width - strokeWidth;\n            this.focalWellRect.height = rect.height - strokeWidth;\n          } else {\n            //create focalWellRect\n            this.focalWellRect = new fabric.Rect({\n              width: rect.width - strokeWidth,\n              height: rect.height - strokeWidth,\n              left: rect.left,\n              top: rect.top,\n              fill: null,\n              strokeWidth: strokeWidth,\n              stroke: \"black\",\n              selectable: false\n            });\n            this.mainFabricCanvas.add(this.focalWellRect);\n          }\n        } else {\n          //clear focalWellRect\n          this.mainFabricCanvas.remove(this.focalWellRect);\n          this.focalWellRect = null;\n        }\n      },\n\n      _setSelectedTiles: function() {\n        // Update selected tile display only\n        var selectedTiles = this.allSelectedObjects;\n        this.allTiles.forEach(function(tile) {\n          var selected = selectedTiles.indexOf(tile) >= 0;\n          tile.highlight.visible = selected;\n        })\n      },\n\n      _getSelectedWells: function() {\n        var that = this;\n        return this.allSelectedObjects.map(function(tile) {\n          var well = that.engine.derivative[tile.index];\n          if (!well) {\n            well = that.defaultWell;\n          }\n          return well;\n        });\n      },\n\n      _getCommonFields: function(wells) {\n        if (wells.length) {\n          var referenceWell = wells[0];\n          var referenceFields = $.extend(true, {}, referenceWell);\n          for (var i = 1; i < wells.length; i++) {\n            var fields = wells[i];\n            for (var field in referenceFields) {\n              if (Array.isArray(referenceFields[field])) {\n                var refArr = referenceFields[field];\n                var agrArr = [];\n                for (var j = 0; j < refArr.length; j++) {\n                  var v = refArr[j];\n                  if (v && typeof (v) === \"object\") {\n                    if (this.containsObject(v, fields[field])) {\n                      agrArr.push(v);\n                    }\n                  } else {\n                    if ($.inArray(v, fields[field]) >= 0) {\n                      agrArr.push(v);\n                    }\n                  }\n                }\n                referenceFields[field] = agrArr;\n              } else {\n                if (fields[field] && typeof (fields[field]) === \"object\" && referenceFields[field] && typeof (referenceFields[field]) === \"object\") {\n                  if ((fields[field].value !== referenceFields[field].value) || (fields[field].unit !== referenceFields[field].unit)) {\n                    delete referenceFields[field];\n                  }\n                } else if (referenceFields[field] != fields[field]) {\n                  delete referenceFields[field];\n                }\n              }\n            }\n          }\n          return referenceFields\n        } else {\n          return {};\n        }\n      },\n\n      containsObject: function(obj, list) {\n        var equality = [];\n        if (list) {\n          list.forEach(function(val) {\n            //evaluate val and obj\n            var evaluate = [];\n            Object.keys(val).forEach(function(listKey) {\n              if (Object.keys(obj).indexOf(listKey) >= 0) {\n                var curVal = val[listKey];\n                if (typeof (curVal) === 'object' && curVal) {\n                  if (obj[listKey]) {\n                    evaluate.push((curVal.unit === obj[listKey].unit) && (curVal.value === obj[listKey].value));\n                  } else {\n                    // when obj[listKey] is null but curVal is not\n                    evaluate.push(false);\n                  }\n                } else {\n                  evaluate.push(curVal === obj[listKey]);\n                }\n              }\n            });\n            equality.push(evaluate.indexOf(false) < 0);\n          });\n          return equality.indexOf(true) >= 0;\n        } else {\n          return false;\n        }\n      },\n\n      _getCommonWell: function(wells) {\n        if (wells.length) {\n          var referenceWell = wells[0];\n          var referenceFields = $.extend(true, {}, referenceWell);\n          for (var i = 1; i < wells.length; i++) {\n            var well = wells[i];\n            var fields = well;\n            for (var field in referenceFields) {\n              if (Array.isArray(referenceFields[field])) {\n                var refArr = referenceFields[field];\n                var agrArr = [];\n                for (var j = 0; j < refArr.length; j++) {\n                  var v = refArr[j];\n                  // for multiplex field\n                  if (typeof (refArr[j]) === \"object\") {\n                    if (this.containsObject(v, fields[field])) {\n                      agrArr.push(v);\n                    }\n                  } else {\n                    if ($.inArray(v, fields[field]) >= 0) {\n                      agrArr.push(v);\n                    }\n                  }\n                }\n                referenceFields[field] = agrArr;\n              } else {\n                if (fields[field] && typeof (fields[field]) === \"object\" && referenceFields[field] && typeof (referenceFields[field]) === \"object\") {\n                  if ((fields[field].value !== referenceFields[field].value) || (fields[field].unit !== referenceFields[field].unit)) {\n                    referenceFields[field] = null;\n                  }\n                } else if (referenceFields[field] != fields[field]) {\n                  referenceFields[field] = null;\n                }\n\n              }\n            }\n          }\n          return referenceFields;\n        } else {\n          return this.defaultWell;\n        }\n      },\n\n      _getAllMultipleVal: function(wells) {\n        var multipleFieldList = this.multipleFieldList;\n\n        multipleFieldList.forEach(function(multiplexField) {\n          if (wells.length) {\n            var curMultipleVal = {};\n            wells.forEach(function(wellData) {\n              var id = multiplexField.id;\n              if (wellData[id]) {\n                if (wellData[id].length > 0) {\n                  wellData[id].forEach(function(multipleVal) {\n                    if (typeof (multipleVal) === 'object') {\n                      if (multipleVal[id] in curMultipleVal) {\n                        curMultipleVal[multipleVal[id]]++;\n                      } else {\n                        curMultipleVal[multipleVal[id]] = 1;\n                      }\n                    } else {\n                      if (multipleVal in curMultipleVal) {\n                        curMultipleVal[multipleVal]++;\n\n                      } else {\n                        curMultipleVal[multipleVal] = 1;\n                      }\n                    }\n                  })\n                }\n              }\n            });\n            multiplexField.allSelectedMultipleVal = curMultipleVal;\n          } else {\n            multiplexField.allSelectedMultipleVal = null\n          }\n        });\n      },\n\n      decideSelectedFields: function() {\n        var wells = this._getSelectedWells();\n        this._getAllMultipleVal(wells);\n        this.applyFieldWarning(wells);\n        var well = this._getCommonWell(wells);\n        this._addDataToTabFields(well);\n      },\n\n      // get well value differences for each well in wellsHash\n      getDifferentWellsVals: function(wellsHash) {\n        var wells = [];\n        for (var wellId in wellsHash) {\n          wells.push(wellsHash[wellId]);\n        }\n        var differentWellsVals = {};\n        if (wells.length > 1) {\n          var commonWell = this._getCommonWell(wells);\n          var allFieldVal = {};\n          for (var fieldIdx in wellsHash[0]) {\n            allFieldVal[fieldIdx] = [];\n          }\n          for (var wellIdx in wells) {\n            var diffWellVal = {};\n            var curWellData = wells[wellIdx];\n            for (var fieldId in curWellData) {\n              var commonVal = commonWell[fieldId];\n              var curVal = curWellData[fieldId];\n              var newVal = null;\n              if (Array.isArray(curVal)) {\n                // get uncommonVal\n                newVal = [];\n                for (var idx = 0; idx < curVal.length; idx++) {\n                  var curMultiVal = curVal[idx];\n                  // multiplex field\n                  if (curMultiVal && typeof (curMultiVal === \"object\")) {\n                    if (!this.containsObject(curMultiVal, commonVal)) {\n                      newVal.push(curMultiVal);\n                      if (!this.containsObject(curMultiVal, allFieldVal[fieldId])) {\n                        allFieldVal[fieldId].push(curMultiVal);\n                      }\n                    }\n                  } else {\n                    if (commonVal.indexOf(curMultiVal) >= 0) {\n                      newVal.push(curMultiVal);\n                      if (!allFieldVal[fieldId].indexOf(curMultiVal) >= 0) {\n                        allFieldVal[fieldId].push(curMultiVal);\n                      }\n                    }\n                  }\n                }\n              } else if (curVal && typeof (curVal) === \"object\") {\n                if (commonVal && typeof (commonVal) === \"object\") {\n                  if (!((curVal.value === commonVal.value) || (curVal.unit === commonVal.unit))) {\n                    newVal = curVal;\n                    if (!this.containsObject(curVal, allFieldVal[fieldId])) {\n                      allFieldVal[fieldId].push(curVal);\n                    }\n                  }\n                } else {\n                  newVal = curVal;\n                  if (!this.containsObject(curVal, allFieldVal[fieldId])) {\n                    allFieldVal[fieldId].push(curVal);\n                  }\n                }\n              } else if (curVal !== commonVal) {\n                newVal = curVal;\n                if (!allFieldVal[fieldId].indexOf(curVal) >= 0) {\n                  allFieldVal[fieldId].push(curVal);\n                }\n              }\n              diffWellVal[fieldId] = newVal;\n            }\n\n\n            differentWellsVals[wellIdx] = diffWellVal;\n          }\n\n          // clean up step for fields that are empty\n          for (var fieldId in allFieldVal) {\n            if (allFieldVal[fieldId].length === 0) {\n              for (var wellIdx in differentWellsVals) {\n                delete differentWellsVals[wellIdx][fieldId];\n              }\n            }\n          }\n\n          return differentWellsVals;\n        } else if (wellsHash[0]) {\n          var well = {};\n          for (var fieldId in wellsHash[0]) {\n            var curVal = wellsHash[0][fieldId];\n            if (Array.isArray(curVal)) {\n              if (curVal.length > 0) {\n                well[fieldId] = curVal\n              }\n            } else if (curVal) {\n              well[fieldId] = curVal;\n            }\n          }\n          return {\n            0: well\n          };\n        }\n      },\n\n      // get all wells that has data\n      getWellSetAddressWithData: function() {\n        var address = [];\n        var derivative = this.engine.derivative;\n        for (var id in derivative) {\n          address.push(this.indexToAddress(id));\n        }\n        return address;\n      }\n\n    };\n  }\n})(jQuery, fabric);","var plateLayOutWidget = plateLayOutWidget || {};\n\nplateLayOutWidget.assets = function() {\n  return {\n    _assets: {\n      doImg: '&#10003;',\n      dontImg: '',\n      warningImg: '&#9888;'\n    }\n  };\n};\n","var plateLayOutWidget = plateLayOutWidget || {};\n\n(function($, fabric) {\n\n  plateLayOutWidget.interface = function() {\n    // interface holds all the methods to put the interface in place\n    return {\n\n      _createInterface: function() {\n\n        var divIdentifier = '<div></div>';\n        this.container = this._createElement(divIdentifier).addClass(\"plate-setup-wrapper\");\n        this.topSection = this._createElement(divIdentifier).addClass(\"plate-setup-top-section\");\n\n        this.topLeft = this._createElement(divIdentifier).addClass(\"plate-setup-top-left\");\n        this.topRight = this._createElement(divIdentifier).addClass(\"plate-setup-top-right\");\n\n        this.overLayContainer = this._createElement(divIdentifier).addClass(\"plate-setup-overlay-container\");\n        this.canvasContainer = this._createElement(divIdentifier).addClass(\"plate-setup-canvas-container\");\n\n        this._createOverLay();\n        $(this.topLeft).append(this.overLayContainer);\n\n        this._createCanvas();\n        $(this.topLeft).append(this.canvasContainer);\n\n\n        $(this.topSection).append(this.topLeft);\n        $(this.topSection).append(this.topRight);\n\n        $(this.container).append(this.topSection);\n        $(this.element).append(this.container);\n\n        this._initiateFabricCanvas();\n\n        this._createTabAtRight();\n        this._createTabs();\n\n        this._placePresetTabs();\n        // Bottom of the screen\n        this._bottomScreen();\n        // Canvas\n        this._canvas();\n\n        this.bottomForFirstTime();\n\n        var that = this;\n        this._setShortcuts();\n        $(document.body).keyup(function(e) {\n          that._handleShortcuts(e);\n        });\n\n        this._configureUndoRedoArray();\n      },\n\n      _createElement: function(element) {\n        return $(element);\n      },\n\n      _setShortcuts: function() {\n        var that = this;\n        window.addEventListener(\"cut\", function(e) {\n          if (document.activeElement == document.body) {\n            that.copyCriteria();\n            that.clearCriteria();\n            e.preventDefault();\n          }\n        });\n        window.addEventListener(\"copy\", function(e) {\n          if (document.activeElement == document.body) {\n            that.copyCriteria();\n            e.preventDefault();\n          }\n        });\n        window.addEventListener(\"paste\", function(e) {\n          if (document.activeElement == document.body) {\n            that.pasteCriteria();\n            e.preventDefault();\n          }\n        });\n      },\n\n      _handleShortcuts: function(e) {\n        if (document.activeElement === document.body) {\n          if (e.keyCode == 46) {\n            this.clearCriteria();\n            e.preventDefault();\n          } else if (e.ctrlKey || e.metaKey) {\n            if (e.keyCode == 90) {\n              if (e.shiftKey) {\n                this.redo();\n              } else {\n                this.undo();\n              }\n              e.preventDefault();\n            } else if (e.keyCode == 89) {\n              this.redo();\n              e.preventDefault();\n            }\n          }\n        }\n      },\n    };\n  }\n})(jQuery, fabric);","var plateLayOutWidget = plateLayOutWidget || {};\n\n(function($, fabric) {\n\n  plateLayOutWidget.loadPlate = function(THIS) {\n    // Methods which look after data changes and stack up accordingly\n    // Remember THIS points to plateLayOutWidget and 'this' points to engine\n    return {\n\n      getPlates: function(data) {\n        //sanitize input\n        var derivative = {};\n        for (var index in data.derivative) {\n          var well = data.derivative[index];\n          derivative[index] = this.sanitizeWell(well);\n        }\n\n        var checkboxes = data.checkboxes || [];\n        var selection = this.sanitizeAreas(data.selectedAreas, data.focalWell);\n\n        var sanitized = {\n          \"derivative\": derivative,\n          \"checkboxes\": checkboxes,\n          \"selectedAreas\": selection.selectedAreas,\n          \"focalWell\": selection.focalWell\n        };\n\n        this.setData(sanitized);\n      },\n\n      sanitizeAreas: function(selectedAreas, focalWell) {\n        var that = this;\n        var rows = this.dimensions.rows;\n        var cols = this.dimensions.cols;\n\n        if (!selectedAreas) {\n          selectedAreas = [];\n        }\n        if (selectedAreas.length) {\n          selectedAreas = selectedAreas.map(function(area) {\n            return {\n              minCol: that._coordIndex(Math.min(area.minCol, area.maxCol), cols),\n              minRow: that._coordIndex(Math.min(area.minRow, area.maxRow), rows),\n              maxCol: that._coordIndex(Math.max(area.minCol, area.maxCol), cols),\n              maxRow: that._coordIndex(Math.max(area.minRow, area.maxRow), rows)\n            };\n          });\n          var area = selectedAreas[selectedAreas.length - 1];\n          if (focalWell && !this._wellInArea(focalWell, area)) {\n            focalWell = null;\n          }\n          if (!focalWell) {\n            focalWell = {\n              row: area.minRow,\n              col: area.minCol\n            };\n          }\n        } else {\n          if (!focalWell) {\n            focalWell = {\n              row: 0,\n              col: 0\n            };\n          }\n          selectedAreas = [this._wellToArea(focalWell)];\n        }\n        return {\n          selectedAreas: selectedAreas,\n          focalWell: focalWell\n        };\n      },\n\n      sanitizeWell: function(well) {\n        var newWell = {};\n        for (var i = 0; i < this.fieldList.length; i++) {\n          var field = this.fieldList[i];\n          newWell[field.id] = field.parseValue(well[field.id]);\n        }\n        return newWell;\n      },\n\n      setData: function(data) {\n        this.engine.derivative = $.extend(true, {}, data.derivative);\n        this.setCheckboxes(data.checkboxes);\n        this.setSelection(data.selectedAreas, data.focalWell);\n        this._colorMixer();\n        this.decideSelectedFields();\n        this.mainFabricCanvas.renderAll();\n      },\n\n    }\n  }\n})(jQuery, fabric);","var GET_PLATES = 'getPlates';\nvar IS_READ_ONLY = 'isReadOnly';\nvar IS_DISABLE_ADD_DELETE_WELL = 'isDisableAddDeleteWell';\nvar GET_SELECTED_OBJECT = 'getSelectedObject';\nvar SETSELECTEDWELL = 'setSelectedWell';","var plateLayOutWidget = plateLayOutWidget || {};\n\n(function($, fabric) {\n\n  plateLayOutWidget.overlay = function() {\n    // overlay holds all the methods to put the part just above the canvas which contains all those\n    // 'completion percentage' annd 'copy Criteria' button etc ...\n    return {\n\n      _createOverLay: function() {\n\n        var that = this;\n        this.overLayTextContainer = this._createElement(\"<div></div>\").addClass(\"plate-setup-overlay-text-container\");\n        this.overLayTextContainer.text(\"Completion Percentage:\");\n        this.overLayContainer.append(this.overLayTextContainer);\n        this.overLayButtonContainer = this._createElement(\"<div></div>\").addClass(\"plate-setup-overlay-button-container\");\n        this.overLayContainer.append(this.overLayButtonContainer);\n\n        this.clearCriteriaButton = this._createElement(\"<button />\").addClass(\"plate-setup-button\");\n        this.clearCriteriaButton.text(\"Clear\");\n        this.overLayButtonContainer.append(this.clearCriteriaButton);\n\n        this.clearCriteriaButton.click(function(evt) {\n          that.clearCriteria();\n        });\n\n        this.copyCriteriaButton = this._createElement(\"<button />\").addClass(\"plate-setup-button\");\n        this.copyCriteriaButton.text(\"Copy\");\n        this.overLayButtonContainer.append(this.copyCriteriaButton);\n\n        this.copyCriteriaButton.click(function(evt) {\n          that.copyCriteria();\n        });\n\n        this.pasteCriteriaButton = this._createElement(\"<button />\").addClass(\"plate-setup-button\");\n        this.pasteCriteriaButton.text(\"Paste\");\n        this.overLayButtonContainer.append(this.pasteCriteriaButton);\n\n        this.pasteCriteriaButton.click(function(evt) {\n          that.pasteCriteria();\n        });\n\n        this.undoButton = this._createElement(\"<button />\").addClass(\"plate-setup-button\");\n        this.undoButton.text(\"Undo\");\n        this.overLayButtonContainer.append(this.undoButton);\n\n        this.undoButton.click(function(evt) {\n          that.undo();\n        });\n\n        this.redoButton = this._createElement(\"<button />\").addClass(\"plate-setup-button\");\n        this.redoButton.text(\"Redo\");\n        this.overLayButtonContainer.append(this.redoButton);\n\n        this.redoButton.click(function(evt) {\n          that.redo();\n        });\n\n      },\n\n      clearCriteria: function() {\n        if (this.allSelectedObjects) {\n          var noOfSelectedObjects = this.allSelectedObjects.length;\n          var hasWellUpdate = false;\n          for (var objectIndex = 0; objectIndex < noOfSelectedObjects; objectIndex++) {\n            var tile = this.allSelectedObjects[objectIndex];\n            if (tile.index in this.engine.derivative) {\n              // handling for clearing well when not allowed to add or delete wells\n              if (this.emptyWellWithDefaultVal && this.disableAddDeleteWell) {\n                var well = JSON.parse(JSON.stringify(this.defaultWell));\n                var defaultValue = this.emptyWellWithDefaultVal;\n                for (var key in defaultValue) {\n                  if (key in well) {\n                    well[key] = defaultValue[key];\n                    this._applyFieldData(key, defaultValue[key]);\n                  } else {\n                    console.log(\"Well does not contain key: \" + key + \", please contact support\");\n                  }\n                }\n                this.engine.derivative[tile.index] = well;\n              } else {\n                delete this.engine.derivative[tile.index];\n              }\n              hasWellUpdate = true;\n            }\n          }\n          if (hasWellUpdate) {\n            this.derivativeChange();\n          }\n\n          this._colorMixer();\n          this.decideSelectedFields();\n        } else {\n          alert(\"Please select any well\");\n        }\n      },\n\n      copyCriteria: function() {\n        if (this.allSelectedObjects) {\n          var wells = this._getSelectedWells();\n          this.commonWell = this._getCommonFields(wells);\n        } else {\n          alert(\"Please select any well.\");\n        }\n      },\n\n      pasteCriteria: function() {\n        if (this.commonWell) {\n          this._addAllData(this.commonWell);\n          this.decideSelectedFields();\n          this.mainFabricCanvas.renderAll();\n        }\n      }\n    };\n  }\n})(jQuery, fabric);","$.widget(\"DNA.plateLayOut\", {\n\n  plateLayOutWidget: {},\n\n  options: {\n    value: 0\n  },\n\n  allTiles: [], // All tiles containes all thise circles in the canvas\n\n  addressToLoc: function(layoutAddress) {\n    var m = /^([A-Z]+)(\\d+)$/.exec(layoutAddress.trim().toUpperCase())\n    if (m) {\n      var row_v = m[1];\n      var col = parseInt(m[2]) - 1;\n      var row;\n      for (var i = 0; i < row_v.length; i++) {\n        var c = row_v.charCodeAt(i) - 65;\n        if (i) {\n          row += 1;\n          row *= 26;\n          row += c;\n        } else {\n          row = c;\n        }\n      }\n      return {\n        r: row,\n        c: col\n      };\n    } else {\n      throw layoutAddress + \" not a proper layout address\";\n    }\n  },\n\n  locToIndex: function(loc, dimensions) {\n    if (!dimensions) {\n      dimensions = this.dimensions;\n    }\n    if (loc.r < 0) {\n      t\n    }\n    if (!(loc.r >= 0 && loc.r < dimensions.rows)) {\n      throw \"Row index \" + (loc.r + 1) + \" invalid\";\n    }\n    if (!(loc.c >= 0 && loc.c < dimensions.cols)) {\n      throw \"Column index \" + (loc.c + 1) + \" invalid\";\n    }\n    return loc.r * dimensions.cols + loc.c;\n  },\n\n  addressToIndex: function(layoutAddress, dimensions) {\n    var loc = this.addressToLoc(layoutAddress);\n    return this.locToIndex(loc, dimensions);\n  },\n\n  _rowKey: function(i) {\n    var c1 = i % 26;\n    var c2 = (i - c1) / 26;\n    var code = String.fromCharCode(65 + c1);\n    if (c2 > 0) {\n      code = String.fromCharCode(64 + c2) + code;\n    }\n    return code;\n  },\n\n  indexToLoc: function(index, dimensions) {\n    if (!dimensions) {\n      dimensions = this.dimensions;\n    }\n\n    if (index >= dimensions.rows * dimensions.cols) {\n      throw \"Index too high: \" + index.toString(10);\n    }\n    var loc = {};\n    loc.c = index % dimensions.cols;\n    loc.r = (index - loc.c) / dimensions.cols;\n\n    return loc;\n  },\n\n  locToAddress: function(loc) {\n    return this._rowKey(loc.r) + (loc.c + 1).toString(10);\n  },\n\n  indexToAddress: function(index, dimensions) {\n    var loc = this.indexToLoc(index, dimensions);\n    return this.locToAddress(loc);\n  },\n\n  getDimensions: function() {\n    return $.extend(true, {}, this.dimensions);\n  },\n\n  _create: function() {\n    var rows = parseInt(this.options.numRows || 8);\n    var cols = parseInt(this.options.numCols || 12);\n    this.dimensions = {\n      rows: rows,\n      cols: cols\n    };\n    this.rowIndex = [];\n    for (var i = 0; i < rows; i++) {\n      this.rowIndex.push(this._rowKey(i));\n    }\n\n    this.target = (this.element[0].id) ? \"#\" + this.element[0].id : \".\" + this.element[0].className;\n\n    // Import classes from other files.. Here we import it using extend and add it to this\n    // object. internally we add to widget.DNA.getPlates.prototype.\n    // Helpers are methods which return other methods and objects.\n    // add Objects to plateLayOutWidget and it will be added to this object.\n    // set read only well\n    if (this.options.readOnly) {\n      this.isReadOnly(true);\n    }\n\n    for (var component in plateLayOutWidget) {\n      // Incase some properties has to initialize with data from options hash,\n      // we provide it sending this object.\n      $.extend(this, new plateLayOutWidget[component](this));\n    }\n\n    this._createInterface();\n\n    this._trigger(\"created\", null, this);\n\n    return this;\n  },\n\n  _init: function() {\n    // This is invoked when the user use the plugin after _create is called.\n    // The point is _create is invoked for the very first time and for all other\n    // times _init is used.\n  },\n\n  addData: function() {\n    alert(\"wow this is good\");\n  },\n\n  // wellsData follows syntax: {0:{field1: val1, field2: val2}, 1:{field1: val1, field2: val2}}\n  getTextDerivative: function(wellsData) {\n    var textDerivative = {};\n    var fieldMap = this.fieldMap;\n    for (var idx in wellsData) {\n      var textValWell = {};\n      var textFieldIdWell = {};\n      var curWellData = wellsData[idx];\n      for (var fieldId in curWellData) {\n        if (fieldId in this.fieldMap) {\n          var field = this.fieldMap[fieldId];\n          var textVal = field.parseText(curWellData[fieldId]);\n          textFieldIdWell[field.name] = textVal;\n          textValWell[fieldId] = textVal;\n        } else {\n          // do not convert if not a field (ex: layout_address)\n          textFieldIdWell[fieldId] = curWellData[fieldId];\n          textValWell[fieldId] = curWellData[fieldId];\n        }\n      }\n      textDerivative[idx] = {\n        textVal: textValWell,\n        textFieldVal: textFieldIdWell\n      };\n    }\n\n    return textDerivative;\n  },\n\n  // wellsData follows syntax: {0:{field1: val1, field2: val2}, 1:{field1: val1, field2: val2}}\n  getWellsDifferences: function(wellsData) {\n    return this.getDifferentWellsVals(wellsData);\n  },\n\n  setFieldsDisabled: function(flag) {\n    this.fieldList.forEach(function(field) {\n      field.disabled(flag);\n    });\n  },\n\n  isReadOnly: function(flag) {\n    if (flag) {\n      this.readOnly = true;\n    } else {\n      this.readOnly = false;\n    }\n    this.readOnlyHandler();\n  },\n\n  readOnlyHandler: function() {\n    if (this.readOnly) {\n      this.overLayButtonContainer.css(\"display\", \"none\");\n      $('.multiple-field-manage-delete-button').css(\"display\", \"none\");\n      this.setFieldsDisabled(true);\n    } else {\n      this.overLayButtonContainer.css(\"display\", \"flex\");\n      $('.multiple-field-manage-delete-button').css(\"display\", \"none\");\n      if (!this.disableAddDeleteWell) {\n        this.setFieldsDisabled(false);\n      }\n    }\n  },\n\n  disableAddDeleteWell: null,\n  // column_with_default_val will be used to determine empty wells, format: {field_name: default_val}\n  isDisableAddDeleteWell: function(flag, column_with_default_val) {\n    if (flag) {\n      this.disableAddDeleteWell = true;\n      this.addressAllowToEdit = this.getWellSetAddressWithData();\n      // configure undo redo action\n      this.actionPointer = 0;\n      this.undoRedoArray = [];\n      this.undoRedoArray.push(this.createObject());\n      if (column_with_default_val) {\n        this.emptyWellWithDefaultVal = column_with_default_val;\n      }\n    } else {\n      this.disableAddDeleteWell = false;\n      this.setFieldsDisabled(false);\n      this.emptyWellWithDefaultVal = null;\n    }\n    this._fabricEvents();\n  },\n\n  getSelectedObject: function() {\n    var selectedAddress = [];\n    for (var i = 0; i < this.allSelectedObjects.length; i++) {\n      selectedAddress.push(this.allSelectedObjects[i].address);\n    }\n    var selectedObjects = {};\n    var derivative = this.engine.derivative;\n    for (var index in derivative) {\n      var address = this.indexToAddress(index);\n      if (selectedAddress.indexOf(address) >= 0) {\n        var well = JSON.parse(JSON.stringify(derivative[index]));\n        well.colorIndex = this.engine.colorMap.get(Number(index));\n        selectedObjects[address] = well;\n      }\n    }\n    return selectedObjects;\n  },\n\n  selectObjectInBottomTab: function() {\n    var selectedObjects = this.getSelectedObject();\n    var selectedObjectAddress;\n    for (var prop in selectedObjects) {\n      if (!selectedObjectAddress) {\n        selectedObjectAddress = prop;\n      } else {\n        return;  // scroll to matching group only if a single well has been selected\n      }\n    }\n    if (selectedObjects[selectedObjectAddress]) {\n      var colorIndex = selectedObjects[selectedObjectAddress].colorIndex;\n      var trs = document.querySelectorAll('table.plate-setup-bottom-table tr');\n      for (var i = 1; i < trs.length; i++) { // start at 1 to skip the table headers\n        var tds = trs[i].children;\n        var isSelected = tds[0].querySelector('button').innerHTML === colorIndex.toString();\n        for (var j = 1; j < tds.length; j++) {\n          if (isSelected) {\n            tds[j].style.background = '#22cb94';\n          } else {\n            tds[j].style.background = '#ffffff';\n          }\n        }\n        if (isSelected) {\n          scrollTo(document.querySelector('.plate-setup-bottom-table-container'), tds[0].offsetTop, 300);\n        }\n      }\n    }\n  },\n\n  getSelectedIndex: function() {\n    return this.allSelectedObjects.map(function(selectedObj) {\n      return that.addressToIndex(selectedObj.address)\n    });\n  },\n\n  getSelectedAddress: function() {\n    return this.allSelectedObjects.map(function(selectedObj) {\n      return selectedObj.address;\n    });\n  },\n\n  setSelectedWell: function(addressList) {\n    var areas = [];\n    var minRow = 999;\n    var locMap = {};\n    for (var id = 0; id < addressList.length; id++) {\n      var wellIdx = this.addressToIndex(addressList[id]);\n      var loc = this.indexToLoc(wellIdx);\n      areas.push({\n        minCol: loc.c,\n        minRow: loc.r,\n        maxCol: loc.c,\n        maxRow: loc.r\n      });\n      if (loc.r <= minRow) {\n        minRow = loc.r;\n        if (loc.r in locMap) {\n          locMap[loc.r].push(loc.c);\n        } else {\n          locMap[loc.r] = [loc.c];\n        }\n      }\n    }\n    var focalWell = {\n      row: minRow,\n      col: Math.min.apply(null, locMap[minRow])\n    };\n\n    this.setSelection(areas, focalWell);\n    this.decideSelectedFields();\n    this.mainFabricCanvas.renderAll();\n  }\n\n});\n\n// https://stackoverflow.com/questions/17733076/smooth-scroll-anchor-links-without-jquery\nfunction scrollTo(element, to, duration) {\n  if (duration <= 0) return;\n  var difference = to - element.scrollTop;\n  var perTick = difference / duration * 10;\n  setTimeout(function() {\n    element.scrollTop = element.scrollTop + perTick;\n    if (element.scrollTop === to) return;\n    scrollTo(element, to, duration - 10);\n  }, 10);\n}","var plateLayOutWidget = plateLayOutWidget || {};\n\n(function($, fabric) {\n\n  plateLayOutWidget.preset = function(me) {\n    // All the preset action goes here\n    return {\n\n      presets: [],\n\n      _placePresetTabs: function() {\n        var presets = this.options.attributes.presets;\n\n        if (presets && presets.length) {\n          this.wellAttrContainer = this._createElement(\"<div></div>\").addClass(\"plate-setup-well-attr-container\")\n            .text(\"Checkbox presets\");\n          this.tabContainer.append(this.wellAttrContainer);\n\n          this.presetTabContainer = this._createElement(\"<div></div>\").addClass(\"plate-setup-preset-container\");\n          this.tabContainer.append(this.presetTabContainer);\n\n          for (var i = 0; i < presets.length; i++) {\n            var preset = presets[i];\n            var divText = this._createElement(\"<div></div>\").addClass(\"plate-setup-prest-tab-div\")\n              .text(preset.title);\n\n            var presetButton = this._createElement(\"<div></div>\").addClass(\"plate-setup-prest-tab\")\n              .data(\"preset\", preset.fields).append(divText);\n            this.presetTabContainer.append(presetButton);\n\n            var that = this;\n            presetButton.click(function() {\n              var preset = $(this);\n              that._selectPreset(preset);\n            });\n            this.presets.push(presetButton);\n          }\n        }\n      },\n\n      _clearPresetSelection: function() {\n        for (var j = 0; j < this.presets.length; j++) {\n          var p = this.presets[j];\n          p.removeClass(\"plate-setup-prest-tab-selected\")\n            .addClass(\"plate-setup-prest-tab\");\n        }\n      },\n\n      _selectPreset: function(preset) {\n        this.setCheckboxes(preset.data(\"preset\"));\n        preset.removeClass(\"plate-setup-prest-tab\")\n          .addClass(\"plate-setup-prest-tab-selected\");\n      },\n    };\n  }\n})(jQuery, fabric);","var plateLayOutWidget = plateLayOutWidget || {};\n\n(function($, fabric) {\n\n  plateLayOutWidget.tabs = function() {\n    // Tabs crete and manage tabs at the right side of the canvas.\n    return {\n\n      allTabs: [],\n\n      defaultWell: {},\n\n      allDataTabs: [], // To hold all the tab contents. this contains all the tabs and its elements and elements\n      // Settings as a whole. its very usefull, when we have units for a specific field.\n      // it goes like tabs-> individual field-> units and checkbox\n\n      _createTabAtRight: function() {\n        this.tabContainer = this._createElement(\"<div></div>\").addClass(\"plate-setup-tab-container\");\n        $(this.topRight).append(this.tabContainer);\n      },\n\n      _createTabs: function() {\n        // this could be done using z-index. just imagine few cards stacked up.\n        // Check if options has tab data.\n        // Originally we will be pulling tab data from developer.\n        // Now we are building upon dummy data.\n        this.tabHead = this._createElement(\"<div></div>\").addClass(\"plate-setup-tab-head\");\n        $(this.tabContainer).append(this.tabHead);\n\n        var tabData = this.options.attributes.tabs;\n        var that = this;\n\n        tabData.forEach(function(tab, tabIndex) {\n          that.allTabs[tabIndex] = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab\");\n          $(that.allTabs[tabIndex]).data(\"index\", tabIndex)\n            .text(tab.name);\n\n          $(that.allTabs[tabIndex]).click(function() {\n            that._tabClickHandler(this);\n          });\n\n          $(that.tabHead).append(that.allTabs[tabIndex]);\n        });\n\n        this.tabDataContainer = this._createElement(\"<div></div>\").addClass(\"plate-setup-tab-data-container\");\n        $(this.tabContainer).append(this.tabDataContainer);\n\n        this._addDataTabs(tabData);\n\n        $(this.allTabs[0]).click();\n\n        this._addTabData();\n      },\n\n      _tabClickHandler: function(clickedTab) {\n\n        if (this.selectedTab) {\n          $(this.selectedTab).removeClass(\"plate-setup-tab-selected\")\n            .addClass(\"plate-setup-tab\");\n\n          var previouslyClickedTabIndex = $(this.selectedTab).data(\"index\");\n          $(this.allDataTabs[previouslyClickedTabIndex]).css(\"z-index\", 0);\n          this.readOnlyHandler();\n        }\n\n        $(clickedTab).addClass(\"plate-setup-tab-selected\");\n\n        this.selectedTab = clickedTab;\n\n        var clickedTabIndex = $(clickedTab).data(\"index\");\n        $(this.allDataTabs[clickedTabIndex]).css(\"z-index\", 1000);\n      },\n\n      _addDataTabs: function(tabs) {\n\n        var tabIndex = 0;\n\n        for (var tabData in tabs) {\n          this.allDataTabs[tabIndex++] = this._createElement(\"<div></div>\").addClass(\"plate-setup-data-div\")\n            .css(\"z-index\", 0);\n          $(this.tabDataContainer).append(this.allDataTabs[tabIndex - 1]);\n        }\n      }\n    };\n  }\n})(jQuery, fabric);","var plateLayOutWidget = plateLayOutWidget || {};\n\n(function($, fabric) {\n\n  plateLayOutWidget.undoRedoManager = function(THIS) {\n\n    return {\n\n      undoRedoArray: [],\n\n      actionPointer: null,\n\n      addToUndoRedo: function(data) {\n\n        if (this.actionPointer != null) {\n          var i = this.actionPointer + 1;\n          if (i < this.undoRedoArray.length) {\n            this.undoRedoArray.splice(i, this.undoRedoArray.length - i);\n          }\n        }\n        this.actionPointer = null;\n        this.undoRedoArray.push($.extend(true, {}, data));\n      },\n\n      _configureUndoRedoArray: function() {\n\n        var data = {\n          checkboxes: [],\n          derivative: {},\n          selectedAreas: [{\n            minRow: 0,\n            minCol: 0,\n            maxRow: 0,\n            maxCol: 0\n          }],\n          focalWell: {\n            row: 0,\n            col: 0\n          }\n        };\n\n        this.undoRedoArray = [];\n        this.actionPointer = null;\n        this.undoRedoArray.push($.extend({}, data));\n      },\n\n      undo: function() {\n        console.log(\"undo\");\n        return this.shiftUndoRedo(-1);\n      },\n\n      redo: function() {\n        console.log(\"redo\");\n        return this.shiftUndoRedo(1);\n      },\n\n      shiftUndoRedo: function(pointerDiff) {\n        var pointer = this.actionPointer;\n        if (pointer == null) {\n          pointer = this.undoRedoArray.length - 1;\n        }\n        pointer += pointerDiff;\n        return this.setUndoRedo(pointer);\n      },\n\n      setUndoRedo: function(pointer) {\n        if (pointer < 0) {\n          return false;\n        }\n        if (pointer >= this.undoRedoArray.length) {\n          return false;\n        }\n        this.undoRedoActive = true;\n        this.setData(this.undoRedoArray[pointer]);\n        this.actionPointer = pointer;\n        this.undoRedoActive = false;\n        this.derivativeChange();\n        return true;\n      }\n    }\n  };\n\n})(jQuery, fabric);","var plateLayOutWidget = plateLayOutWidget || {};\n\n(function($, fabric) {\n\n  plateLayOutWidget.wellArea = function(fabric) {\n\n    return {\n\n      _areasToTiles: function(areas) {\n        //Convert areas to tiles\n        var cols = this.dimensions.cols;\n        var that = this;\n        return areas.reduce(function(tiles, area) {\n          if (area) {\n            for (var r = area.minRow; r <= area.maxRow; r++) {\n              for (var c = area.minCol; c <= area.maxCol; c++) {\n                var tile = that.allTiles[c + cols * r];\n                if (tiles.indexOf(tile) < 0) {\n                  if (that.disableAddDeleteWell) {\n                    if (that.addressAllowToEdit.indexOf(tile.address) >= 0) {\n                      tiles.push(tile);\n                    }\n                  } else {\n                    tiles.push(tile);\n                  }\n                }\n              }\n            }\n          }\n          return tiles;\n        }, []);\n      },\n\n      _encodeArea: function(area) {\n        //Encode area as string\n        if ((area.minRow == area.maxRow) && (area.minCol == area.maxCol)) {\n          return this.rowIndex[area.minRow] + area.minCol.toString(10);\n        } else {\n          return this.rowIndex[area.minRow] + area.minCol.toString(10) + \":\" + this.rowIndex[area.maxRow] + area.maxCol.toString(10);\n        }\n      },\n\n      _encodeAreas: function(areas) {\n        //Encode an array of areas as a string\n        var that = this;\n        return areas.map(function(area) {\n          return that._encodeArea(area);\n        }).join(\",\");\n      },\n\n      _decodeWell: function(wellAddress) {\n        var that = this;\n        var adRx = new RegExp(\"^\\\\s*(\" + that.rowIndex.join(\"|\") + \")(\\\\d+)\\\\s*$\")\n        var rcRx = /^\\s*R(\\d+)C(\\d+)\\s*$/i;\n\n        var match;\n        match = wellAddress.match(adRx);\n        if (match) {\n          var row = that.rowIndex.indexOf(match[1]);\n          if (row >= 0) {\n            return {\n              row: row,\n              col: parseInt(match[2]) - 1\n            };\n          }\n        }\n        match = wellAddress.match(rcRx);\n        if (match) {\n          return {\n            row: parseInt(match[1]) - 1,\n            col: parseInt(match[2]) - 1\n          };\n        }\n\n        throw \"Invalid well address: \" + wellAddress;\n      },\n\n      _decodeArea: function(areaAddress) {\n        //Decode single area as string\n        var that = this;\n        var wells = areaAddress.split(\":\").map(function(wellAddress) {\n          return that._decodeWell(wellAddress);\n        })\n        if (wells.length == 1) {\n          return {\n            minRow: wells[0].row,\n            minCol: wells[0].col,\n            maxRow: wells[0].row,\n            maxCol: wells[0].col\n          }\n        } else if (wells.length == 2) {\n          var minRow = Math.min(wells[0].row, wells[1].row)\n          return {\n            minRow: Math.min(wells[0].row, wells[1].row),\n            minCol: Math.min(wells[0].col, wells[1].col),\n            maxRow: Math.max(wells[0].row, wells[1].row),\n            maxCol: Math.max(wells[0].col, wells[1].col)\n          }\n        } else {\n          throw \"Invalid address: \" + areaAddress;\n        }\n      },\n\n      _decodeAreas: function(areasAddress) {\n        //Decode single area as string\n        var that = this;\n        return areasAddress.split(\",\").map(function(areaAddress) {\n          return that._decodeArea(areaAddress);\n        });\n      },\n\n      _wellToArea: function(well) {\n        //Convert a well to an area\n        return {\n          minCol: well.col,\n          minRow: well.row,\n          maxCol: well.col,\n          maxRow: well.row\n        }\n      },\n\n      _wellInArea: function(well, area) {\n        //Determine if a well lies within an area\n        return well.row >= area.minRow && well.row <= area.maxRow && well.col >= area.minCol && well.col <= area.maxCol;\n      },\n\n      _coordsToRect: function(startCoords, endCoords) {\n        //Convert two XY coords to a bounding box\n        var left = Math.min(startCoords.x, endCoords.x);\n        var top = Math.min(startCoords.y, endCoords.y);\n        var height = Math.abs(endCoords.y - startCoords.y);\n        var width = Math.abs(endCoords.x - startCoords.x);\n        return {\n          top: top,\n          left: left,\n          height: height,\n          width: width\n        };\n      },\n\n      _coordIndex: function(v, count) {\n        var i;\n        if (v < 0) {\n          i = 0;\n        } else if (v >= count) {\n          i = count - 1;\n        } else {\n          i = Math.floor(v);\n        }\n        return i;\n      },\n\n      _coordsToWell: function(coord) {\n        //Convert a coordinate to a well\n        var cols = this.dimensions.cols;\n        var rows = this.dimensions.rows;\n\n        var w = this.sizes.spacing;\n        var m = this.sizes.label_spacing;\n\n        var x = (coord.x - m) / w;\n        var y = (coord.y - m) / w;\n\n        var row = this._coordIndex(y, rows);\n        var col = this._coordIndex(x, cols);\n\n        return {\n          row: row,\n          col: col,\n        };\n      },\n\n      _wellToCoords: function(well, center) {\n        //Convert a well to a coordinate\n        var w = this.sizes.spacing;\n        var m = this.sizes.label_spacing;\n        var x = well.col * w + m;\n        var y = well.row * w + m;\n        if (center) {\n          var hw = w / 2;\n          x = x + hw;\n          y = y + hw;\n        }\n\n        return {\n          x: x,\n          y: y\n        };\n      },\n\n      _areaToRect: function(area) {\n        //Convert area to rectangle\n        var rows = area.maxRow - area.minRow + 1;\n        var cols = area.maxCol - area.minCol + 1;\n\n        var w = this.sizes.spacing;\n        var m = this.sizes.label_spacing;\n\n        return {\n          top: area.minRow * w + m,\n          left: area.minCol * w + m,\n          height: rows * w,\n          width: cols * w\n        }\n      },\n\n      _rectToArea: function(rect) {\n        //Convert a rectangular region to an area\n        var rows = this.dimensions.rows;\n        var cols = this.dimensions.cols;\n\n        var w = this.sizes.spacing;\n        var m = this.sizes.label_spacing;\n\n        var left = (rect.left - m) / w;\n        var top = (rect.top - m) / w;\n        var height = rect.height / w;\n        var width = rect.width / w;\n        var right = left + width;\n        var bottom = top + height;\n\n        //select whole row\n        if (right < 0) {\n          right = cols;\n        }\n        if (left >= cols) {\n          left = 0;\n        }\n        //select whole col\n        if (bottom < 0) {\n          bottom = rows;\n        }\n        if (top <= 0) {\n          top = 0;\n        }\n\n        return {\n          minCol: this._coordIndex(left, cols),\n          minRow: this._coordIndex(top, rows),\n          maxCol: this._coordIndex(right, cols),\n          maxRow: this._coordIndex(bottom, rows)\n        };\n      }\n\n    }\n  }\n})(jQuery, fabric);"]}