{"version":3,"sources":["add-data-on-change.js","add-data-to-tabs.js","add-tab-data.js","add-warning-msg.js","bottom-table.js","check-box.js","color-manager.js","create-field.js","engine.js","image_assets.js","interface.js","load-plate.js","overlay.js","plate-map.js","preset.js","svg-create.js","svg-events.js","tabs.js","undo-redo-manager.js"],"names":["plateMapWidget","$","addDataOnChange","_addAllData","data","wells","this","selectedIndices","noOfSelectedObjects","length","forEach","index","well","engine","derivative","extend","defaultWell","processWellData","wellEmpty","disableAddDeleteWell","hasOwnProperty","emptyWellWithDefaultVal","_getAllMultipleVal","applyFieldWarning","_colorMixer","derivativeChange","addToUndoRedo","newData","curWell","id","newVal","multi","preData","_getMultiData","JSON","parse","stringify","curData","fieldId","addNew","added","removed","value","add","listIdx","toString","map","val","subFieldId","push","indexOf","removeIndex","removeListIndex","newPreData","idx","parseInt","searchAndStack","applyColors","_trigger","createState","checkboxes","getCheckboxes","slice","requiredField","getPlate","address","indexToAddress","selectedAddresses","getSelectedAddresses","jQuery","addDataToFields","_addDataToTabFields","i","fieldList","field","v","undefined","setValue","addTabData","fieldMap","autoId","_addTabData","tabData","options","attributes","tabs","that","multiplexFieldArray","tab","tabPointer","tabFields","fieldArray","console","log","type","_makeMultiplexField","_makeRegularField","allDataTabs","multipleFieldList","_makeSubField","mainField","wrapperDiv","_createElement","addClass","wrapperDivLeftSide","wrapperDivRightSide","nameContainer","text","name","fieldContainer","append","full_id","root","required","checkbox","_addCheckBox","_createField","onChange","getValue","subFieldList","requiredSubField","multiplexFields","subFieldData","subField","multiplexId","subFields","subfield","mainMultiplexField","mainRefField","curId","singleSelectValue","curVal","returnVal","_changeMultiFieldValue","curDataLs","detailData","addWarningMsg","fieldWarningMsg","include","imgId","img","html","_assets","warningImg","attr","find","prepend","popText","hover","style","display","hide","remove","removeWarningMsg","fieldData","applyMultiplexSubFieldColor","Array","bottomTable","_bottomScreen","bottomContainer","bottomTableContainer","bottomTableHead","bottomTableBody","container","addBottomTableHeadings","row","singleField","rowCounter","globalSelectedAttributes","empty","adjustFieldWidth","tileAttrText","tile","getText","addBottomTableRow","color","singleStack","modelTile","allTiles","plateIdDiv","numberText","click","evt","addressToSelect","ctrlKey","setSelectedAddresses","colorPairs","colorStops","css","dataDiv","bottomForFirstTime","createExportButton","downloadCSV","csv","filename","csvFile","downloadLink","Blob","document","createElement","download","href","window","URL","createObjectURL","body","appendChild","exportData","format","rows","querySelectorAll","colorLocMap","colorLocIdxMap","stackUpWithColor","colorIdx","cols","j","innerText","replace","loc","join","overlayContainer","descriptionDiv","buttonContainer","exportButton","resetExportText","classList","setTimeout","clipboardButton","clipboard","ClipboardJS","get","resetClipboardText","on","checkBox","globalSelectedMultiplexSubfield","allCheckboxes","checkImage","dontImg","linkedFieldId","_applyCheckboxHandler","checkBoxImage","changes","changeCheckboxes","filter","changeSubFieldsCheckboxes","subFieldToInclude","clicked","Boolean","doImg","noUndoRedo","gsa","multiplexCheckedSubField","_clearPresetSelection","setSubFieldCheckboxes","fieldIds","setCheckboxes","colorManager","select2close","ev","params","args","originalEvent","stopPropagation","one","preventDefault","select2fix","input","select2setData","selected","dataAdapter","addOptions","convertToOptions","createField","_createTextField","_createNumericField","_createSelectField","_createMultiSelectField","_createBooleanField","_createMultiplexField","parseValue","String","trim","disabled","bool","prop","parseText","_createOpts","config","opts","allowClear","placeholder","minimumResultsForSearch","data_specified","ajax","optMap","opt","select2","trigger","multiple","_parseOne","_parseMany","vals","multiOnChange","e","_createDeleteButton","units","defaultUnit","unitInput","hasUnits","unitText","unit","setUnitOpts","newUnits","curUnit","cleanUnit","isPlainObject","parseRegularValue","parseUnit","getRegularValue","isNaN","_ret","getUnit","hasMultiplexUnit","unitMap","_loop","unitTypeKey","_typeof","setUnit","setRegularValue","Number","toLowerCase","u","getRegularText","textVal","removeClass","nameContainer1","fieldContainer1","singleSelect","appendTo","multiselectSetValue","setSingleSelectOptions","singleSelectChange","updateSubFieldUnitOpts","curSubField","readOnlyHandler","newSubFieldValue","multiselectValues","newOptions","valMap","_loop2","curOpts","unitOptions","curIds","curOpt","newMultiplexVal","selectList","selectedVal","selectVal","_ret3","checkedSubfields","_loop3","valIdx","subV","subText","optId","x","_loop4","checkMultiplexCompletion","valList","valCount","completionPct","getSubfieldStatus","req","fill","subFieldWarningMap","warningStatus","multiplexVals","multiplexIdx","updateSubFieldWarningMap","mainFieldStatus","warningText","mainFieldWarning","parseMainFieldVal","_deleteDialog","valToRemove","allSelectedMultipleVal","Object","keys","dialogDiv","killDialog","dialogContent","tableArea","buttonRow","table","_deleteDialogTable","readOnly","deleteCheckedButton","each","decideSelectedFields","cancelButton","show","onclick","event","target","colName","thead","tbody","tr","deleteButton","THIS","colorMap","Map","stackPointer","isArray","derivativeJson","wellData","selectedSubFields","_loop5","curMultiplexVals","isEmptyObject","parseFloat","sort","a","b","refDerivativeIndex","referenceDerivative","arr","wholeNoTiles","wholePercentage","setTileVisible","set","setTileColor","completion","checkCompletion","setTileComplete","Math","floor","overLayTextContainer","selectObjectInBottomTab","multiplexStatus","assets","_createInterface","topSection","topLeft","topRight","overLayContainer","canvasContainer","_createOverLay","element","_createSvg","_createTabAtRight","_createTabs","_placePresetTabs","_setShortcuts","keyup","_handleShortcuts","_configureUndoRedoArray","addEventListener","activeElement","copyCriteria","clearCriteria","pasteCriteria","keyCode","metaKey","shiftKey","redo","undo","loadPlate","indices","addressToIndex","sanitizeWell","sanitizeCheckboxes","sanitizeAddresses","getSelectedIndices","sanitized","setData","newWell","quiet","setSelectedIndices","overlay","overLayButtonContainer","clearCriteriaButton","copyCriteriaButton","pasteCriteriaButton","undoButton","redoButton","hasWellUpdate","alert","_getSelectedWells","commonData","_getCommonData","widget","addressToLoc","m","exec","toUpperCase","row_v","col","c","charCodeAt","locToIndex","dimensions","r","c1","c2","code","fromCharCode","_colKey","locToAddress","_rowKey","indexToLoc","getDimensions","_create","numCols","rowIndex","component","className","isReadOnly","_init","getTextDerivative","wellsData","textDerivative","textValWell","textFieldIdWell","curWellData","textFieldVal","getWellsDifferences","wellsHash","wellId","differentWellsVals","commonWell","_getCommonWell","allFieldVal","fieldIdx","diffWellVal","commonVal","curMultiVal","containsObject","setFieldsDisabled","key","addressAllowToEdit","getWellSetAddressWithData","actionPointer","undoRedoArray","trs","td","children","isSelected","colors","querySelector","innerHTML","addresses","setSelection","selectedAddress","preset","presets","_this","wellAttrContainer","tabContainer","presetTabContainer","_loop6","divText","title","presetButton","fields","_selectPreset","SVG","svgCreate","baseSizes","spacing","tile_radius","center_radius_complete","center_radius_incomplete","label_size","label_spacing","text_size","stroke","gap","svg","ls","viewbox","wellShadow","gradient","stop","at","from","to","radius","wellColors","pair","_fixRowAndColumn","_putCircles","_svgEvents","rh","nested","ch","y","plain","_createTile","g","move","d","rect","circle","center","tf","group","complete","visible","colorIndex","label","svgEvents","colorToIndex","selectionBox","getMousePosition","CTM","node","getScreenCTM","clientX","clientY","f","dimCoord","max","trunc","posToLoc","pos","s","selectionBoxPosition","pos0","pos1","d0","d1","x0","min","y0","width","height","endDrag","secondary","extending","startIdx","c0","r0","r1","selectTiles","attrs","_setSelectedTiles","blur","obj","list","deepEqual","wellVal","commonArr","inArray","multiplexField","curMultipleVal","multipleVal","allTabs","tabHead","tabIndex","_tabClickHandler","tabDataContainer","_addDataTabs","clickedTab","selectedTab","previouslyClickedTabIndex","clickedTabIndex","undoRedoManager","state","splice","clearHistory","shiftUndoRedo","pointerDiff","pointer","setUndoRedo"],"mappings":"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","file":"plate-map.min.js","sourcesContent":["var plateMapWidget = plateMapWidget || {};\n\n(function($) {\n\n  plateMapWidget.addDataOnChange = function() {\n    // This object is invoked when something in the tab fields change\n    return {\n\n      _addAllData: function(data) {\n        let wells = [];\n        if (this.selectedIndices) {\n          let noOfSelectedObjects = this.selectedIndices.length;\n          this.selectedIndices.forEach(function (index) {\n            let well;\n            if (index in this.engine.derivative) {\n              well = this.engine.derivative[index];\n            } else {\n              well = $.extend(true, {}, this.defaultWell);\n              this.engine.derivative[index] = well;\n            }\n            well = this.processWellData(data, well, noOfSelectedObjects);\n            let empty = this.engine.wellEmpty(well);\n            if (empty) {\n              if (this.disableAddDeleteWell) {\n                if (this.engine.derivative.hasOwnProperty(index)) {\n                  well = $.extend(true, {}, this.emptyWellWithDefaultVal);\n                  this.engine.derivative[index] = well;\n                }\n              } else {\n                delete this.engine.derivative[index];\n              }\n            }\n          }, this);\n        }\n        // update multiplex remove all field\n        this._getAllMultipleVal(wells);\n        this.applyFieldWarning(wells);\n        // create well when default field is sent for the cases when user delete all fields during disabledNewDeleteWell mode\n        this._colorMixer();\n        this.derivativeChange();\n        this.addToUndoRedo();\n      },\n\n      processWellData: function(newData, curWell, noOfSelectedObjects) {\n        for (let id in newData) {\n          if (!newData.hasOwnProperty(id)) {\n            continue;\n          }\n          let newVal = newData[id];\n          if (newVal !== undefined && newVal !== null) {\n            if (newVal.multi) {\n              let preData = curWell[id];\n              newVal = this._getMultiData(preData, newVal, id, noOfSelectedObjects);\n            }\n            newVal = JSON.parse(JSON.stringify(newVal));\n          } else {\n            newVal = null;\n          }\n          curWell[id] = newVal;\n        }\n\n        return curWell\n      },\n\n      _getMultiData: function(preData, curData, fieldId, noOfSelectedObjects) {\n        let addNew = curData.added;\n        let removed = curData.removed;\n        if (addNew) {\n          if (preData) {\n            if (addNew.value) {\n              let add = true;\n              for (let listIdx in preData) {\n                if (!preData.hasOwnProperty(listIdx)) {\n                  continue;\n                }\n                let multiplexData = preData[listIdx];\n                // for cases when the add new data exist in well\n                if (multiplexData[fieldId].toString() === addNew.id.toString()) {\n                  add = false;\n                  // update subfield value\n                  preData = preData.map(function(val) {\n                    if (val[fieldId].toString() === addNew.id.toString()) {\n                      for (let subFieldId in val) {\n                        if (!val.hasOwnProperty(subFieldId)) {\n                          continue;\n                        }\n                        // over write previous data if only one well is selected\n                        if (subFieldId in addNew.value && subFieldId !== fieldId) {\n                          if (noOfSelectedObjects === 1) {\n                            val[subFieldId] = addNew.value[subFieldId];\n                          } else if (addNew.value[subFieldId]) {\n                            val[subFieldId] = addNew.value[subFieldId];\n                          }\n                        }\n                      }\n                    }\n                    return val;\n                  })\n                }\n              }\n              if (add) {\n                preData.push(addNew.value);\n              }\n            } else if (preData.indexOf(addNew) < 0) {\n              preData.push(addNew);\n            }\n          } else {\n            preData = [];\n            if (addNew.value) {\n              preData.push(addNew.value);\n            } else if (addNew) {\n              preData.push(addNew);\n            }\n          }\n        }\n\n        let removeListIndex = function(preData, removeIndex) {\n          let newPreData = [];\n          for (let idx in preData) {\n            if (!preData.hasOwnProperty(idx)) {\n              continue;\n            }\n            if (parseInt(idx) !== parseInt(removeIndex)) {\n              newPreData.push(preData[idx]);\n            }\n          }\n          return newPreData;\n        };\n\n        if (removed) {\n          let removeIndex;\n          // for multiplex field\n          if (removed.value) {\n            for (let listIdx in preData) {\n              let multiplexData = preData[listIdx];\n              if (multiplexData[fieldId].toString() === removed.id.toString()) {\n                removeIndex = listIdx;\n              }\n            }\n            // remove nested element\n            preData = removeListIndex(preData, removeIndex);\n          } else {\n            if (preData) {\n              removeIndex = preData.indexOf(removed);\n              if (removeIndex >= 0) {\n                preData = removeListIndex(preData, removeIndex);\n              }\n            }\n          }\n        }\n        if (preData && (preData.length === 0)) {\n          preData = null;\n        }\n        return preData\n      },\n\n      _colorMixer: function() {\n        this.engine.searchAndStack();\n        this.engine.applyColors();\n      },\n\n      derivativeChange: function() {\n        this._trigger(\"updateWells\", null, this);\n      },\n\n      createState: function() {\n        let derivative = $.extend(true, {}, this.engine.derivative);\n        let checkboxes = this.getCheckboxes();\n        let selectedIndices = this.selectedIndices.slice();\n\n        return {\n          \"derivative\": derivative,\n          \"checkboxes\": checkboxes,\n          \"selectedIndices\": selectedIndices,\n          \"requiredField\": this.requiredField\n        };\n      },\n\n      getPlate: function() {\n        let wells = {};\n        let derivative = this.engine.derivative;\n        for (let index in derivative) {\n          if (!derivative.hasOwnProperty(index)) {\n            continue;\n          }\n\n          let address = this.indexToAddress(index);\n          let well = derivative[index];\n          wells[address] = $.extend(true, {}, well);\n        }\n        let checkboxes = this.getCheckboxes();\n        let selectedAddresses = this.getSelectedAddresses();\n\n        return {\n          \"wells\": wells,\n          \"checkboxes\": checkboxes,\n          \"selectedAddresses\": selectedAddresses,\n          \"requiredField\": this.requiredField\n        };\n      }\n    };\n  }\n})(jQuery);","var plateMapWidget = plateMapWidget || {};\n\nplateMapWidget.addDataToFields = function() {\n\n  return {\n\n    _addDataToTabFields: function(well) {\n      // Configure how data is added to tab fields\n      for (let i = 0; i < this.fieldList.length; i++) {\n        let field = this.fieldList[i];\n        let v = well[field.id];\n        if (v === undefined) {\n          v = null;\n        }\n        field.setValue(v);\n      }\n    }\n  }\n};\n","var plateMapWidget = plateMapWidget || {};\n\n(function($) {\n\n  plateMapWidget.addTabData = function() {\n\n    return {\n\n      fieldList: [],\n      fieldMap: {},\n      autoId: 1,\n\n      _addTabData: function() {\n        // Here we may need more changes because attributes format likely to change\n        let tabData = this.options.attributes.tabs;\n        let that = this;\n        this.requiredField = [];\n        let multiplexFieldArray = [];\n        tabData.forEach(function(tab, tabPointer) {\n          if (tab[\"fields\"]) {\n            let tabFields = tab[\"fields\"];\n            let fieldArray = [];\n            // Now we look for fields in the json\n            for (var i = 0; i < tabFields.length; i++) {\n              let data = tabFields[i];\n\n              if (!data.id) {\n                data.id = \"Auto\" + that.autoId++;\n                console.log(\"Field autoassigned id \" + data.id);\n              }\n              if (!data.type) {\n                data.type = \"text\";\n                console.log(\"Field \" + data.id + \" autoassigned type \" + data.type);\n              }\n\n              let field;\n              if (data.type === \"multiplex\") {\n                field = that._makeMultiplexField(data, tabPointer, fieldArray);\n                that.defaultWell[field.id] = [];\n                multiplexFieldArray.push(field);\n              } else {\n                field = that._makeRegularField(data, tabPointer, fieldArray, true);\n                if (data.type === \"multiselect\") {\n                  that.defaultWell[field.id] = [];\n                  multiplexFieldArray.push(field);\n                } else {\n                  that.defaultWell[field.id] = null;\n                }\n              }\n            }\n\n            that.allDataTabs[tabPointer][\"fields\"] = fieldArray;\n          } else {\n            console.log(\"unknown format in field initialization\");\n          }\n        });\n        that.multipleFieldList = multiplexFieldArray;\n      },\n\n      _makeSubField: function(mainField, data, tabPointer, fieldArray) {\n        let that = this;\n        if (!data.id) {\n          data.id = \"Auto\" + that.autoId++;\n          console.log(\"Field autoassigned id \" + data.id);\n        }\n        if (!data.type) {\n          data.type = \"text\";\n          console.log(\"Field \" + data.id + \" autoassigned type \" + data.type);\n        }\n        let wrapperDiv = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-default-field\");\n        let wrapperDivLeftSide = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-left-side\");\n        let wrapperDivRightSide = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-right-side\");\n        let nameContainer = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-name\").text(data.name);\n        let fieldContainer = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-container\");\n\n        $(wrapperDivRightSide).append(nameContainer);\n        $(wrapperDivRightSide).append(fieldContainer);\n        $(wrapperDiv).append(wrapperDivLeftSide);\n        $(wrapperDiv).append(wrapperDivRightSide);\n        $(that.allDataTabs[tabPointer]).append(wrapperDiv);\n\n        let field = {\n          id: data.id,\n          full_id: mainField.id + \"_\" + data.id,\n          name: data.name,\n          root: wrapperDiv,\n          data: data,\n          required: data.required || false\n        };\n\n        fieldArray.push(field);\n        that.fieldMap[field.full_id] = field;\n\n        return field;\n      },\n\n      _makeRegularField: function(data, tabPointer, fieldArray, checkbox) {\n        let that = this;\n        let wrapperDiv = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-default-field\");\n        let wrapperDivLeftSide = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-left-side\");\n        let wrapperDivRightSide = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-right-side \");\n        let nameContainer = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-name\").text(data.name);\n        let fieldContainer = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-container\");\n\n        wrapperDivRightSide.append(nameContainer);\n        wrapperDivRightSide.append(fieldContainer);\n        wrapperDiv.append(wrapperDivLeftSide);\n        wrapperDiv.append(wrapperDivRightSide);\n        that.allDataTabs[tabPointer].append(wrapperDiv);\n\n        let field = {\n          id: data.id,\n          full_id: data.id,\n          name: data.name,\n          root: wrapperDiv,\n          data: data,\n          required: data.required\n        };\n\n        if (field.required) {\n          that.requiredField.push(field.id);\n        }\n\n        fieldArray.push(field);\n        that.fieldList.push(field);\n        that.fieldMap[field.full_id] = field;\n\n        // Adding checkbox\n        if (checkbox) {\n          that._addCheckBox(field);\n        }\n        that._createField(field);\n\n        field.onChange = function() {\n          let v = field.getValue();\n          let data = {};\n          data[field.id] = v;\n          that._addAllData(data);\n        };\n        return field;\n      },\n\n      _makeMultiplexField: function(data, tabPointer, fieldArray) {\n        let that = this;\n        let wrapperDiv = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-default-field\");\n        let wrapperDivLeftSide = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-left-side\");\n        let wrapperDivRightSide = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-right-side \");\n        let nameContainer = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-name\").text(data.name);\n        let fieldContainer = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-container\");\n\n        wrapperDivRightSide.append(nameContainer);\n        wrapperDivRightSide.append(fieldContainer);\n        wrapperDiv.append(wrapperDivLeftSide);\n        wrapperDiv.append(wrapperDivRightSide);\n        that.allDataTabs[tabPointer].append(wrapperDiv);\n\n        let field = {\n          id: data.id,\n          full_id: data.id,\n          name: data.name,\n          root: wrapperDiv,\n          data: data,\n          required: data.required\n        };\n\n        fieldArray.push(field);\n        that.fieldList.push(field);\n        that.fieldMap[field.full_id] = field;\n\n        let subFieldList = [];\n        //create subfields\n        let requiredSubField = [];\n        for (let i = 0; i < data.multiplexFields.length; i++) {\n          let subFieldData = data.multiplexFields[i];\n          let subField = that._makeSubField(field, subFieldData, tabPointer, fieldArray);\n          subFieldList.push(subField);\n\n          // stores required  subField\n          if (subFieldData.required) {\n            requiredSubField.push(subField.id);\n          }\n        }\n\n        //store required field\n        if (field.required || requiredSubField.length) {\n          this.requiredField.push({\n            multiplexId: field.id,\n            subFields: requiredSubField\n          });\n        }\n\n        field.subFieldList = subFieldList;\n        that._createField(field);\n        that._addCheckBox(field);\n\n        subFieldList.forEach(function(subfield) {\n          subfield.mainMultiplexField = field;\n          that._createField(subfield);\n          that._addCheckBox(subfield);\n          // overwrite subField setvalue\n          subfield.onChange = function() {\n            let v = subfield.getValue();\n            let mainRefField = subfield.mainMultiplexField;\n            let curId = mainRefField.singleSelectValue();\n            //let curDataLs = mainRefField.detailData;\n            let curVal = {};\n            curVal[mainRefField.id] = curId;\n            //append subfields\n            curVal[subfield.id] = v;\n            let returnVal = {\n              id: curId,\n              value: curVal\n            };\n\n            field._changeMultiFieldValue(returnVal, null);\n            let curDataLs = mainRefField.detailData;\n            if (curDataLs !== null) {\n              curId = mainRefField.singleSelectValue();\n              curDataLs = curDataLs.map(function(curData) {\n                if (curData[mainRefField.id] === curId) {\n                  curData[subfield.id] = v;\n                }\n                return curData;\n              });\n            }\n            mainRefField.detailData = curDataLs;\n          };\n\n        });\n\n        return field;\n      }\n    }\n  }\n\n})(jQuery);\n","var plateMapWidget = plateMapWidget || {};\n\n(function($) {\n\n  plateMapWidget.addWarningMsg = function() {\n    // For those check boxes associated with every field in the tab\n    return {\n      fieldWarningMsg: function(field, text, include) {\n        let that = this;\n        let imgId = \"fieldWarning\" + field.full_id;\n        let img = $(\"<span>\").html(that._assets.warningImg).attr(\"id\", imgId).addClass(\"plate-field-warning-image\");\n        if (include) {\n          if (field.root.find(\"#\" + imgId).length <= 0) {\n            field.root.find(\".plate-setup-tab-name\").text(\" \" + field.name);\n            field.root.find(\".plate-setup-tab-name\").prepend(img);\n\n            let popText = $(\"<div/>\").addClass(\"pop-out-text\");\n            popText.text(text);\n            field.root.find(\".plate-setup-tab-name\").append(popText);\n\n            $(\"#\" + imgId).hover(function() {\n              popText[0].style.display = 'flex';\n            }, function() {\n              popText.hide();\n            });\n          }\n\n\n        } else {\n          if (field.root.find(\"#\" + imgId).length > 0) {\n            field.root.find(\".plate-setup-tab-name\").text(field.name);\n            $(\"#\" + imgId).remove();\n          }\n        }\n      },\n\n      removeWarningMsg: function(field, text, include) {\n        let that = this;\n        let imgId = \"fieldWarning\" + field.full_id;\n        if (include) {\n          let img = $(\"<span>\").html(that._assets.warningImg).attr(\"id\", imgId).addClass(\"plate-field-warning-image\");\n          field.root.find(\".plate-setup-tab-name\").append(img);\n\n          let popText = $(\"<div/>\").addClass(\"pop-out-text\");\n          popText.text(text);\n          field.root.find(\".plate-setup-tab-name\").append(popText);\n\n          img.hover(function() {\n            popText[0].style.display = 'inline-block';\n          }, function() {\n            popText.hide();\n          });\n        } else {\n          $(\"#\" + imgId).remove();\n        }\n      },\n\n      applyFieldWarning: function(wells) {\n        let that = this;\n        let fieldData = {};\n        that.fieldList.forEach(function(field) {\n          fieldData[field.id] = [];\n        });\n        wells.forEach(function(well) {\n          if (!that.engine.wellEmpty(well)) {\n            for (let fieldId in fieldData) {\n              if (fieldData.hasOwnProperty(fieldId)) {\n                if (fieldId in well) {\n                  fieldData[fieldId].push(well[fieldId]);\n                } else {\n                  fieldData[fieldId].push(null);\n                }\n              }\n            }\n          }\n        });\n        for (let i = 0; i < that.fieldList.length; i++) {\n          let field = that.fieldList[i];\n          if (field.applyMultiplexSubFieldColor) {\n            field.applyMultiplexSubFieldColor(fieldData[field.id]);\n          } else {\n            if (field.required) {\n              let include = false;\n              fieldData[field.id].forEach(function(val) {\n                // for multiselect\n                if (val instanceof Array) {\n                  if (val.length === 0) {\n                    include = true;\n                  }\n                } else {\n                  if (val === null) {\n                    include = true;\n                  }\n                }\n              });\n              //field.root.find(\".plate-setup-tab-name\").css(\"background\", color);\n              that.fieldWarningMsg(field, \"required field\", include);\n            }\n          }\n        }\n      }\n    }\n  }\n})(jQuery);","var plateMapWidget = plateMapWidget || {};\n\n(function($) {\n\n  plateMapWidget.bottomTable = function() {\n    // for bottom table\n    return {\n      _bottomScreen: function() {\n        this.bottomContainer = this._createElement(\"<div></div>\").addClass(\"plate-setup-bottom-container\");\n        this.bottomTableContainer = this._createElement(\"<div></div>\").addClass(\"plate-setup-bottom-table-container\");\n        this.bottomTable = this._createElement(\"<table></table>\").addClass(\"plate-setup-bottom-table\");\n        this.bottomTableHead = this._createElement(\"<thead></thead>\");\n        this.bottomTableBody = this._createElement(\"<tbody></tbody>\");\n        this.bottomTable.append(this.bottomTableHead);\n        this.bottomTable.append(this.bottomTableBody);\n        this.bottomTableContainer.append(this.bottomTable);\n        this.bottomContainer.append(this.bottomTableContainer);\n        this.container.append(this.bottomContainer);\n      },\n\n      addBottomTableHeadings: function() {\n\n        let row = this._createElement(\"<tr></tr>\");\n\n        let singleField = this._createElement(\"<th></th>\")\n          .text(\"Group\");\n        row.prepend(singleField);\n\n        this.rowCounter = 1;\n\n        for (let i = 0; i < this.globalSelectedAttributes.length; i++) {\n          let attr = this.globalSelectedAttributes[i];\n          let field = this.fieldMap[attr];\n          let singleField = this._createElement(\"<th></th>\").text(field.name);\n          row.append(singleField);\n          this.rowCounter = this.rowCounter + 1;\n        }\n\n        // Now we append all the captions at the place.\n        this.bottomTableBody.empty();\n        this.bottomTableHead.empty();\n        this.bottomTableHead.append(row);\n        this.adjustFieldWidth(row);\n      },\n\n      tileAttrText: function(tile, attr) {\n        let well = this.engine.derivative[tile.index];\n        let field = this.fieldMap[attr];\n        return field.getText(well[attr]);\n      },\n\n      addBottomTableRow: function(color, singleStack) {\n        let that = this;\n        let modelTile = this.allTiles[singleStack[0]];\n        let row = this._createElement(\"<tr></tr>\");\n        let plateIdDiv = this._createElement(\"<td></td>\").addClass(\"plate-setup-bottom-id\");\n        let numberText = this._createElement(\"<button/>\");\n        numberText.addClass(\"plate-setup-color-text\");\n        numberText.text(color);\n        plateIdDiv.append(numberText);\n\n        numberText.click(function(evt) {\n          let addressToSelect = singleStack.map(that.indexToAddress, that);\n          if (evt.ctrlKey) {\n            that.getSelectedAddresses().forEach(function(val) {\n              if (addressToSelect.indexOf(val) < 0) {\n                addressToSelect.push(val);\n              }\n            })\n          }\n          that.setSelectedAddresses(addressToSelect);\n        });\n\n        if (color > 0) {\n          color = ((color - 1) % (this.colorPairs.length - 1)) + 1;\n        }\n        let colorStops = this.colorPairs[color];\n\n        plateIdDiv.css(\"background\", \"linear-gradient(to right, \" + colorStops[0] + \" , \" + colorStops[1] + \")\");\n\n        row.append(plateIdDiv);\n\n        for (let i = 0; i < this.globalSelectedAttributes.length; i++) {\n          let attr = this.globalSelectedAttributes[i];\n          let text = this.tileAttrText(modelTile, attr);\n          let dataDiv = this._createElement(\"<td></td>\").text(text);\n          row.append(dataDiv);\n        }\n        this.bottomTableBody.append(row);\n        this.adjustFieldWidth(row);\n      },\n\n      bottomForFirstTime: function() {\n        this.addBottomTableHeadings();\n        // This is executed for the very first time.. !\n        let row = this._createElement(\"<tr></tr>\");\n\n        let colorStops = this.colorPairs[0];\n        let plateIdDiv = this._createElement(\"<td></td>\");\n        plateIdDiv.css(\"background\", \"-webkit-linear-gradient(left, \" + colorStops[0] + \" , \" + colorStops[1] + \")\");\n        row.append(plateIdDiv);\n        this.bottomTableBody.append(row);\n        this.createExportButton();\n      },\n\n      adjustFieldWidth: function(row) {\n\n        let length = this.rowCounter;\n        if ((length) * 150 > 1024) {\n          row.css(\"width\", (length) * 152 + \"px\");\n        }\n      },\n\n      downloadCSV: function(csv, filename) {\n        let csvFile;\n        let downloadLink;\n\n        // CSV file\n        csvFile = new Blob([csv], {\n          type: \"text/csv\"\n        });\n\n        // Download link\n        downloadLink = document.createElement(\"a\");\n\n        // File name\n        downloadLink.download = filename;\n\n        // Create a link to the file\n        downloadLink.href = window.URL.createObjectURL(csvFile);\n\n        // Hide download link\n        downloadLink.style.display = \"none\";\n\n        // Add the link to DOM\n        document.body.appendChild(downloadLink);\n\n        // Click download link\n        downloadLink.click();\n      },\n\n      exportData: function(format) {\n        let data = [];\n        let rows = document.querySelectorAll(\"table tr\");\n\n        let colorLocMap = {};\n        let colorLocIdxMap = this.engine.stackUpWithColor;\n        for (let colorIdx in colorLocIdxMap) {\n          if (colorLocIdxMap.hasOwnProperty(colorIdx)) {\n            colorLocMap[colorIdx] = colorLocIdxMap[colorIdx].map(this.indexToAddress, this);\n          }\n        }\n\n        for (let i = 0; i < rows.length; i++) {\n          let row = [],\n            cols = rows[i].querySelectorAll(\"td, th\");\n\n          for (let j = 0; j < cols.length; j++) {\n            let v = \"\";\n            if (cols[j].innerText) {\n              if (format === \"csv\") {\n                v = '\"' + cols[j].innerText.replace(/\"/g, '\"\"') + '\"';\n              } else {\n                v = cols[j].innerText;\n              }\n            }\n            row.push(v);\n\n            // add location column\n            if (i === 0 && j === 0) {\n              if (format === \"csv\") {\n                row.push('\"Location\"');\n              } else if (format === 'clipboard') {\n                row.push(\"Location\");\n              }\n\n            }\n            if (i !== 0 && j === 0) {\n              let loc = '';\n              if (colorLocMap[parseInt(cols[j].innerText)]) {\n                if (format === \"csv\") {\n                  loc = '\"' + colorLocMap[parseInt(cols[j].innerText)].join(\",\") + '\"';\n                } else if (format === 'clipboard') {\n                  loc = colorLocMap[parseInt(cols[j].innerText)].join(\",\");\n                }\n              }\n              row.push(loc);\n            }\n          }\n\n          if (format === \"csv\") {\n            data.push(row.join(\",\"));\n          } else if (format === 'clipboard') {\n            data.push(row.join(\"\\t\"));\n            //data.push(row);   // for text type\n          }\n\n        }\n        if (format === \"csv\") {\n          // Download CSV file\n          this.downloadCSV(data.join(\"\\n\"), 'table.csv');\n        } else if (format === 'clipboard') {\n          //return formatTableToString(data);   // for text type\n          return data.join(\"\\n\");\n        }\n      },\n\n      createExportButton: function() {\n        let that = this;\n        let overlayContainer = $(\"<div>\").addClass(\"plate-setup-bottom-control-container\");\n\n        let descriptionDiv = $(\"<div>\").addClass(\"plate-setup-overlay-text-container\");\n        descriptionDiv.text(\"Color groups\");\n        overlayContainer.append(descriptionDiv);\n\n        let buttonContainer = $(\"<div>\").addClass(\"plate-setup-overlay-bottom-button-container\");\n\n        // create export csv option\n        let exportButton = $(\"<button/>\").addClass(\"plate-setup-button\");\n        exportButton.text(\"Export CSV\");\n        buttonContainer.append(exportButton);\n\n        exportButton.click(function() {\n          that.exportData('csv');\n          exportButton.text(\"Exported\");\n          exportButton[0].classList.remove(\"plate-setup-button\");\n          exportButton.addClass(\"plate-setup-clicked-button\");\n          setTimeout(resetExportText, 3000);\n        });\n\n        function resetExportText() {\n          exportButton.text(\"Export CSV\");\n          exportButton[0].classList.remove(\"plate-setup-clicked-button\");\n          exportButton.addClass(\"plate-setup-button\");\n        }\n\n        // creat clipboard option, CLipboard is an external js file located in vendor/asset/javascripts\n        let clipboardButton = $(\"<button/>\").addClass(\"plate-setup-button\");\n        clipboardButton.text(\"Copy To Clipboard\");\n        buttonContainer.append(clipboardButton);\n\n        let clipboard = new ClipboardJS(clipboardButton.get(0), {\n          text: function() {\n            return that.exportData(\"clipboard\");\n          }\n        });\n\n        clipboard.on('success', function() {\n          clipboardButton.text(\"Copied as tab-delimited format\");\n          clipboardButton[0].classList.remove(\"plate-setup-button\");\n          clipboardButton.addClass(\"plate-setup-clicked-button\");\n          setTimeout(resetClipboardText, 3000);\n        });\n\n        function resetClipboardText() {\n          clipboardButton.text(\"Copy To Clipboard\");\n          clipboardButton[0].classList.remove(\"plate-setup-clicked-button\");\n          clipboardButton.addClass(\"plate-setup-button\");\n        }\n\n        clipboard.on('error', function() {\n          clipboardButton.text(\"Failed to copy table to clipboard: browser may be incompatible\");\n          setTimeout(resetClipboardText, 3000);\n        });\n\n        overlayContainer.append(buttonContainer);\n        this.bottomContainer.prepend(overlayContainer);\n      }\n    };\n  }\n})(jQuery);","var plateMapWidget = plateMapWidget || {};\n\n(function($) {\n\n  plateMapWidget.checkBox = function() {\n    // For those check boxes associated with every field in the tab\n    return {\n\n      globalSelectedAttributes: [],\n      globalSelectedMultiplexSubfield: [],\n      allCheckboxes: [],\n\n      _addCheckBox: function(field) {\n        let checkImage = $(\"<span>\").html(this._assets.dontImg).addClass(\"plate-setup-tab-check-box bg-light\")\n          .data(\"clicked\", false);\n        let linkedFieldId = field.full_id;\n        checkImage.data(\"linkedFieldId\", linkedFieldId);\n        field.root.find(\".plate-setup-tab-field-left-side\").empty().append(checkImage);\n        this._applyCheckboxHandler(checkImage); // Adding handler for change the image when clicked\n        field.checkbox = checkImage;\n        this.allCheckboxes.push(linkedFieldId);\n      },\n\n      _applyCheckboxHandler: function(checkBoxImage) {\n        let that = this;\n        checkBoxImage.click(function() {\n          let checkBox = $(this);\n\n          let changes = {};\n          changes[checkBox.data(\"linkedFieldId\")] = !checkBox.data(\"clicked\");\n\n          that.changeCheckboxes(changes);\n        });\n      },\n\n      getCheckboxes: function () {\n        return this.allCheckboxes.filter(function (fieldId) {\n          let field = this.fieldMap[fieldId];\n          if (field.mainMultiplexField) {\n            let subfields = this.globalSelectedMultiplexSubfield[field.mainMultiplexField.id] || [];\n            return subfields.indexOf(field.id);\n          } else {\n            return this.globalSelectedAttributes.indexOf(field.id) >= 0;\n          }\n        }, this);\n      },\n\n      changeSubFieldsCheckboxes: function(field, changes) {\n        let that = this;\n        let subFieldToInclude = [];\n\n        field.subFieldList.forEach(function(subField) {\n          let checkImage = subField.checkbox;\n          let fieldId = checkImage.data(\"linkedFieldId\");\n          let clicked = checkImage.data(\"clicked\");\n          if (fieldId in changes) {\n            clicked = Boolean(changes[fieldId]);\n          }\n          checkImage.data(\"clicked\", clicked);\n          if (clicked) {\n            checkImage.html(that._assets.doImg);\n            subFieldToInclude.push(subField.id);\n          } else {\n            checkImage.html(that._assets.dontImg);\n          }\n        });\n        return subFieldToInclude;\n      },\n\n      changeCheckboxes: function(changes, noUndoRedo) {\n        let gsa = [];\n        let multiplexCheckedSubField = {};\n        for (let i = 0; i < this.fieldList.length; i++) {\n          let field = this.fieldList[i];\n          if (field.checkbox) {\n            if (field.subFieldList) {\n              multiplexCheckedSubField[field.id] = this.changeSubFieldsCheckboxes(field, changes);\n            }\n\n            let checkImage = field.checkbox;\n            let fieldId = checkImage.data(\"linkedFieldId\");\n            let clicked = checkImage.data(\"clicked\");\n            if (fieldId in changes) {\n              clicked = Boolean(changes[fieldId]);\n            }\n            checkImage.data(\"clicked\", clicked);\n            if (clicked) {\n              gsa.push(fieldId);\n              checkImage.html(this._assets.doImg);\n            } else {\n              checkImage.html(this._assets.dontImg);\n            }\n          }\n        }\n        this.globalSelectedMultiplexSubfield = multiplexCheckedSubField;\n        this.globalSelectedAttributes = gsa;\n        this._clearPresetSelection();\n        this._colorMixer();\n        if (!noUndoRedo) {\n          this.addToUndoRedo();\n        }\n      },\n\n      setSubFieldCheckboxes: function(field, fieldIds) {\n        let that = this;\n        let subFieldToInclude = [];\n        field.subFieldList.forEach(function(subField) {\n          let checkImage = subField.checkbox;\n          let fieldId = checkImage.data(\"linkedFieldId\");\n          let clicked = fieldIds.indexOf(fieldId) >= 0;\n          checkImage.data(\"clicked\", clicked);\n          if (clicked) {\n            checkImage.html(that._assets.doImg);\n            subFieldToInclude.push(subField.id);\n          } else {\n            checkImage.html(that._assets.dontImg);\n          }\n        });\n        return subFieldToInclude;\n      },\n\n      setCheckboxes: function(fieldIds, noUndoRedo) {\n        fieldIds = fieldIds || [];\n        let gsa = [];\n        let multiplexCheckedSubField = {};\n\n        for (let i = 0; i < this.fieldList.length; i++) {\n          let field = this.fieldList[i];\n          if (field.checkbox) {\n            // special handling for multiplex field\n            if (field.subFieldList) {\n              multiplexCheckedSubField[field.id] = this.setSubFieldCheckboxes(field, fieldIds);\n            }\n\n            let checkImage = field.checkbox;\n            let fieldId = checkImage.data(\"linkedFieldId\");\n            let clicked = fieldIds.indexOf(fieldId) >= 0;\n            checkImage.data(\"clicked\", clicked);\n            if (clicked) {\n              gsa.push(fieldId);\n              checkImage.html(this._assets.doImg);\n            } else {\n\n              checkImage.html(this._assets.dontImg);\n            }\n          }\n        }\n        this.globalSelectedMultiplexSubfield = multiplexCheckedSubField;\n        this.globalSelectedAttributes = gsa;\n        this._clearPresetSelection();\n        this._colorMixer();\n        if (!noUndoRedo) {\n          this.addToUndoRedo();\n        }\n      }\n\n    };\n  }\n})(jQuery);","var plateMapWidget = plateMapWidget || {};\n\nplateMapWidget.colorManager = function() {\n\n  return {\n    // See these are color pairs for the gradient.\n    colorPairs: [\n      [\"#e6e6e6\", \"#808080\"],\n      [\"#66e8ff\", \"#0082c8\"],\n      [\"#ff7fb1\", \"#e6194b\"],\n      [\"#a2ffb1\", \"#3cb44b\"],\n      [\"#f784ff\", \"#911eb4\"],\n      [\"#ffe897\", \"#f58231\"],\n      [\"#6666ff\", \"#0000FF\"],\n      [\"#ffff7f\", \"#ffe119\"],\n      [\"#acffff\", \"#46f0f0\"],\n      [\"#ff98ff\", \"#f032e6\"],\n      [\"#ffffa2\", \"#d2f53c\"],\n      [\"#ffffff\", \"#fabebe\"],\n      [\"#66e6e6\", \"#008080\"],\n      [\"#ffffff\", \"#e6beff\"],\n      [\"#ffd48e\", \"#aa6e28\"],\n      [\"#e66666\", \"#800000\"],\n      [\"#ffffff\", \"#aaffc3\"],\n      [\"#e6e666\", \"#808000\"],\n      [\"#ffffff\", \"#ffd8b1\"],\n      [\"#66a9ef\", \"#004389\"],\n      [\"#ff6672\", \"#a7000c\"],\n      [\"#66db72\", \"#00750c\"],\n      [\"#b866db\", \"#520075\"],\n      [\"#ffa966\", \"#b64300\"],\n      [\"#ffff66\", \"#c0a200\"],\n      [\"#6dffff\", \"#07b1b1\"],\n      [\"#ff66ff\", \"#b100a7\"],\n      [\"#f9ff66\", \"#93b600\"],\n      [\"#ffe5e5\", \"#bb7f7f\"],\n      [\"#66a7a7\", \"#004141\"],\n      [\"#ffe5ff\", \"#a77fc0\"],\n      [\"#d19566\", \"#6b2f00\"],\n      [\"#ffffef\", \"#c0bb89\"],\n      [\"#d1ffea\", \"#6bc084\"],\n      [\"#a7a766\", \"#414100\"],\n      [\"#ffffd8\", \"#c09972\"],\n      [\"#a5ffff\", \"#3fc1ff\"],\n      [\"#ffbef0\", \"#ff588a\"],\n      [\"#e1fff0\", \"#7bf38a\"],\n      [\"#ffc3ff\", \"#d05df3\"],\n      [\"#ffffd6\", \"#ffc170\"],\n      [\"#a5a5ff\", \"#3f3fff\"],\n      [\"#ffffbe\", \"#ffff58\"],\n      [\"#ebffff\", \"#85ffff\"],\n      [\"#ffd7ff\", \"#ff71ff\"],\n      [\"#a5ffff\", \"#3fbfbf\"],\n      [\"#ffffcd\", \"#e9ad67\"],\n      [\"#ffa5a5\", \"#bf3f3f\"],\n      [\"#ffffa5\", \"#bfbf3f\"]\n    ]\n  }\n};\n","var plateMapWidget = plateMapWidget || {};\n\n(function($) {\n\n  function select2close(ev) {\n    if (ev.params.args.originalEvent) {\n      // When unselecting (in multiple mode)\n      ev.params.args.originalEvent.stopPropagation();\n    } else {\n      // When clearing (in single mode)\n      $(this).one('select2:opening', function(ev) { ev.preventDefault(); });\n    }\n  }\n\n  function select2fix(input) {\n    // prevents select2 open on clear as of v4.0.8\n    input.on('select2:unselecting', select2close);\n  }\n\n  function select2setData(input, data, selected) {\n    input.empty();\n    let dataAdapter = input.data('select2').dataAdapter;\n    dataAdapter.addOptions(dataAdapter.convertToOptions(data));\n    input.val(selected);\n  }\n\n  plateMapWidget.createField = function() {\n    // It creates those fields in the tab , there is 4 types of them.\n    return {\n\n      _createField: function(field) {\n        switch (field.data.type) {\n          case \"text\":\n            this._createTextField(field);\n            break;\n\n          case \"numeric\":\n            this._createNumericField(field);\n            break;\n\n          case \"select\":\n            this._createSelectField(field);\n            break;\n\n          case \"multiselect\":\n            this._createMultiSelectField(field);\n            break;\n\n          case \"boolean\":\n            this._createBooleanField(field);\n            break;\n\n          case \"multiplex\":\n            this._createMultiplexField(field);\n            break;\n        }\n      },\n\n      _createTextField: function(field) {\n        let input = this._createElement(\"<input>\").attr(\"id\", field.full_id)\n          .addClass(\"plate-setup-tab-input\");\n\n        field.root.find(\".plate-setup-tab-field-container\").append(input);\n\n        field.parseValue = function(v) {\n          if (v) {\n            v = String(v);\n          } else {\n            v = null;\n          }\n          return v;\n        };\n\n        field.getValue = function() {\n          return input.val().trim() || null;\n        };\n\n        field.setValue = function(v) {\n          input.val(v);\n        };\n\n        field.getText = function(v) {\n          if (v == null) {\n            return \"\";\n          }\n          return v;\n        };\n\n        field.disabled = function(bool) {\n          field.input.prop(\"disabled\", bool);\n        };\n\n        field.parseText = field.parseValue;\n\n        input.on(\"input\", function() {\n          field.onChange();\n        });\n\n        field.input = input;\n      },\n\n      _createOpts: function(config) {\n        let opts = {\n          allowClear: true,\n          placeholder: \"select\",\n          minimumResultsForSearch: 10\n        };\n        let data_specified = false;\n\n        if (config.options) {\n          opts.data = config.options;\n          data_specified = true;\n        }\n        if (config.ajax) {\n          opts.ajax = ajax;\n          data_specified = true;\n        }\n        if (!data_specified) {\n          throw \"Must specify data or ajax\";\n        }\n        return opts;\n      },\n\n      _createSelectField: function(field) {\n        let full_id = field.full_id;\n        let that = this;\n        let input = this._createElement(\"<select/>\").attr(\"id\", full_id)\n          .addClass(\"plate-setup-tab-select-field\");\n\n        field.root.find(\".plate-setup-tab-field-container\").append(input);\n\n        let opts = that._createOpts(field.data);\n        let optMap = {};\n        opts.data.forEach(function(opt) {\n          optMap[String(opt.id)] = opt;\n        });\n\n        input.select2(opts);\n        select2fix(input);\n\n        field.parseValue = function(value) {\n          let v = value;\n\n          if (v === \"\") {\n            v = null;\n          }\n          if (v == null) {\n            return null;\n          }\n          v = String(v);\n          if (v in optMap) {\n            return optMap[v].id;\n          } else {\n            throw \"Invalid value \" + value + \" for select field \" + full_id;\n          }\n        };\n\n        field.disabled = function(bool) {\n          field.input.prop(\"disabled\", bool);\n        };\n\n        field.getValue = function() {\n          return field.parseValue(input.val());\n        };\n\n        field.setValue = function(v) {\n          input.val(v);\n          input.trigger(\"change.select2\")\n        };\n\n        field.getText = function(v) {\n          if (v == null) {\n            return \"\";\n          }\n          return optMap[String(v)].text;\n        };\n\n        field.parseText = function(value) {\n          let v = value;\n\n          if (v === \"\") {\n            v = null;\n          }\n          if (v == null) {\n            return null;\n          }\n          v = String(v);\n          if (v in optMap) {\n            return optMap[v].text;\n          } else {\n            throw \"Invalid text value \" + value + \" for select field \" + full_id;\n          }\n        };\n\n        input.on(\"change\", function() {\n          field.onChange();\n        });\n\n        field.input = input;\n      },\n\n      _createMultiSelectField: function(field) {\n        let full_id = field.full_id;\n        let that = this;\n        let input = this._createElement(\"<select/>\").attr(\"id\", full_id)\n          .addClass(\"plate-setup-tab-multiselect-field\");\n        input.attr(\"multiple\", \"multiple\");\n\n        field.root.find(\".plate-setup-tab-field-container\").append(input);\n\n        let opts = that._createOpts(field.data);\n        opts.multiple = true;\n        let optMap = {};\n        opts.data.forEach(function(opt) {\n          optMap[String(opt.id)] = opt;\n        });\n        input.select2(opts);\n        select2fix(input);\n\n        field.disabled = function(bool) {\n          input.prop(\"disabled\", bool);\n        };\n\n        field._parseOne = function(val) {\n          val = String(val);\n          if (val in optMap) {\n            return optMap[val].id;\n          } else {\n            throw \"Invalid value \" + val + \" for multiselect field \" + full_id;\n          }\n        };\n\n        field._parseMany = function(vals) {\n          if (vals && vals.length) {\n            vals = vals.map(field._parseOne, this);\n          } else {\n            vals = null;\n          }\n          return vals;\n        };\n\n        field.parseValue = function(value) {\n          return field._parseMany(value);\n        };\n\n        field.getValue = function() {\n          return field._parseMany(input.val());\n        };\n\n        field.setValue = function(v) {\n          v = v || [];\n          input.val(v);\n          input.trigger(\"change.select2\");\n        };\n\n        field.getText = function(v) {\n          if (v == null) {\n            return \"\";\n          }\n          if (v.length > 0) {\n            return v.map(v => optMap[String(v)].text).join(\"; \");\n          }\n          return \"\";\n        };\n\n        field.multiOnChange = function(added, removed) {\n          if (added) {\n            added = added.id;\n          }\n          if (removed) {\n            removed = removed.id;\n          }\n          let data = {};\n          data[field.id] = {\n            multi: true,\n            added: added,\n            removed: removed\n          };\n          that._addAllData(data);\n        };\n\n        field.parseText = function(value) {\n          let v = value;\n          if (v && v.length) {\n            v = v.map(function(opt) {\n              opt = String(opt);\n              if (opt in optMap) {\n                return optMap[opt].text;\n              } else {\n                throw \"Invalid text value \" + opt + \" for multiselect field \" + full_id;\n              }\n            });\n          } else {\n            v = null;\n          }\n          return v;\n        };\n\n        input.on(\"select2:select\", function (e) {\n          let v = field._parseOne(e.params.data.id);\n          v = {id: v};\n          field.multiOnChange(v, null);\n        });\n\n        input.on(\"select2:unselect\", function (e) {\n          let v = field._parseOne(e.params.data.id);\n          v = {id: v};\n          field.multiOnChange(null, v);\n        });\n\n        field.input = input;\n\n        that._createDeleteButton(field);\n      },\n\n      _createNumericField: function(field) {\n        let full_id = field.full_id;\n        let data = field.data;\n        let input = this._createElement(\"<input>\").addClass(\"plate-setup-tab-input\")\n          .attr(\"placeholder\", data.placeholder || \"\").attr(\"id\", full_id);\n\n        field.root.find(\".plate-setup-tab-field-container\").append(input);\n\n        // Adding unit\n        let units = data.units || [];\n        let defaultUnit = data.defaultUnit || null;\n        let unitInput = null;\n        if (defaultUnit) {\n          if (units.length) {\n            if (units.indexOf(defaultUnit) < 0) {\n              defaultUnit = units[0];\n            }\n          } else {\n            units = [defaultUnit];\n          }\n        } else {\n          if (units.length) {\n            defaultUnit = units[0];\n          }\n        }\n\n        if (units.length) {\n          field.units = units;\n          field.hasUnits = true;\n          field.defaultUnit = defaultUnit;\n          if (units.length === 1) {\n            let unitText = $(\"<div></div>\").addClass(\"plate-setup-tab-unit\");\n            unitText.text(defaultUnit);\n            field.root.find(\".plate-setup-tab-field-container\").append(unitText);\n          } else {\n            unitInput = this._createElement(\"<select/>\").attr(\"id\", full_id + \"Units\")\n              .addClass(\"plate-setup-tab-label-select-field\");\n\n            field.root.find(\".plate-setup-tab-field-container\").append(unitInput);\n\n            let selected = null;\n            let unitData = units.map(function(unit) {\n              let o = {\n                id: unit,\n                text: unit\n              };\n              if (unit === defaultUnit) {\n                selected = unit;\n              }\n              return o;\n            });\n\n            let opts = {\n              data: unitData,\n              allowClear: false,\n              minimumResultsForSearch: 10\n            };\n\n            unitInput.select2(opts);\n            unitInput.val(selected);\n          }\n        }\n\n        field.disabled = function(bool) {\n          field.input.prop(\"disabled\", bool);\n          if (unitInput) {\n            unitInput.prop(\"disabled\", bool);\n          }\n        };\n\n        field.setUnitOpts = function(opts) {\n          field.units = opts || null;\n          field.defaultUnit = null;\n\n          let newUnits = [];\n          let selected = null;\n          if (field.units && field.units.length) {\n            field.defaultUnit = field.units[0];\n            newUnits = field.units.map(function(curUnit) {\n              let cleanUnit = {\n                id: curUnit,\n                text: curUnit\n              };\n              if (curUnit === field.defaultUnit) {\n                selected = curUnit;\n              }\n              return cleanUnit;\n            });\n          }\n\n          select2setData(unitInput, newUnits, selected);\n        };\n\n        field.parseValue = function(value) {\n          let v;\n          if ($.isPlainObject(value)) {\n            if (field.hasUnits) {\n              v = field.parseRegularValue(value.value);\n              if (v === null) {\n                return null;\n              }\n              return {\n                value: v,\n                unit: field.parseUnit(value.unit)\n              };\n            } else {\n              throw \"Value must be plain numeric for numeric field \" + full_id;\n            }\n          } else {\n            if (field.hasUnits) {\n              v = field.parseRegularValue(value);\n              if (v === null) {\n                return null;\n              }\n              return {\n                value: v,\n                unit: field.defaultUnit\n              };\n            } else {\n              return field.parseRegularValue(value);\n            }\n          }\n        };\n\n        field.getValue = function() {\n          let v = field.getRegularValue();\n\n          if ((v === null) || isNaN(v)) {\n            return null;\n          } else if (field.hasUnits) {\n            let returnVal = {\n              value: v,\n              unit: field.getUnit()\n            };\n\n            if (field.data.hasMultiplexUnit) {\n              // include unitTypeId and UnitId to returnVal\n              let unitMap = field.data.unitMap;\n              for (let unitTypeKey in unitMap) {\n                if (!unitMap.hasOwnProperty(unitTypeKey)) {\n                  continue;\n                }\n                let unitTypeUnits = unitMap[unitTypeKey];\n                unitTypeUnits.forEach(function(unit) {\n                  if (unit.text === returnVal.unit) {\n                    returnVal['unitTypeId'] = unitTypeKey;\n                    returnVal['unitId'] = unit.id;\n                  }\n                })\n              }\n            }\n            return returnVal;\n          } else {\n            return v;\n          }\n        };\n\n        field.setValue = function(value) {\n          if (field.hasUnits) {\n            if ($.isPlainObject(value)) {\n              field.setUnit(value.unit || field.defaultUnit);\n              field.setRegularValue(value.value);\n\n            } else {\n              field.setRegularValue(value);\n              field.setUnit(field.defaultUnit)\n            }\n          } else {\n            field.setRegularValue(value);\n          }\n        };\n\n        field.parseRegularValue = function(value) {\n          if (value == null) {\n            return null;\n          }\n          let v = String(value).trim();\n          if (v === \"\") {\n            return null;\n          }\n          v = Number(value);\n          if (isNaN(v)) {\n            throw \"Invalid value \" + value + \" for numeric field \" + full_id;\n          }\n          return v;\n        };\n\n        field.getRegularValue = function() {\n          let v = input.val().trim();\n          if (v === \"\") {\n            v = null;\n          } else {\n            v = Number(v);\n          }\n          return v;\n        };\n\n        field.setRegularValue = function(value) {\n          input.val(value);\n        };\n\n        field.parseUnit = function(unit) {\n          if (unit == null || unit === \"\") {\n            return field.defaultUnit;\n          }\n          for (let i = 0; i < units.length; i++) {\n            if (unit.toLowerCase() === units[i].toLowerCase()) {\n              return units[i];\n            }\n          }\n          throw \"Invalid unit \" + unit + \" for field \" + full_id;\n        };\n\n        field.getUnit = function() {\n          if (unitInput) {\n            return unitInput.val();\n          } else {\n            return field.defaultUnit;\n          }\n        };\n\n        field.setUnit = function(unit) {\n          if (unitInput) {\n            unit = unit || field.defaultUnit;\n            unitInput.val(unit);\n            unitInput.trigger(\"change.select2\");\n          }\n        };\n\n        // val now contains unit\n        field.getText = function(val) {\n          if (typeof (val) === 'object' && val) {\n            let v = val.value;\n            let u = val.unit;\n            if (v == null) {\n              return \"\";\n            }\n            v = v.toString();\n            if (!u) {\n              u = defaultUnit;\n            }\n            if (u) {\n              v = v + \" \" + u;\n            }\n            return v;\n          } else {\n            return field.getRegularText(val);\n          }\n        };\n\n        field.getRegularText = function(v) {\n          if (v == null) {\n            return \"\";\n          }\n          v = v.toString();\n          return v;\n        };\n\n        field.parseText = function(v) {\n          let textVal = field.parseValue(v);\n          if (textVal && typeof (textVal) === \"object\") {\n            return textVal.value + textVal.unit;\n          } else if (textVal) {\n            return textVal\n          } else {\n            return null;\n          }\n        };\n\n        input.on(\"input\", function() {\n          let v = field.getRegularValue();\n          if (isNaN(v)) {\n            //flag field as invalid\n            input.addClass(\"invalid\");\n          } else {\n            input.removeClass(\"invalid\");\n          }\n          field.onChange();\n        });\n        if (unitInput) {\n          unitInput.on(\"change\", function() {\n            field.onChange();\n          });\n        }\n\n        field.input = input;\n        field.unitInput = unitInput;\n      },\n\n      _createBooleanField: function(field) {\n        let full_id = field.full_id;\n        let input = this._createElement(\"<select/>\").attr(\"id\", full_id)\n          .addClass(\"plate-setup-tab-select-field\");\n\n        field.root.find(\".plate-setup-tab-field-container\").append(input);\n        let tval = {\n          id: \"true\",\n          text: \"true\"\n        };\n        let fval = {\n          id: \"false\",\n          text: \"false\"\n        };\n        let opts = {\n          data: [tval, fval],\n          placeholder: \"select\",\n          allowClear: true,\n          minimumResultsForSearch: -1\n        };\n\n        input.select2(opts);\n        select2fix(input);\n\n        field.disabled = function(bool) {\n          field.input.prop(\"disabled\", bool);\n        };\n\n        field.parseValue = function(value) {\n          if (value == null) {\n            return null;\n          }\n          let v = String(value).trim().toLowerCase();\n          if (v === \"true\") {\n            v = true;\n          } else if (v === \"false\") {\n            v = false;\n          } else if (v === \"\") {\n            v = null;\n          } else {\n            throw \"Invalid value \" + value + \" for boolean field \" + full_id;\n          }\n          return v;\n        };\n\n        field.getValue = function() {\n          let v = input.val();\n          switch (v) {\n            case \"true\":\n              return true;\n            case \"false\":\n              return false;\n            default:\n              return null;\n          }\n        };\n\n        field.setValue = function(v) {\n          if (v === 1 || v === true || v === \"true\") {\n            v = \"true\";\n          } else if (v === 0 || v === false || v === \"false\") {\n            v = \"false\";\n          } else {\n            v = null;\n          }\n          input.val(v);\n          input.trigger(\"change.select2\");\n        };\n\n        field.getText = function(v) {\n          if (v == null) {\n            return \"\";\n          }\n          return v.toString();\n        };\n\n        field.parseText = field.parseValue;\n\n        input.on(\"change\", function() {\n          field.onChange();\n        });\n\n        field.input = input;\n      },\n\n      _createMultiplexField: function(field) {\n        let that = this;\n        // make correct multiplex data\n        this._createMultiSelectField(field);\n\n        // single select\n        let nameContainer1 = this._createElement(\"<div></div>\").addClass(\"plate-setup-tab-name-singleSelect\").text(\"Select to edit\");\n        let fieldContainer1 = this._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-container-singleSelect\");\n        field.root.find(\".plate-setup-tab-field-right-side\").append(nameContainer1, fieldContainer1);\n\n        field.singleSelect = this._createElement(\"<select/>\").attr(\"id\", field.full_id + \"SingleSelect\")\n          .addClass(\"plate-setup-tab-multiplex-single-select-field\");\n\n        field.singleSelect.appendTo(fieldContainer1);\n        let opts = {\n          allowClear: false,\n          placeholder: \"select\",\n          minimumResultsForSearch: 10,\n          data: []\n        };\n        field.singleSelect.select2(opts);\n        select2fix(field.singleSelect);\n\n        let multiselectSetValue = field.setValue;\n\n        field.singleSelectValue = function() {\n          let v = field.singleSelect.val();\n          if (v === \"\") {\n            return null;\n          }\n          if (v == null) {\n            return null;\n          }\n          return field._parseOne(v)\n        };\n\n        let setSingleSelectOptions = function(data, selected) {\n          data = data || [];\n\n          if (!selected) {\n            if (data.length) {\n              selected = data[0].id;\n            } else {\n              selected = null;\n            }\n          }\n          select2setData(field.singleSelect, data, selected);\n          field.singleSelect.prop(\"disabled\", data.length === 0);\n          field.singleSelect.trigger(\"change.select2\");\n        };\n\n        let singleSelectChange = function() {\n          let v = field.singleSelectValue();\n\n          field.updateSubFieldUnitOpts(v);\n\n          let curData = field.detailData || [];\n          let curSubField = null;\n          curData.forEach(function(val) {\n            if (val[field.id] === v) {\n              curSubField = val;\n            }\n          });\n\n          if (curSubField) {\n            // setvalue for subfield\n            field.subFieldList.forEach(function(subField) {\n              subField.disabled(false);\n              subField.setValue(curSubField[subField.id]);\n            });\n          } else {\n            field.subFieldList.forEach(function(subField) {\n              subField.disabled(true);\n              subField.setValue(null);\n            });\n          }\n          that.readOnlyHandler();\n        };\n\n        setSingleSelectOptions([]);\n        field.singleSelect.on(\"change.select2\", singleSelectChange);\n\n        field._changeMultiFieldValue = function(added, removed) {\n          let newSubFieldValue = {};\n          for (let i = 0; i < field.subFieldList.length; i++) {\n            let subFieldId = field.subFieldList[i].id;\n            newSubFieldValue[subFieldId] = null;\n          }\n\n          let val;\n          if (added) {\n            if (added.value) {\n              val = added.value;\n            } else {\n              newSubFieldValue[field.id] = added.id;\n              val = newSubFieldValue;\n            }\n            added = {\n              id: added.id,\n              value: val\n            };\n          }\n\n          if (removed) {\n            if (removed.value) {\n              val = removed.value;\n            } else {\n              newSubFieldValue[field.id] = removed.id;\n              val = newSubFieldValue;\n            }\n            removed = {\n              id: removed.id,\n              value: val\n            };\n          }\n\n          let data = {};\n          data[field.id] = {\n            multi: true,\n            added: added,\n            removed: removed\n          };\n          that._addAllData(data);\n        };\n\n        field.setValue = function(v) {\n          // used to keep track of initially loaded multiplex data\n          field.detailData = v;\n          let multiselectValues = null;\n          if (v && v.length) {\n            multiselectValues = v.map(val => val[field.id]);\n          }\n\n          multiselectSetValue(multiselectValues);\n          let newOptions = field.input.select2('data') || [];\n          setSingleSelectOptions(newOptions);\n          singleSelectChange();\n        };\n\n        field.disabled = function(bool) {\n          field.input.prop(\"disabled\", bool);\n          field.subFieldList.forEach(function(subField) {\n            subField.disabled(bool);\n          });\n          if (bool) {\n            nameContainer1.text(\"Select to inspect\");\n          } else {\n            nameContainer1.text(\"Select to edit\");\n          }\n        };\n\n        field.parseValue = function(value) {\n          let v = value;\n          if (v && v.length) {\n            v = v.map(function(opt) {\n              let valMap = {};\n              valMap[field.id] = opt[field.id];\n              for (let subFieldId in opt) {\n                if (opt.hasOwnProperty(subFieldId)) {\n                  field.subFieldList.forEach(function(subField) {\n                    if (subField.id === subFieldId) {\n                      valMap[subField.id] = subField.parseValue(opt[subFieldId]);\n                    }\n                  });\n                }\n              }\n              return valMap;\n            });\n          } else {\n            v = null;\n          }\n          return v;\n        };\n\n        field.updateSubFieldUnitOpts = function(val) {\n          let curOpts;\n          field.data.options.forEach(function(opt) {\n            if (opt.id === val) {\n              curOpts = opt;\n            }\n          });\n          field.subFieldList.forEach(function(subField) {\n            if (subField.data.hasMultiplexUnit) {\n              if (curOpts && curOpts.hasOwnProperty(\"unitOptions\")) {\n                subField.setUnitOpts(curOpts.unitOptions[subField.id]);\n              } else {\n                subField.setUnitOpts(null);\n              }\n            }\n          })\n        };\n\n        field.multiOnChange = function(added, removed) {\n          field._changeMultiFieldValue(added, removed);\n          let v = field.getValue();\n          let curData = field.detailData;\n          let curIds = [];\n          let curOpt = null;\n          //reshape data for saveback\n          if (curData) {\n            curIds = curData.map(val => val[field.id]);\n          }\n\n          let newMultiplexVal = [];\n          let selectList = [];\n          if (v) {\n            v.forEach(function(selectedVal) {\n              if (curData) {\n                curData.forEach(function(val) {\n                  if (val[field.id] === selectedVal) {\n                    newMultiplexVal.push(val)\n                  }\n                });\n              }\n              // cases when adding new data\n              if (curIds.indexOf(selectedVal) < 0) {\n                let newVal = {};\n                newVal[field.id] = selectedVal;\n\n                field.updateSubFieldUnitOpts(selectedVal);\n                field.subFieldList.forEach(function(subfield) {\n                  // special handling for subfield which has multiplexUnit\n                  if (subfield.hasUnits) {\n                    if (subfield.data.hasMultiplexUnit) {\n                      subfield.disabled(false);\n                      field.data.options.forEach(function(opt) {\n                        if (opt.id === selectedVal) {\n                          let val = {\n                            value: null,\n                            unit: subfield.units[0]\n                          };\n                          newVal[subfield.id] = subfield.parseValue(val);\n                        }\n                      });\n                    } else {\n                      if (subfield.data.units) {\n                        if (subfield.data.units.length > 1) {\n                          subfield.disabled(false);\n                        }\n                      }\n                      let val = {\n                        value: null,\n                        unit: subfield.defaultUnit\n                      };\n                      newVal[subfield.id] = subfield.parseValue(val);\n                    }\n                  } else {\n                    newVal[subfield.id] = subfield.parseValue(null);\n                  }\n                });\n                newMultiplexVal.push(newVal);\n              }\n            });\n\n            // make data for single select options\n            v.forEach(function(selectVal) {\n              field.data.options.forEach(function(opt) {\n                if (opt.id === selectVal) {\n                  selectList.push(opt);\n                }\n              });\n            });\n\n            let selected = field.singleSelectValue();\n            for (let i = 0; i < v.length; i++) {\n              if (added && (added.id === v[i])) {\n                curOpt = v[i];\n                break;\n              } else if (i === 0) {\n                curOpt = v[i];\n              } else if (v[i] === selected) {\n                curOpt = v[i];\n              }\n            }\n          }\n\n          field.detailData = newMultiplexVal;\n          setSingleSelectOptions(selectList, curOpt);\n          singleSelectChange();\n        };\n\n        field.getText = function(v) {\n          if (v === null) {\n            return \"\";\n          }\n          // get subfields that is selected from the checkbox\n          if (field.id in that.globalSelectedMultiplexSubfield) {\n            let checkedSubfields = that.globalSelectedMultiplexSubfield[field.id];\n            let returnVal = [];\n            for (let valIdx in v) {\n              if (!v.hasOwnProperty(valIdx)) {\n                continue;\n              }\n              let subV = v[valIdx];\n              let subText = [];\n              for (let optId in field.data.options) {\n                if (field.data.options.hasOwnProperty(optId)) {\n                  let opt = field.data.options[optId];\n                  if (opt.id === subV[field.id]) {\n                    subText.push(opt.text);\n                  }\n                }\n              }\n              field.subFieldList.forEach(function(subField) {\n                if (checkedSubfields.indexOf(subField.id) >= 0) {\n                  let x = subField.getText(subV[subField.id]);\n                  subText.push(subField.name + \": \" + x);\n                }\n              });\n              returnVal.push(\"{\" + subText.join(\", \") + \"}\");\n            }\n            return returnVal.join(\";\");\n          }\n        };\n\n        field.parseText = function(v) {\n          if (v === null) {\n            return \"\";\n          } else {\n            let returnVal = [];\n            for (let valIdx in v) {\n              if (!v.hasOwnProperty(valIdx)) {\n                continue;\n              }\n              let subV = v[valIdx];\n              let subText = [];\n              for (let optId in field.data.options) {\n                if (field.data.options.hasOwnProperty(optId)) {\n                  let opt = field.data.options[optId];\n                  if (opt.id === subV[field.id]) {\n                    subText.push(opt.text);\n                  }\n                }\n              }\n              field.subFieldList.forEach(function(subField) {\n                let x = subField.getText(subV[subField.id]);\n                if (x) {\n                  subText.push(x);\n                }\n              });\n              returnVal.push(subText);\n            }\n            return returnVal;\n          }\n        };\n\n        field.checkMultiplexCompletion = function(valList) {\n          let valCount = 0;\n          let completionPct = 0;\n          let include = false;\n\n          function getSubfieldStatus(vals) {\n            let req = 0;\n            let fill = 0;\n            for (let subFieldId in field.subFieldList) {\n              if (!field.subFieldList.hasOwnProperty(subFieldId)) {\n                continue;\n              }\n              let subField = field.subFieldList[subFieldId];\n              let curVal = vals[subField.id];\n              if (subField.required) {\n                include = true;\n                req++;\n                if (typeof curVal === 'object' && curVal) {\n                  if (curVal.value) {\n                    fill++;\n                  }\n                } else if (curVal) {\n                  fill++;\n                }\n              }\n            }\n            return fill / req;\n          }\n\n          // for cases has value in multiplex field\n          if (valList) {\n            if (valList.length > 0) {\n              for (let idx in valList) {\n                if (valList.hasOwnProperty(idx)) {\n                  valCount++;\n                  let vals = valList[idx];\n                  completionPct += getSubfieldStatus(vals);\n                }\n              }\n            } else if (field.required) {\n              include = true;\n              valCount = 1;\n            }\n          } else if (field.required) {\n            include = true;\n            valCount = 1;\n          }\n\n          return {\n            include: include,\n            completionPct: completionPct / valCount\n          };\n        };\n\n        // valList contains all of the vals for selected val\n        field.applyMultiplexSubFieldColor = function(valList) {\n          function updateSubFieldWarningMap(vals) {\n            for (let subFieldId in field.subFieldList) {\n              if (!field.subFieldList.hasOwnProperty(subFieldId)) {\n                continue;\n              }\n              let subField = field.subFieldList[subFieldId];\n              // loop through each well's multiplexval list\n              if (vals === null) {\n                if (field.required && subField.required) {\n                  subFieldWarningMap[subField.id].warningStatus.push(true);\n                }\n              } else if (typeof (vals) === \"object\") {\n                if (vals.length === 0) {\n                  if (field.required && subField.required) {\n                    subFieldWarningMap[subField.id].warningStatus.push(true);\n                  }\n                } else {\n                  for (let multiplexIdx in vals) {\n                    if (!vals.hasOwnProperty(multiplexIdx)) {\n                      continue;\n                    }\n                    let curVal = vals[multiplexIdx][subField.id];\n                    if (subField.required) {\n                      if (typeof (curVal) === 'object' && curVal) {\n                        if (!curVal.value) {\n                          subFieldWarningMap[subField.id].warningStatus.push(true);\n                        } else {\n                          subFieldWarningMap[subField.id].warningStatus.push(false);\n                        }\n                      } else if (!curVal) {\n                        subFieldWarningMap[subField.id].warningStatus.push(true);\n                      } else {\n                        subFieldWarningMap[subField.id].warningStatus.push(false);\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n\n          let subFieldWarningMap = {};\n          field.subFieldList.forEach(function(subField) {\n            if (subField.required) {\n              subFieldWarningMap[subField.id] = {\n                field: subField,\n                warningStatus: []\n              };\n            }\n          });\n\n          valList.forEach(function(multiplexVals) {\n            updateSubFieldWarningMap(multiplexVals);\n          });\n          // turn off main field when all subfield are filled\n\n          let mainFieldStatus = [];\n          for (let subFieldId in subFieldWarningMap) {\n            if (!subFieldWarningMap.hasOwnProperty(subFieldId)) {\n              continue;\n            }\n            let subField = subFieldWarningMap[subFieldId].field;\n            if (subFieldWarningMap[subFieldId].warningStatus.indexOf(true) >= 0) {\n              let text = subField.name + \" is a required subfield for \" + field.name + \", please make sure all \" + field.name + \" have \" + subField.name;\n              if (field.required) {\n                that.fieldWarningMsg(subField, text, true);\n                mainFieldStatus.push(true);\n              } else {\n                that.fieldWarningMsg(subField, text, true);\n                mainFieldStatus.push(true);\n              }\n            } else {\n              that.fieldWarningMsg(subField, \"none\", false);\n              mainFieldStatus.push(false);\n            }\n          }\n          let mainFieldWarning = mainFieldStatus.indexOf(true) >= 0;\n          let warningText;\n          if (field.required) {\n            warningText = field.name + \" is a required field, please also fix missing required subfield(s) below\";\n          } else {\n            warningText = field.name + \" is not a required field, please fix missing required subfield(s) below or remove selected \" + field.name;\n          }\n          that.fieldWarningMsg(field, warningText, mainFieldWarning);\n        };\n\n        field.parseMainFieldVal = function(val) {\n          let optMap = field.data.options;\n          for (let idx = 0; idx < optMap.length; idx++) {\n            let curOpt = optMap[idx];\n            if (curOpt.id === val) {\n              return curOpt.text\n            }\n          }\n        };\n      },\n\n      _deleteDialog: function(field) {\n        let that = this;\n\n        let valMap = field.allSelectedMultipleVal;\n        let valToRemove;\n        if (valMap) {\n          valToRemove = Object.keys(valMap);\n        } else {\n          valToRemove = [];\n        }\n\n\n        let dialogDiv = $(\"<div/>\").addClass(\"plate-modal\");\n        this.container.append(dialogDiv);\n\n        function killDialog() {\n          dialogDiv.hide();\n          dialogDiv.remove();\n        }\n\n        let dialogContent = $(\"<div/>\").addClass(\"plate-modal-content\").css('width', '550px').appendTo(dialogDiv);\n        let tableArea = $(\"<div/>\").appendTo(dialogContent);\n        let buttonRow = $(\"<div/>\").addClass(\"dialog-buttons\").css(\"justify-content\", \"flex-end\").appendTo(dialogContent);\n\n        if (valToRemove.length > 0) {\n          // apply CSS property for table\n          $(\"<p/>\").text(field.name + \" in selected wells: choose items to delete and click the delete button below\").appendTo(tableArea);\n\n          let table = that._deleteDialogTable(field, valMap);\n          table.appendTo(tableArea);\n          table.addClass(\"plate-popout-table\");\n          table.find('td').addClass(\"plate-popout-td\");\n          table.find('th').addClass(\"plate-popout-th\");\n          table.find('tr').addClass(\"plate-popout-tr\");\n          if (!that.readOnly) {\n            let deleteCheckedButton = $(\"<button class='multiple-field-manage-delete-button'>Delete Checked Items</button>\");\n            buttonRow.append(deleteCheckedButton);\n            deleteCheckedButton.click(function() {\n              table.find(\"input:checked\").each(function() {\n                let val = this.value;\n                field.multiOnChange(null, {id: val});\n              });\n              // refresh selected fields after updating the multiplex field value\n              that.decideSelectedFields();\n              killDialog();\n            });\n          }\n\n        } else {\n          $(\"<p/>\").text(\"No \" + field.name + \" in the selected wells\").appendTo(tableArea);\n        }\n\n        let cancelButton = $(\"<button>Cancel</button>\");\n        buttonRow.append(cancelButton);\n        cancelButton.click(killDialog);\n\n        dialogDiv.show();\n\n        window.onclick = function(event) {\n          if (event.target === dialogDiv[0]) {\n            killDialog();\n          }\n        }\n      },\n\n      _deleteDialogTable: function(field, valMap) {\n        let that = this;\n        let colName = [field.name, \"Counts\"]; //Added because it was missing... no idea what the original should have been\n        if (!that.readOnly) {\n          colName.push(\"Delete\");\n        }\n        let table = $('<table/>');\n        let thead = $('<thead/>').appendTo(table);\n        let tr = $('<tr/>').appendTo(thead);\n\n        tr.append(colName.map(function(text) {\n          return $('<th/>').text(text);\n        }));\n\n        let tbody = $(\"<tbody/>\").appendTo(table);\n\n        field.data.options.forEach(function(opt) {\n          if (opt.id in valMap) {\n            let tr = $('<tr/>').appendTo(tbody);\n            let checkbox = $(\"<input type='checkbox'>\").prop(\"value\", opt.id);\n            $(\"<td/>\").text(opt.text).appendTo(tr);\n            $(\"<td/>\").text(valMap[opt.id]).appendTo(tr);\n            if (!that.readOnly) {\n              $(\"<td/>\").append(checkbox).appendTo(tr);\n            }\n          }\n        });\n\n        return table;\n      },\n\n      _createDeleteButton: function(field) {\n        let that = this;\n        let deleteButton = $(\"<button/>\").addClass(\"plate-setup-remove-all-button\");\n        deleteButton.id = field.id + \"Delete\";\n        deleteButton.text(\"Manage \" + field.name + \"...\");\n        let buttonContainer = that._createElement(\"<div></div>\").addClass(\"plate-setup-remove-all-button-container\");\n        buttonContainer.append(deleteButton);\n\n        field.deleteButton = deleteButton;\n        field.root.find(\".plate-setup-tab-field-right-side\").append(buttonContainer);\n\n        deleteButton.click(function() {\n          that._deleteDialog(field);\n        });\n      }\n\n    };\n  }\n})(jQuery);","var plateMapWidget = plateMapWidget || {};\n\n(function($) {\n\n  plateMapWidget.engine = function(THIS) {\n    // Methods which look after data changes and stack up accordingly\n    // Remember THIS points to plateMapWidget and 'this' points to engine\n    // Use THIS to refer parent this.\n    return {\n      engine: {\n\n        derivative: {},\n        colorMap: new Map(),\n        stackUpWithColor: {},\n        stackPointer: 2,\n\n        wellEmpty: function(well) {\n          for (let prop in well) {\n            if (!well.hasOwnProperty(prop)) {\n              continue;\n            }\n            let curVal = well[prop];\n            if (curVal !== null && curVal !== undefined) {\n              if (Array.isArray(curVal)) {\n                if (curVal.length > 0) {\n                  return false;\n                }\n              } else {\n                return false;\n              }\n            }\n          }\n          return true;\n        },\n\n        searchAndStack: function() {\n          // This method search and stack the change we made.\n          this.stackUpWithColor = {};\n          this.stackPointer = 1;\n          let derivativeJson = {};\n          for (let idx in this.derivative) {\n            if (!this.derivative.hasOwnProperty(idx)) {\n              continue;\n            }\n            let data = this.derivative[idx];\n            let wellData = {};\n            for (let i = 0; i < THIS.globalSelectedAttributes.length; i++) {\n              let attr = THIS.globalSelectedAttributes[i];\n\n              if (attr in THIS.globalSelectedMultiplexSubfield) {\n                let selectedSubFields = THIS.globalSelectedMultiplexSubfield[attr];\n                let newMultiplexVal = [];\n                for (let multiplexIdx in data[attr]) {\n                  if (!data[attr].hasOwnProperty(multiplexIdx)) {\n                    continue;\n                  }\n                  let curMultiplexVals = data[attr][multiplexIdx];\n                  let newVal = {};\n                  newVal[attr] = curMultiplexVals[attr];\n                  selectedSubFields.forEach(function(subFieldId) {\n                    newVal[subFieldId] = curMultiplexVals[subFieldId];\n                  });\n                  newMultiplexVal.push(newVal);\n                }\n                wellData[attr] = newMultiplexVal;\n              } else {\n                if (data[attr] != null) {\n                  wellData[attr] = data[attr];\n                }\n              }\n            }\n            if ($.isEmptyObject(wellData)) {\n              derivativeJson[idx] = null;\n            } else {\n              derivativeJson[idx] = JSON.stringify(wellData);\n            }\n          }\n\n          while (!$.isEmptyObject(derivativeJson)) {\n            let keys = Object.keys(derivativeJson).map(parseFloat);\n            keys.sort(function(a, b) {\n              return a - b;\n            });\n\n            let refDerivativeIndex = keys[0];\n            let referenceDerivative = derivativeJson[refDerivativeIndex];\n            let arr = [];\n\n            if (!referenceDerivative) {\n              // if no checked box has value, push it to first spot\n              if (this.stackUpWithColor[0]) {\n                this.stackUpWithColor[0].push(refDerivativeIndex);\n              } else {\n                this.stackUpWithColor[0] = [refDerivativeIndex];\n              }\n\n              delete derivativeJson[refDerivativeIndex];\n            } else {\n              // if checked boxes have values\n              for (let i = 0; i < keys.length; i++) {\n                let idx = keys[i];\n                if (referenceDerivative === derivativeJson[idx]) {\n                  arr.push(idx);\n                  this.stackUpWithColor[this.stackPointer] = arr;\n                  delete derivativeJson[idx];\n                }\n              }\n              if (arr.length > 0)\n                this.stackPointer++;\n            }\n          }\n        },\n\n        applyColors: function() {\n\n          let wholeNoTiles = 0;\n          let wholePercentage = 0;\n\n          THIS.addBottomTableHeadings();\n\n          for (let i = 0; i < THIS.allTiles.length; i++) {\n            let tile = THIS.allTiles[i];\n            THIS.setTileVisible(tile, false);\n          }\n\n          for (let color = 0; color < this.stackPointer; color++) {\n            let arr = this.stackUpWithColor[color];\n            if (arr) {\n              THIS.addBottomTableRow(color, arr);\n\n              for (let i = 0; i < arr.length; i++) {\n                wholeNoTiles++;\n                let index = this.stackUpWithColor[color][i];\n                let tile = THIS.allTiles[index];\n                let well = this.derivative[index];\n                this.colorMap.set(index, color);\n                THIS.setTileColor(tile, color);\n                // Checks if all the required fields are filled\n                let completion = this.checkCompletion(well, tile);\n                THIS.setTileComplete(tile, completion === 1);\n                wholePercentage = wholePercentage + completion;\n              }\n            }\n          }\n\n          wholePercentage = Math.floor(100 * wholePercentage / wholeNoTiles);\n\n          if (isNaN(wholePercentage)) {\n            THIS.overLayTextContainer.text(\"Completion Percentage: 0%\");\n          } else {\n            THIS.overLayTextContainer.text(\"Completion Percentage: \" + wholePercentage + \"%\");\n          }\n          THIS.selectObjectInBottomTab();\n        },\n\n        checkCompletion: function(wellData) {\n          let req = 0;\n          let fill = 0;\n          for (let i = 0; i < THIS.fieldList.length; i++) {\n            let field = THIS.fieldList[i];\n            if (field.checkMultiplexCompletion) {\n              // also apply color\n              let multiplexStatus = field.checkMultiplexCompletion(wellData[field.id]);\n              if (multiplexStatus.include) {\n                fill += multiplexStatus.completionPct;\n                req++;\n              }\n            } else {\n              if (field.required) {\n                req++;\n                if (wellData[field.id] !== null) {\n                  fill++;\n                }\n              }\n            }\n          }\n          if (req === fill) {\n            return 1;\n          }\n          return fill / req;\n        },\n      }\n    }\n  }\n})(jQuery);","var plateMapWidget = plateMapWidget || {};\n\nplateMapWidget.assets = function() {\n  return {\n    _assets: {\n      doImg: '&#10003;',\n      dontImg: '',\n      warningImg: '&#9888;'\n    }\n  };\n};\n","var plateMapWidget = plateMapWidget || {};\n\n(function($) {\n\n  plateMapWidget.interface = function() {\n    // interface holds all the methods to put the interface in place\n    return {\n\n      _createInterface: function() {\n\n        let divIdentifier = '<div></div>';\n        this.container = this._createElement(divIdentifier).addClass(\"plate-setup-wrapper\");\n        this.topSection = this._createElement(divIdentifier).addClass(\"plate-setup-top-section\");\n\n        this.topLeft = this._createElement(divIdentifier).addClass(\"plate-setup-top-left\");\n        this.topRight = this._createElement(divIdentifier).addClass(\"plate-setup-top-right\");\n\n        this.overLayContainer = this._createElement(divIdentifier).addClass(\"plate-setup-overlay-container\");\n        this.canvasContainer = this._createElement(divIdentifier).addClass(\"plate-setup-canvas-container\");\n\n        this._createOverLay();\n        $(this.topLeft).append(this.overLayContainer);\n        $(this.topLeft).append(this.canvasContainer);\n\n        $(this.topSection).append(this.topLeft);\n        $(this.topSection).append(this.topRight);\n\n        $(this.container).append(this.topSection);\n        $(this.element).append(this.container);\n\n        this._createSvg();\n\n        this._createTabAtRight();\n        this._createTabs();\n\n        this._placePresetTabs();\n        // Bottom of the screen\n        this._bottomScreen();\n\n        this.bottomForFirstTime();\n\n        let that = this;\n        this._setShortcuts();\n        $(document.body).keyup(function(e) {\n          that._handleShortcuts(e);\n        });\n\n        this._configureUndoRedoArray();\n      },\n\n      _createElement: function(element) {\n        return $(element);\n      },\n\n      _setShortcuts: function() {\n        let that = this;\n        window.addEventListener(\"cut\", function(e) {\n          if (document.activeElement === document.body) {\n            that.copyCriteria();\n            that.clearCriteria();\n            e.preventDefault();\n          }\n        });\n        window.addEventListener(\"copy\", function(e) {\n          if (document.activeElement === document.body) {\n            that.copyCriteria();\n            e.preventDefault();\n          }\n        });\n        window.addEventListener(\"paste\", function(e) {\n          if (document.activeElement === document.body) {\n            that.pasteCriteria();\n            e.preventDefault();\n          }\n        });\n      },\n\n      _handleShortcuts: function(e) {\n        if (document.activeElement === document.body) {\n          if (e.keyCode === 46) {\n            this.clearCriteria();\n            e.preventDefault();\n          } else if (e.ctrlKey || e.metaKey) {\n            if (e.keyCode === 90) {\n              if (e.shiftKey) {\n                this.redo();\n              } else {\n                this.undo();\n              }\n              e.preventDefault();\n            } else if (e.keyCode === 89) {\n              this.redo();\n              e.preventDefault();\n            }\n          }\n        }\n      },\n    };\n  }\n})(jQuery);","var plateMapWidget = plateMapWidget || {};\n\nplateMapWidget.loadPlate = function() {\n  // Methods which look after data changes and stack up accordingly\n  // Remember THIS points to plateMapWidget and 'this' points to engine\n  return {\n\n    loadPlate: function(data) {\n      //sanitize input\n      let derivative;\n      if (data.hasOwnProperty('wells')) {\n        derivative = {};\n        for (let address in data.wells) {\n          let well = data.wells[address];\n          let index = this.addressToIndex(address);\n          derivative[index] = this.sanitizeWell(well);\n        }\n      } else {\n        derivative = this.engine.derivative;\n      }\n\n      let checkboxes;\n      if (data.hasOwnProperty('checkboxes')) {\n        checkboxes = this.sanitizeCheckboxes(data.checkboxes);\n      } else {\n        checkboxes = this.getCheckboxes();\n      }\n\n      let indices;\n      if (data.hasOwnProperty('selectedAddresses')) {\n        indices = this.sanitizeAddresses(data.selectedAddresses);\n      } else {\n        indices = this.getSelectedIndices();\n      }\n      if (indices.length === 0) {\n        indices = [0];\n      }\n\n      let sanitized = {\n        \"derivative\": derivative,\n        \"checkboxes\": checkboxes,\n        \"selectedIndices\": indices,\n      };\n\n      this.setData(sanitized);\n    },\n\n    sanitizeCheckboxes: function(checkboxes) {\n      checkboxes = checkboxes || [];\n      return this.allCheckboxes.filter(fieldId => checkboxes.indexOf(fieldId) >= 0);\n    },\n\n    sanitizeAddresses: function(selectedAddresses) {\n      selectedAddresses = selectedAddresses || [];\n      let indices = selectedAddresses.map(this.addressToIndex, this);\n      indices.sort();\n      indices = indices.filter((index, i) => indices.indexOf(index) === i);\n      return indices;\n    },\n\n    sanitizeWell: function(well) {\n      let newWell = {};\n      this.fieldList.forEach(function (field) {\n        newWell[field.id] = field.parseValue(well[field.id]);\n      });\n      return newWell;\n    },\n\n    setData: function(data, quiet) {\n      this.engine.derivative = data.derivative;\n      this.setCheckboxes(data.checkboxes, true);\n      this.setSelectedIndices(data.selectedIndices, true);\n      this.derivativeChange();\n      if (!quiet) {\n        this.addToUndoRedo();\n      }\n    },\n\n  }\n};\n","var plateMapWidget = plateMapWidget || {};\n\n(function($) {\n\n  plateMapWidget.overlay = function() {\n    // overlay holds all the methods to put the part just above the canvas which contains all those\n    // 'completion percentage' annd 'copy Criteria' button etc ...\n    return {\n\n      _createOverLay: function() {\n\n        let that = this;\n        this.overLayTextContainer = this._createElement(\"<div></div>\").addClass(\"plate-setup-overlay-text-container\");\n        this.overLayTextContainer.text(\"Completion Percentage:\");\n        this.overLayContainer.append(this.overLayTextContainer);\n        this.overLayButtonContainer = this._createElement(\"<div></div>\").addClass(\"plate-setup-overlay-button-container\");\n        this.overLayContainer.append(this.overLayButtonContainer);\n\n        this.clearCriteriaButton = this._createElement(\"<button />\").addClass(\"plate-setup-button\");\n        this.clearCriteriaButton.text(\"Clear\");\n        this.overLayButtonContainer.append(this.clearCriteriaButton);\n\n        this.clearCriteriaButton.click(function() {\n          that.clearCriteria();\n        });\n\n        this.copyCriteriaButton = this._createElement(\"<button />\").addClass(\"plate-setup-button\");\n        this.copyCriteriaButton.text(\"Copy\");\n        this.overLayButtonContainer.append(this.copyCriteriaButton);\n\n        this.copyCriteriaButton.click(function() {\n          that.copyCriteria();\n        });\n\n        this.pasteCriteriaButton = this._createElement(\"<button />\").addClass(\"plate-setup-button\");\n        this.pasteCriteriaButton.text(\"Paste\");\n        this.overLayButtonContainer.append(this.pasteCriteriaButton);\n\n        this.pasteCriteriaButton.click(function() {\n          that.pasteCriteria();\n        });\n\n        this.undoButton = this._createElement(\"<button />\").addClass(\"plate-setup-button\");\n        this.undoButton.text(\"Undo\");\n        this.overLayButtonContainer.append(this.undoButton);\n\n        this.undoButton.click(function() {\n          that.undo();\n        });\n\n        this.redoButton = this._createElement(\"<button />\").addClass(\"plate-setup-button\");\n        this.redoButton.text(\"Redo\");\n        this.overLayButtonContainer.append(this.redoButton);\n\n        this.redoButton.click(function() {\n          that.redo();\n        });\n\n      },\n\n      clearCriteria: function() {\n        if (this.selectedIndices && this.selectedIndices.length) {\n          let hasWellUpdate = false;\n          let selectedIndices = this.selectedIndices;\n          let well;\n          for (let i = 0; i < selectedIndices.length; i++) {\n            let index = selectedIndices[i];\n            if (index in this.engine.derivative) {\n              // handling for clearing well when not allowed to add or delete wells\n              if (this.disableAddDeleteWell) {\n                if (this.engine.derivative.hasOwnProperty(index)) {\n                  well = $.extend(true, {}, this.emptyWellWithDefaultVal);\n                  this.engine.derivative[index] = well;\n                }\n              } else {\n                delete this.engine.derivative[index];\n              }\n              hasWellUpdate = true;\n            }\n          }\n\n          if (hasWellUpdate) {\n            this._colorMixer();\n            this.decideSelectedFields();\n            this.derivativeChange();\n            this.addToUndoRedo();\n          }\n        } else {\n          alert(\"Please select any well\");\n        }\n      },\n\n      copyCriteria: function() {\n        if (this.selectedIndices && this.selectedIndices.length) {\n          let wells = this._getSelectedWells();\n          this.commonData = this._getCommonData(wells);\n        } else {\n          alert(\"Please select any well.\");\n        }\n      },\n\n      pasteCriteria: function() {\n        if (this.commonData) {\n          this._addAllData(this.commonData);\n          this.decideSelectedFields();\n        }\n      }\n    };\n  }\n})(jQuery);","$.widget(\"DNA.plateMap\", {\n\n  plateMapWidget: {},\n\n  options: {\n    value: 0\n  },\n\n  addressToLoc: function(address) {\n    let m = /^([A-Z]+)(\\d+)$/.exec(address.trim().toUpperCase());\n    if (m) {\n      let row_v = m[1];\n      let col = parseInt(m[2]) - 1;\n      let row = 0;\n      for (let i = 0; i < row_v.length; i++) {\n        let c = row_v.charCodeAt(i) - 65;\n        if (i) {\n          row += 1;\n          row *= 26;\n          row += c;\n        } else {\n          row = c;\n        }\n      }\n      return {\n        r: row,\n        c: col\n      };\n    } else {\n      throw address + \" not a proper plate address\";\n    }\n  },\n\n  locToIndex: function(loc, dimensions) {\n    if (!dimensions) {\n      dimensions = this.dimensions;\n    }\n    if (!(loc.r >= 0 && loc.r < dimensions.rows)) {\n      throw \"Row index \" + (loc.r + 1) + \" invalid\";\n    }\n    if (!(loc.c >= 0 && loc.c < dimensions.cols)) {\n      throw \"Column index \" + (loc.c + 1) + \" invalid\";\n    }\n    return loc.r * dimensions.cols + loc.c;\n  },\n\n  addressToIndex: function(address, dimensions) {\n    let loc = this.addressToLoc(address);\n    return this.locToIndex(loc, dimensions);\n  },\n\n  _rowKey: function(i) {\n    let c1 = i % 26;\n    let c2 = (i - c1) / 26;\n    let code = String.fromCharCode(65 + c1);\n    if (c2 > 0) {\n      code = String.fromCharCode(64 + c2) + code;\n    }\n    return code;\n  },\n\n  _colKey: function (i) {\n    return (i+1).toString(10);\n  },\n\n  indexToLoc: function(index, dimensions) {\n    if (!dimensions) {\n      dimensions = this.dimensions;\n    }\n\n    if (index >= dimensions.rows * dimensions.cols) {\n      throw \"Index too high: \" + index.toString(10);\n    }\n    let loc = {};\n    loc.c = index % dimensions.cols;\n    loc.r = (index - loc.c) / dimensions.cols;\n\n    return loc;\n  },\n\n  locToAddress: function(loc) {\n    return this._rowKey(loc.r) + this._colKey(loc.c);\n  },\n\n  indexToAddress: function(index, dimensions) {\n    let loc = this.indexToLoc(index, dimensions);\n    return this.locToAddress(loc);\n  },\n\n  getDimensions: function() {\n    return $.extend(true, {}, this.dimensions);\n  },\n\n  _create: function() {\n    let rows = parseInt(this.options.numRows || 8);\n    let cols = parseInt(this.options.numCols || 12);\n    this.dimensions = {\n      rows: rows,\n      cols: cols\n    };\n    this.rowIndex = [];\n    for (let i = 0; i < rows; i++) {\n      this.rowIndex.push(this._rowKey(i));\n    }\n\n    this.target = (this.element[0].id) ? \"#\" + this.element[0].id : \".\" + this.element[0].className;\n\n    // Import classes from other files.. Here we import it using extend and add it to this\n    // object. internally we add to widget.DNA.getPlates.prototype.\n    // Helpers are methods which return other methods and objects.\n    // add Objects to plateMapWidget and it will be added to this object.\n    // set read only well\n    if (this.options.readOnly) {\n      this.isReadOnly(true);\n    }\n\n    for (let component in plateMapWidget) {\n      if (plateMapWidget.hasOwnProperty(component)) {\n        // Incase some properties has to initialize with data from options hash,\n        // we provide it sending this object.\n        $.extend(this, new plateMapWidget[component](this));\n      }\n    }\n\n    this._createInterface();\n\n    this._trigger(\"created\", null, this);\n\n    return this;\n  },\n\n  _init: function() {\n    // This is invoked when the user use the plugin after _create is called.\n    // The point is _create is invoked for the very first time and for all other\n    // times _init is used.\n  },\n\n  // wellsData follows syntax: {A1:{field1: val1, field2: val2}, A2:{field1: val1, field2: val2}}\n  getTextDerivative: function(wellsData) {\n    let textDerivative = {};\n    let fieldMap = this.fieldMap;\n    for (let address in wellsData) {\n      if (!wellsData.hasOwnProperty(address)) {\n        continue;\n      }\n      let textValWell = {};\n      let textFieldIdWell = {};\n      let curWellData = wellsData[address];\n      for (let fieldId in curWellData) {\n        if (!curWellData.hasOwnProperty(fieldId)) {\n          continue;\n        }\n        if (fieldId in fieldMap) {\n          let field = fieldMap[fieldId];\n          let textVal = field.parseText(curWellData[fieldId]);\n          textFieldIdWell[field.name] = textVal;\n          textValWell[fieldId] = textVal;\n        } else {\n          // do not convert if not a field\n          textFieldIdWell[fieldId] = curWellData[fieldId];\n          textValWell[fieldId] = curWellData[fieldId];\n        }\n      }\n      textDerivative[address] = {\n        textVal: textValWell,\n        textFieldVal: textFieldIdWell\n      };\n    }\n\n    return textDerivative;\n  },\n\n  // wellsData follows syntax: {A1:{field1: val1, field2: val2}, A1:{field1: val1, field2: val2}}\n  getWellsDifferences: function(wellsHash) {\n    let wells = [];\n    for (let wellId in wellsHash) {\n      if (wellsHash.hasOwnProperty(wellId)) {\n        wells.push(wellsHash[wellId]);\n      }\n    }\n    let differentWellsVals = {};\n    if (wells.length > 1) {\n      let commonWell = this._getCommonWell(wells);\n      let allFieldVal = {};\n      for (let fieldIdx in wells[0]) {\n        if (wells[0].hasOwnProperty(fieldIdx)) {\n          allFieldVal[fieldIdx] = [];\n        }\n      }\n      for (let address in wellsHash) {\n        if (!wellsHash.hasOwnProperty(address)) {\n          continue;\n        }\n        let diffWellVal = {};\n        let curWellData = wellsHash[address];\n        for (let fieldId in curWellData) {\n          if (!curWellData.hasOwnProperty(fieldId)) {\n            continue;\n          }\n          let commonVal = commonWell[fieldId];\n          let curVal = curWellData[fieldId];\n          if (commonVal === undefined) {\n            commonVal = null;\n          }\n          if (curVal === undefined) {\n            curVal = null;\n          }\n          let newVal = null;\n          if (Array.isArray(curVal)) {\n            commonVal = commonVal || [];\n            // get uncommonVal\n            newVal = [];\n            for (let idx = 0; idx < curVal.length; idx++) {\n              let curMultiVal = curVal[idx];\n              // multiplex field\n              if (curMultiVal && typeof (curMultiVal) === \"object\") {\n                if (!this.containsObject(curMultiVal, commonVal)) {\n                  newVal.push(curMultiVal);\n                  if (!this.containsObject(curMultiVal, allFieldVal[fieldId])) {\n                    allFieldVal[fieldId].push(curMultiVal);\n                  }\n                }\n              } else {\n                if (commonVal.indexOf(curMultiVal) < 0) {\n                  newVal.push(curMultiVal);\n                  if (!allFieldVal[fieldId].indexOf(curMultiVal) >= 0) {\n                    allFieldVal[fieldId].push(curMultiVal);\n                  }\n                }\n              }\n            }\n          } else if (curVal && typeof (curVal) === \"object\") {\n            if (commonVal && typeof (commonVal) === \"object\") {\n              if (!((curVal.value === commonVal.value) || (curVal.unit === commonVal.unit))) {\n                newVal = curVal;\n                if (!this.containsObject(curVal, allFieldVal[fieldId])) {\n                  allFieldVal[fieldId].push(curVal);\n                }\n              }\n            } else {\n              newVal = curVal;\n              if (!this.containsObject(curVal, allFieldVal[fieldId])) {\n                allFieldVal[fieldId].push(curVal);\n              }\n            }\n          } else if (curVal !== commonVal) {\n            newVal = curVal;\n            if (!allFieldVal[fieldId].indexOf(curVal) >= 0) {\n              allFieldVal[fieldId].push(curVal);\n            }\n          }\n          diffWellVal[fieldId] = newVal;\n        }\n\n        differentWellsVals[address] = diffWellVal;\n      }\n\n      // clean up step for fields that are empty\n      for (let fieldId in allFieldVal) {\n        if (!allFieldVal.hasOwnProperty(fieldId)) {\n          continue;\n        }\n        if (allFieldVal[fieldId].length === 0) {\n          for (let address in differentWellsVals) {\n            if (!differentWellsVals.hasOwnProperty(address)) {\n              continue;\n            }\n            delete differentWellsVals[address][fieldId];\n          }\n        }\n      }\n\n      return differentWellsVals;\n    } else if (wells.length > 0) {\n      let differentWellsVals = {};\n      for (let address in wellsHash) {\n        if (!wellsHash.hasOwnProperty(address)) {\n          continue;\n        }\n        let diffWellVal = {};\n        let curWellData = wellsHash[address];\n        for (let fieldId in curWellData) {\n          if (!curWellData.hasOwnProperty(fieldId)) {\n            continue;\n          }\n          let curVal = curWellData[fieldId];\n          if (Array.isArray(curVal)) {\n            if (curVal.length > 0) {\n              diffWellVal[fieldId] = curVal\n            }\n          } else if (curVal) {\n            diffWellVal[fieldId] = curVal;\n          }\n        }\n        differentWellsVals[address] = diffWellVal;\n      }\n\n      return differentWellsVals;\n    }\n  },\n\n  setFieldsDisabled: function(flag) {\n    this.fieldList.forEach(function(field) {\n      field.disabled(flag);\n    });\n  },\n\n  isReadOnly: function(flag) {\n    this.readOnly = !!flag;\n    this.readOnlyHandler();\n  },\n\n  readOnlyHandler: function() {\n    if (this.readOnly) {\n      this.overLayButtonContainer.css(\"display\", \"none\");\n      $('.multiple-field-manage-delete-button').css(\"display\", \"none\");\n      this.setFieldsDisabled(true);\n    } else {\n      this.overLayButtonContainer.css(\"display\", \"flex\");\n      $('.multiple-field-manage-delete-button').css(\"display\", \"none\");\n      if (!this.disableAddDeleteWell) {\n        this.setFieldsDisabled(false);\n      }\n    }\n  },\n\n  disableAddDeleteWell: null,\n\n  // column_with_default_val will be used to determine empty wells, format: {field_name: default_val}\n  isDisableAddDeleteWell: function(flag, emptyDefaultWell) {\n    if (flag) {\n      let emptyWellWithDefaultVal = $.extend(true, {}, this.defaultWell);\n      if (emptyDefaultWell) {\n        for (let field in emptyDefaultWell) {\n          if (emptyDefaultWell.hasOwnProperty(field)) {\n            if (field in emptyWellWithDefaultVal) {\n              emptyWellWithDefaultVal[field] = emptyDefaultWell[field]\n            } else {\n              console.log(\"No field for key: \" + key + \", please contact support\");\n            }\n          }\n        }\n      }\n      this.disableAddDeleteWell = true;\n      this.addressAllowToEdit = this.getWellSetAddressWithData();\n      // configure undo redo action\n      this.actionPointer = 0;\n      this.undoRedoArray = [this.createState()];\n      this.emptyWellWithDefaultVal = emptyWellWithDefaultVal;\n    } else {\n      this.disableAddDeleteWell = false;\n      this.setFieldsDisabled(false);\n      this.emptyWellWithDefaultVal = null;\n    }\n  },\n\n  selectObjectInBottomTab: function() {\n    let colors = [];\n    let selectedIndices = this.selectedIndices;\n    for (let i = 0; i < selectedIndices.length; i++) {\n      let index = selectedIndices[i];\n      let well = this.engine.derivative[index];\n      if (well) {\n        let color = this.engine.colorMap.get(index);\n        if (colors.indexOf(color) < 0) {\n          colors.push(color);\n        }\n      }\n    }\n    let trs = document.querySelectorAll('table.plate-setup-bottom-table tr');\n    for (let i = 1; i < trs.length; i++) { // start at 1 to skip the table headers\n      let tr = trs[i];\n      let td = tr.children[0];\n      let isSelected = colors.indexOf(Number(td.querySelector('button').innerHTML)) >= 0;\n      tr.classList.toggle(\"selected\", isSelected);\n    }\n  },\n\n  getSelectedIndices: function() {\n    return this.selectedIndices.slice();\n  },\n\n  getSelectedAddresses: function() {\n    return this.selectedIndices.map(function(index) {\n      return this.allTiles[index].address;\n    }, this);\n  },\n\n  setSelectedAddresses: function(addresses, noUndoRedo) {\n    let indices = this.sanitizeAddresses(addresses);\n    this.setSelectedIndices(indices, noUndoRedo);\n  },\n\n  setSelectedIndices: function (indices, noUndoRedo) {\n    if (!indices || indices.length === 0) {\n      indices = [0];\n    }\n    // Indices should be sanitized\n    this.setSelection(indices);\n    //this._colorMixer();\n    this.decideSelectedFields();\n    this._trigger(\"selectedWells\", null, {selectedAddress: this.getSelectedAddresses()});\n    this.selectObjectInBottomTab();\n    if (!noUndoRedo) {\n      this.addToUndoRedo();\n    }\n  }\n\n});\n","var plateMapWidget = plateMapWidget || {};\n\n(function($) {\n\n  plateMapWidget.preset = function() {\n    // All the preset action goes here\n    return {\n\n      presets: [],\n\n      _placePresetTabs: function() {\n        let presets = this.options.attributes.presets;\n\n        if (presets && presets.length) {\n          this.wellAttrContainer = this._createElement(\"<div></div>\").addClass(\"plate-setup-well-attr-container\")\n            .text(\"Checkbox presets\");\n          this.tabContainer.append(this.wellAttrContainer);\n\n          this.presetTabContainer = this._createElement(\"<div></div>\").addClass(\"plate-setup-preset-container\");\n          this.tabContainer.append(this.presetTabContainer);\n\n          for (let i = 0; i < presets.length; i++) {\n            let preset = presets[i];\n            let divText = this._createElement(\"<div></div>\").addClass(\"plate-setup-preset-tab-div\")\n              .text(preset.title);\n\n            let presetButton = this._createElement(\"<div></div>\").addClass(\"plate-setup-preset-tab\")\n              .data(\"preset\", preset.fields).append(divText);\n            this.presetTabContainer.append(presetButton);\n\n            let that = this;\n            presetButton.click(function() {\n              let preset = $(this);\n              that._selectPreset(preset);\n            });\n            this.presets.push(presetButton);\n          }\n        }\n      },\n\n      _clearPresetSelection: function() {\n        for (let j = 0; j < this.presets.length; j++) {\n          let p = this.presets[j];\n          p.removeClass(\"plate-setup-preset-tab-selected\")\n            .addClass(\"plate-setup-preset-tab\");\n        }\n      },\n\n      _selectPreset: function(preset) {\n        this.setCheckboxes(preset.data(\"preset\"));\n        preset.removeClass(\"plate-setup-preset-tab\")\n          .addClass(\"plate-setup-preset-tab-selected\");\n      },\n    };\n  }\n})(jQuery);","var plateMapWidget = plateMapWidget || {};\n\n(function(SVG) {\n\n  plateMapWidget.svgCreate = function() {\n    //\n    return {\n\n      baseSizes: {\n        spacing: 48,\n        tile_radius: 22,\n        center_radius_complete: 10,\n        center_radius_incomplete: 14,\n        label_size: 14,\n        label_spacing: 24,\n        text_size: 13,\n        stroke: 0.5,\n        gap: 2\n      },\n\n      allTiles: [],\n\n      _createSvg: function() {\n        this.svg = new SVG(this.canvasContainer[0]);\n        this.svg.attr('preserveAspectRatio', 'xMidYMin meet');\n        let ls = this.baseSizes.label_spacing;\n\n        this.svg.viewbox(-ls, -ls, ls + this.dimensions.cols * this.baseSizes.spacing, ls + this.dimensions.rows * this.baseSizes.spacing);\n\n        this.wellShadow = this.svg.gradient('radial', function (stop) {\n          stop.at(0.8, 'rgba(0,0,0,0.1)');\n          stop.at(1, 'rgba(0,0,0,0.2)');\n        }).from(\"50%\", \"50%\").to(\"50%\", \"55%\").radius(\"50%\").attr('id', 'wellShadow');\n\n        this.wellColors = this.colorPairs.map(function (pair, i) {\n            return this.svg.gradient('linear', function (stop) {\n                stop.at(0, pair[0]);\n                stop.at(1, pair[1]);\n            }).from(0, 0).to(0, 1).id('wellColor' + i.toString());\n        }, this);\n\n        this._fixRowAndColumn();\n        this._putCircles();\n        this._svgEvents();\n      },\n\n      _fixRowAndColumn: function () {\n        let cols = this.dimensions.cols;\n        let rows = this.dimensions.rows;\n\n        let rh = this.svg.nested().attr({'x': -this.baseSizes.label_spacing / 2.0}).addClass('rowHead');\n        let ch = this.svg.nested().attr({'y': -this.baseSizes.label_spacing / 2.0}).addClass('colHead');\n\n        for (let i = 0; i < rows; i++) {\n          rh.plain(this._rowKey(i)).attr({y: this.baseSizes.spacing * (i + 0.5)});\n        }\n        for (let i = 0; i < cols; i++) {\n          ch.plain(this._colKey(i)).attr({x: this.baseSizes.spacing * (i + 0.5)});\n        }\n      },\n\n      _putCircles: function () {\n        let cols = this.dimensions.cols;\n        let rows = this.dimensions.rows;\n        this.allTiles = Array(cols * rows);\n\n        for (let row = 0; row < rows; row++) {\n          for (let col = 0; col < cols; col++) {\n            let tile = this._createTile(row, col);\n            this.allTiles[tile.index] = tile;\n          }\n        }\n      },\n\n      _createTile: function (r, c) {\n        let g = this.svg.nested().move(this.baseSizes.spacing * c, this.baseSizes.spacing * r).addClass('tile');\n        let m = this.baseSizes.spacing / 2.0;\n\n        let d = {\"tile\": g};\n        d.r = r;\n        d.c = c;\n        d.index = this.locToIndex(d);\n        d.address = this.locToAddress(d);\n\n        g.rect(this.baseSizes.spacing, this.baseSizes.spacing).addClass('highlight');\n        g.circle(this.baseSizes.tile_radius * 2).center(m, m).addClass('well').fill(this.wellShadow);\n\n        let tf = g.group().addClass('fill');\n        d[\"circle\"] = tf.circle(this.baseSizes.tile_radius * 2).center(m, m).addClass('circle').fill(this.wellColors[0]);\n        tf.circle(this.baseSizes.center_radius_complete * 2).center(m, m).addClass('center');\n        tf.circle(this.baseSizes.center_radius_incomplete * 2).center(m, m).addClass('center_incomplete');\n        d[\"label\"] = tf.plain(\"0\").attr({x: m, y: m}).addClass('label');\n\n        return d;\n      },\n\n      setTileComplete: function (tile, complete) {\n        if (complete) {\n          tile.tile.removeClass('incomplete');\n        } else {\n          tile.tile.addClass('incomplete');\n        }\n      },\n\n      setTileVisible: function (tile, visible) {\n        if (visible) {\n          tile.tile.removeClass('empty');\n        } else {\n          tile.tile.addClass('empty');\n        }\n      },\n\n      setTileColor: function (tile, color) {\n        this.setTileVisible(tile, true);\n        tile.colorIndex = parseInt(color);\n        tile.label.plain(String(tile.colorIndex));\n\n        if (color > 0) {\n          color = ((color - 1) % (this.wellColors.length - 1)) + 1;\n        }\n\n        tile.circle.fill(this.wellColors[color])\n      }\n    };\n  }\n})(SVG);","var plateMapWidget = plateMapWidget || {};\n\n(function($) {\n\n  plateMapWidget.svgEvents = function() {\n    // This object contains Menu items and how it works;\n    return {\n      colorToIndex: {},\n      selectedIndices: [],\n\n      _svgEvents: function() {\n        // Set up event handling.\n        let that = this;\n\n        function getMousePosition(evt) {\n          let CTM = that.svg.node.getScreenCTM();\n          return {\n            x: (evt.clientX - CTM.e) / CTM.a,\n            y: (evt.clientY - CTM.f) / CTM.d\n          };\n        }\n\n        function dimCoord(v, max) {\n          max = max - 1;\n          if (v < 0) {\n            return 0;\n          } else if (v >= max) {\n            return max;\n          } else {\n            return Math.trunc(v);\n          }\n        }\n\n        function posToLoc(pos) {\n          let s = that.baseSizes.spacing;\n          let c = dimCoord(pos.x / s, that.dimensions.cols);\n          let r = dimCoord(pos.y / s, that.dimensions.rows);\n          return {r: r, c: c}\n        }\n\n        function selectionBoxPosition(pos0, pos1) {\n          let d0 = posToLoc(pos0);\n          let d1 = posToLoc(pos1);\n          let s = that.baseSizes.spacing;\n\n          let x0 = Math.min(d0.c, d1.c) * s;\n          let y0 = Math.min(d0.r, d1.r) * s;\n\n          if (pos0.x < 0) {\n            d0.c = that.dimensions.cols - 1;\n          }\n          if (pos0.y < 0) {\n            d0.r = that.dimensions.rows - 1;\n          }\n\n          let x1 = (Math.max(d0.c, d1.c) + 1) * s;\n          let y1 = (Math.max(d0.r, d1.r) + 1) * s;\n\n          return {\n            x: x0,\n            y: y0,\n            width: x1 - x0,\n            height: y1 - y0,\n          };\n        }\n\n        function selectTiles(pos0, pos1, secondary) {\n          let d0 = posToLoc(pos0);\n          let d1 = posToLoc(pos1);\n          let extending = true;\n          if (secondary) {\n            // if d0 is already selected, we are deselecting\n            let startIdx = that.locToIndex(d0);\n            extending = that.selectedIndices.indexOf(startIdx) < 0;\n          }\n          let c0 = Math.min(d0.c, d1.c);\n          let r0 = Math.min(d0.r, d1.r);\n\n          if (pos0.x < 0) {\n            d0.c = that.dimensions.cols - 1;\n          }\n          if (pos0.y < 0) {\n            d0.r = that.dimensions.rows - 1;\n          }\n\n          let c1 = Math.max(d0.c, d1.c);\n          let r1 = Math.max(d0.r, d1.r);\n\n          let indices = [];\n\n          for (let r = r0; r <= r1; r++) {\n            for (let c = c0; c <= c1; c++) {\n              let index = that.locToIndex({'r': r, 'c': c});\n              indices.push(index)\n            }\n          }\n          if (secondary) {\n            if (extending) {\n              that.selectedIndices.forEach(function (index) {\n                if (indices.indexOf(index) < 0) {\n                  indices.push(index);\n                }\n              });\n            } else {\n              indices = that.selectedIndices.filter(index => indices.indexOf(index) < 0);\n            }\n          }\n\n          that.setSelectedIndices(indices.sort());\n        }\n\n        let selectionBox;\n\n        function startDrag(evt) {\n          if (selectionBox) {\n            selectionBox.remove();\n          }\n          let pos = getMousePosition(evt);\n          let attrs = selectionBoxPosition(pos, pos);\n          selectionBox = that.svg.rect().attr(attrs).fill('rgba(0, 0, 1, 0.2)');\n          selectionBox.data('origin', pos);\n        }\n\n        function drag(evt) {\n          if (selectionBox) {\n            let pos = getMousePosition(evt);\n            let attrs = selectionBoxPosition(selectionBox.data('origin'), pos);\n            selectionBox.attr(attrs);\n          }\n        }\n\n        function endDrag(evt) {\n          if (selectionBox) {\n            let startPos = selectionBox.data('origin');\n            let pos = getMousePosition(evt);\n            selectTiles(startPos, pos, evt.shiftKey);\n            selectionBox.remove();\n            selectionBox = null;\n          }\n        }\n\n        this.svg.node.addEventListener('mousedown', startDrag);\n        this.svg.node.addEventListener('mousemove', drag);\n        this.svg.node.addEventListener('mouseleave', endDrag);\n        this.svg.node.addEventListener('mouseup', endDrag);\n\n        $(that.target).on(\"loadPlate\", function(evt, data) {\n          // This method should be compatible to redo/undo.\n          that.loadPlate(JSON.parse(data));\n        });\n      },\n\n      setSelection: function(selectedIndices) {\n        this.selectedIndices = selectedIndices;\n        this._setSelectedTiles();\n        document.activeElement.blur();\n      },\n\n      _setSelectedTiles: function() {\n        // Update selected tile display only\n        let selectedIndices = this.selectedIndices;\n        this.allTiles.forEach(function(tile) {\n          let selected = selectedIndices.indexOf(tile.index) >= 0;\n          if (selected) {\n            tile.tile.addClass('selected');\n          } else {\n            tile.tile.removeClass('selected');\n          }\n        })\n      },\n\n      _getSelectedWells: function() {\n        return this.selectedIndices.map(function(index) {\n          let well = this.engine.derivative[index];\n          if (!well) {\n            well = this.defaultWell;\n          }\n          return well;\n        }, this);\n      },\n\n      containsObject: function(obj, list) {\n        function deepEqual (x, y) {\n          if (x === y) {\n            return true;\n          } else if ((typeof x == \"object\" && x != null) && (typeof y == \"object\" && y != null)) {\n            if (Object.keys(x).length !== Object.keys(y).length) {\n              return false;\n            }\n            for (let prop in x) {\n              if (x.hasOwnProperty(prop)) {\n                if (y.hasOwnProperty(prop)) {\n                  if (!deepEqual(x[prop], y[prop])) {\n                    return false;\n                  }\n                } else {\n                  return false;\n                }\n              }\n            }\n            return true;\n          } else {\n            return false;\n          }\n        }\n\n        if (list) {\n          for (let i = 0; i < list.length; i++) {\n            if (deepEqual(obj, list[i])) {\n              return true;\n            }\n          }\n        }\n        return false;\n      },\n\n      _getCommonData: function(wells) {\n        if (wells.length) {\n          let commonData = $.extend(true, {}, wells[0]);\n          for (let i = 1; i < wells.length; i++) {\n            let well = wells[i];\n            for (let field in commonData) {\n              if (!commonData.hasOwnProperty(field)) {\n                continue;\n              }\n              let commonVal = commonData[field];\n              if (commonVal === undefined) {\n                commonVal = null;\n              }\n              let wellVal = well[field];\n              if (wellVal === undefined) {\n                wellVal = null;\n              }\n              if (Array.isArray(commonVal)) {\n                let commonArr = [];\n                for (let i = 0; i < commonVal.length; i++) {\n                  let v = commonVal[i];\n                  // for multiplex field\n                  if (v && typeof (v) === \"object\") {\n                    if (this.containsObject(v, wellVal)) {\n                      commonArr.push(v);\n                    }\n                  } else {\n                    if ($.inArray(v, wellVal) >= 0) {\n                      commonArr.push(v);\n                    }\n                  }\n                }\n                commonData[field] = commonArr;\n              } else {\n                if (wellVal && typeof (wellVal) === \"object\" && commonVal && typeof (commonVal) === \"object\") {\n                  if ((wellVal.value !== commonVal.value) || (wellVal.unit !== commonVal.unit)) {\n                    delete commonData[field];\n                  }\n                } else if (commonVal !== wellVal) {\n                  delete commonData[field];\n                }\n              }\n            }\n          }\n          return commonData;\n        } else {\n          return this.defaultWell;\n        }\n      },\n\n      _getCommonWell: function (wells) {\n        let commonData = this._getCommonData(wells);\n        return this.sanitizeWell(commonData);\n      },\n\n      _getAllMultipleVal: function(wells) {\n        let multipleFieldList = this.multipleFieldList;\n\n        multipleFieldList.forEach(function(multiplexField) {\n          if (wells.length) {\n            let curMultipleVal = {};\n            wells.forEach(function(wellData) {\n              let id = multiplexField.id;\n              if (wellData[id]) {\n                if (wellData[id].length > 0) {\n                  wellData[id].forEach(function(multipleVal) {\n                    if (typeof (multipleVal) === 'object') {\n                      if (multipleVal[id] in curMultipleVal) {\n                        curMultipleVal[multipleVal[id]]++;\n                      } else {\n                        curMultipleVal[multipleVal[id]] = 1;\n                      }\n                    } else {\n                      if (multipleVal in curMultipleVal) {\n                        curMultipleVal[multipleVal]++;\n\n                      } else {\n                        curMultipleVal[multipleVal] = 1;\n                      }\n                    }\n                  })\n                }\n              }\n            });\n            multiplexField.allSelectedMultipleVal = curMultipleVal;\n          } else {\n            multiplexField.allSelectedMultipleVal = null\n          }\n        });\n      },\n\n      decideSelectedFields: function() {\n        let wells = this._getSelectedWells();\n        this._getAllMultipleVal(wells);\n        this.applyFieldWarning(wells);\n        let well = this._getCommonWell(wells);\n        this._addDataToTabFields(well);\n      },\n\n      // get all wells that have data\n      getWellSetAddressWithData: function() {\n        let indices = Object.keys(this.engine.derivative).map(Number).sort();\n        return indices.map(this.indexToAddress, this)\n      }\n\n    };\n  }\n})(jQuery);","var plateMapWidget = plateMapWidget || {};\n\n(function($) {\n\n  plateMapWidget.tabs = function() {\n    // Tabs create and manage tabs at the right side of widget.\n    return {\n\n      allTabs: [],\n\n      defaultWell: {},\n\n      allDataTabs: [], // To hold all the tab contents. this contains all the tabs and its elements and elements\n      // Settings as a whole. its very useful, when we have units for a specific field.\n      // it goes like tabs-> individual field-> units and checkbox\n\n      _createTabAtRight: function() {\n        this.tabContainer = this._createElement(\"<div></div>\").addClass(\"plate-setup-tab-container\");\n        $(this.topRight).append(this.tabContainer);\n      },\n\n      _createTabs: function() {\n        // this could be done using z-index. just imagine few cards stacked up.\n        // Check if options has tab data.\n        // Originally we will be pulling tab data from developer.\n        // Now we are building upon dummy data.\n        this.tabHead = this._createElement(\"<div></div>\").addClass(\"plate-setup-tab-head\");\n        $(this.tabContainer).append(this.tabHead);\n\n        let tabData = this.options.attributes.tabs;\n        let that = this;\n\n        tabData.forEach(function(tab, tabIndex) {\n          that.allTabs[tabIndex] = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab\");\n          $(that.allTabs[tabIndex]).data(\"index\", tabIndex)\n            .text(tab.name);\n\n          $(that.allTabs[tabIndex]).click(function() {\n            that._tabClickHandler(this);\n          });\n\n          $(that.tabHead).append(that.allTabs[tabIndex]);\n        });\n\n        this.tabDataContainer = this._createElement(\"<div></div>\").addClass(\"plate-setup-tab-data-container\");\n        $(this.tabContainer).append(this.tabDataContainer);\n\n        this._addDataTabs(tabData);\n\n        $(this.allTabs[0]).click();\n\n        this._addTabData();\n      },\n\n      _tabClickHandler: function(clickedTab) {\n\n        if (this.selectedTab) {\n          $(this.selectedTab).removeClass(\"plate-setup-tab-selected\")\n            .addClass(\"plate-setup-tab\");\n\n          let previouslyClickedTabIndex = $(this.selectedTab).data(\"index\");\n          $(this.allDataTabs[previouslyClickedTabIndex]).css(\"z-index\", 0);\n          this.readOnlyHandler();\n        }\n\n        $(clickedTab).addClass(\"plate-setup-tab-selected\");\n\n        this.selectedTab = clickedTab;\n\n        let clickedTabIndex = $(clickedTab).data(\"index\");\n        $(this.allDataTabs[clickedTabIndex]).css(\"z-index\", 1000);\n      },\n\n      _addDataTabs: function(tabs) {\n        this.allDataTabs = tabs.map(function () {\n          return this._createElement(\"<div></div>\").addClass(\"plate-setup-data-div\").css(\"z-index\", 0);\n        }, this);\n        $(this.tabDataContainer).append(this.allDataTabs);\n      }\n    };\n  }\n})(jQuery);","var plateMapWidget = plateMapWidget || {};\n\n(function($) {\n\n  plateMapWidget.undoRedoManager = function() {\n\n    return {\n\n      undoRedoArray: [],\n\n      actionPointer: null,\n\n      addToUndoRedo: function() {\n        let state = this.createState();\n        if (this.actionPointer != null) {\n          let i = this.actionPointer + 1;\n          if (i < this.undoRedoArray.length) {\n            this.undoRedoArray.splice(i, this.undoRedoArray.length - i);\n          }\n        }\n        this.actionPointer = null;\n        this.undoRedoArray.push(state);\n      },\n\n      _configureUndoRedoArray: function() {\n\n        let data = {\n          checkboxes: [],\n          derivative: {},\n          selectedIndices: [0]\n        };\n\n        this.undoRedoArray = [];\n        this.actionPointer = null;\n        this.undoRedoArray.push($.extend({}, data));\n      },\n\n      clearHistory: function () {\n        this.undoRedoArray = this.undoRedoArray.slice(-1);\n        this.actionPointer = null;\n      },\n\n      undo: function() {\n        console.log(\"undo\");\n        return this.shiftUndoRedo(-1);\n      },\n\n      redo: function() {\n        console.log(\"redo\");\n        return this.shiftUndoRedo(1);\n      },\n\n      shiftUndoRedo: function(pointerDiff) {\n        let pointer = this.actionPointer;\n        if (pointer == null) {\n          pointer = this.undoRedoArray.length - 1;\n        }\n        pointer += pointerDiff;\n        return this.setUndoRedo(pointer);\n      },\n\n      setUndoRedo: function(pointer) {\n        if (pointer < 0) {\n          return false;\n        }\n        if (pointer >= this.undoRedoArray.length) {\n          return false;\n        }\n        this.actionPointer = pointer;\n        this.setData(this.undoRedoArray[pointer], true);\n        return true;\n      }\n    }\n  };\n\n})(jQuery);"]}