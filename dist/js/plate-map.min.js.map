{"version":3,"sources":["add-data-on-change.js","add-data-to-tabs.js","add-tab-data.js","add-warning-msg.js","bottom-table.js","check-box.js","color-manager.js","create-field.js","engine.js","image_assets.js","interface.js","load-plate.js","overlay.js","plate-map.js","preset.js","svg-create.js","svg-events.js","tabs.js","undo-redo-manager.js"],"names":["plateMapWidget","$","addDataOnChange","_addAllData","data","wells","this","selectedIndices","noOfSelectedObjects","length","forEach","index","well","engine","derivative","extend","defaultWell","processWellData","wellEmpty","disableAddDeleteWell","hasOwnProperty","emptyWellWithDefaultVal","_getAllMultipleVal","applyFieldWarning","_colorMixer","derivativeChange","addToUndoRedo","newData","curWell","id","newVal","multi","preData","_getMultiData","JSON","parse","stringify","curData","fieldId","addNew","added","removed","value","add","listIdx","toString","map","val","subFieldId","push","indexOf","removeIndex","removeListIndex","newPreData","idx","parseInt","searchAndStack","applyColors","_trigger","createState","checkboxes","getCheckboxes","slice","requiredField","getPlate","address","indexToAddress","selectedAddresses","getSelectedAddresses","jQuery","addDataToFields","_addDataToTabFields","fieldMap","_applyFieldData","v","undefined","setValue","addTabData","fieldList","autoId","_addTabData","tabData","options","attributes","tabs","that","multiplexFieldArray","tab","tabPointer","tabFields","fieldArray","field","console","log","type","field_val","_makeMultiplexField","_makeRegularField","allDataTabs","multipleFieldList","_makeSubField","wrapperDiv","_createElement","addClass","wrapperDivLeftSide","wrapperDivRightSide","nameContainer","text","name","fieldContainer","append","root","required","checkbox","_addCheckBox","_createField","onChange","getValue","subFieldList","requiredSubField","subFieldKey","multiplexFields","subFieldData","subField","multiplexId","subFields","subfield","mainMultiplexField","mainRefField","curId","singleSelectValue","curVal","returnVal","_changeMultiFieldValue","curDataLs","detailData","addWarningMsg","fieldWarningMsg","include","imgId","img","html","_assets","warningImg","attr","find","prepend","popText","hover","style","display","hide","remove","removeWarningMsg","fieldData","i","applyMultiplexSubFieldColor","Array","bottomTable","_bottomScreen","bottomContainer","bottomTableContainer","bottomTableHead","bottomTableBody","container","addBottomTableHeadings","row","singleField","rowCounter","globalSelectedAttributes","empty","adjustFieldWidth","bottomRow","tileAttrText","tile","getText","addBottomTableRow","color","singleStack","modelTile","allTiles","plateIdDiv","numberText","click","evt","addressToSelect","ctrlKey","setSelectedAddresses","colorPairs","colorStops","css","dataDiv","bottomForFirstTime","createExportButton","downloadCSV","csv","filename","csvFile","downloadLink","Blob","document","createElement","download","href","window","URL","createObjectURL","body","appendChild","exportData","format","rows","querySelectorAll","colorLocMap","colorLocIdxMap","stackUpWithColor","colorIdx","cols","j","innerText","replace","loc","join","overlayContainer","descriptionDiv","buttonContainer","exportButton","resetExportText","classList","setTimeout","clipboardButton","clipboard","ClipboardJS","get","resetClipboardText","on","checkBox","checkImage","dontImg","_applyCheckboxHandler","checkBoxImage","changes","changeCheckboxes","fieldIds","Object","values","globalSelectedMultiplexSubfield","subfieldIds","concat","changeSubFieldsCheckboxes","subFieldToInclude","clicked","Boolean","doImg","noUndoRedo","gsa","multiplexCheckedSubField","_clearPresetSelection","setSubFieldCheckboxes","setCheckboxes","colorManager","select2close","ev","params","args","originalEvent","stopPropagation","one","preventDefault","select2fix","input","select2setData","selected","dataAdapter","addOptions","convertToOptions","createField","_createTextField","_createNumericField","_createSelectField","_createMultiSelectField","_createBooleanField","_createMultiplexField","parseValue","String","trim","disabled","bool","prop","parseText","_createOpts","config","opts","allowClear","placeholder","minimumResultsForSearch","data_specified","ajax","optMap","opt","select2","trigger","multiple","_parseOne","_parseMany","vals","multiOnChange","e","_createDeleteButton","units","defaultUnit","unitInput","hasUnits","unitText","unit","setUnitOpts","newUnits","curUnit","cleanUnit","isPlainObject","parseRegularValue","parseUnit","getRegularValue","isNaN","_ret","getUnit","hasMultiplexUnit","unitMap","_loop","unitTypeKey","_typeof","setUnit","setRegularValue","Number","toLowerCase","u","getRegularText","textVal","removeClass","nameContainer1","fieldContainer1","singleSelect","appendTo","multiselectSetValue","setSingleSelectOptions","singleSelectChange","updateSubFieldUnitOpts","curSubField","readOnlyHandler","newSubFieldValue","subFieldName","multiselectValues","newOptions","valMap","_loop2","curOpts","unitOptions","curIds","curOpt","newMultiplexVal","selectList","selectedVal","selectVal","_ret3","checkedSubfields","_loop3","valIdx","subV","subText","optId","x","_loop4","checkMultiplexCompletion","valList","valCount","completionPct","getSubfieldStatus","req","fill","subFieldWarningMap","warningStatus","multiplexVals","multiplexIdx","updateSubFieldWarningMap","mainFieldStatus","warningText","mainFieldWarning","parseMainFieldVal","_deleteDialog","valToRemove","allSelectedMultipleVal","keys","dialogDiv","killDialog","dialogContent","tableArea","buttonRow","table","_deleteDialogTable","readOnly","deleteCheckedButton","each","decideSelectedFields","cancelButton","show","onclick","event","target","colName","thead","tbody","tr","deleteButton","THIS","colorMap","Map","stackPointer","isArray","derivativeJson","wellData","selectedSubFields","_loop5","curMultiplexVals","isEmptyObject","parseFloat","sort","a","b","refDerivativeIndex","referenceDerivative","arr","wholeNoTiles","wholePercentage","setTileVisible","set","setTileColor","completion","checkCompletion","setTileComplete","Math","floor","overLayTextContainer","selectObjectInBottomTab","multiplexStatus","assets","_createInterface","topSection","topLeft","topRight","overLayContainer","canvasContainer","_createOverLay","element","_createSvg","_createTabAtRight","_createTabs","_placePresetTabs","_setShortcuts","keyup","_handleShortcuts","_configureUndoRedoArray","addEventListener","activeElement","copyCriteria","clearCriteria","pasteCriteria","keyCode","metaKey","shiftKey","redo","undo","loadPlate","addressToIndex","sanitizeWell","indices","sanitizeAddresses","sanitized","setData","filter","newWell","quiet","setSelectedIndices","overlay","overLayButtonContainer","clearCriteriaButton","copyCriteriaButton","pasteCriteriaButton","undoButton","redoButton","hasWellUpdate","alert","_getSelectedWells","commonData","_getCommonData","widget","addressToLoc","m","exec","toUpperCase","row_v","col","c","charCodeAt","locToIndex","dimensions","r","c1","c2","code","fromCharCode","_colKey","locToAddress","_rowKey","indexToLoc","getDimensions","_create","numCols","rowIndex","component","className","isReadOnly","_init","getTextDerivative","wellsData","textDerivative","textValWell","textFieldIdWell","curWellData","textFieldVal","getWellsDifferences","wellsHash","wellId","differentWellsVals","commonWell","_getCommonWell","allFieldVal","fieldIdx","diffWellVal","commonVal","curMultiVal","containsObject","setFieldsDisabled","flag","emptyDefaultWell","actionPointer","undoRedoArray","trs","td","children","isSelected","colors","querySelector","innerHTML","getSelectedIndex","addresses","setSelection","selectedAddress","preset","presets","_this","wellAttrContainer","tabContainer","presetTabContainer","_loop6","divText","title","presetButton","fields","_selectPreset","SVG","svgCreate","baseSizes","spacing","tile_radius","center_radius_complete","center_radius_incomplete","label_size","label_spacing","text_size","stroke","gap","svg","ls","viewbox","wellShadow","gradient","stop","at","from","to","radius","wellColors","pair","_fixRowAndColumn","_putCircles","_svgEvents","rh","nested","ch","y","plain","_createTile","g","move","d","rect","circle","center","tf","group","complete","visible","colorIndex","label","svgEvents","colorToIndex","selectionBox","getMousePosition","CTM","node","getScreenCTM","clientX","clientY","f","dimCoord","max","trunc","posToLoc","pos","s","selectionBoxPosition","pos0","pos1","d0","d1","x0","min","y0","width","height","endDrag","secondary","extending","startIdx","c0","r0","r1","selectTiles","attrs","_setSelectedTiles","blur","obj","list","deepEqual","wellVal","commonArr","inArray","multiplexField","curMultipleVal","multipleVal","getWellSetAddressWithData","allTabs","tabHead","tabIndex","_tabClickHandler","tabDataContainer","_addDataTabs","clickedTab","selectedTab","previouslyClickedTabIndex","clickedTabIndex","undoRedoManager","state","splice","clearHistory","shiftUndoRedo","pointerDiff","pointer","setUndoRedo"],"mappings":"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","file":"plate-map.min.js","sourcesContent":["var plateMapWidget = plateMapWidget || {};\n\n(function($) {\n\n  plateMapWidget.addDataOnChange = function() {\n    // This object is invoked when something in the tab fields change\n    return {\n\n      _addAllData: function(data) {\n        let wells = [];\n        if (this.selectedIndices) {\n          let noOfSelectedObjects = this.selectedIndices.length;\n          this.selectedIndices.forEach(function (index) {\n            let well;\n            if (index in this.engine.derivative) {\n              well = this.engine.derivative[index];\n            } else {\n              well = $.extend(true, {}, this.defaultWell);\n              this.engine.derivative[index] = well;\n            }\n            well = this.processWellData(data, well, noOfSelectedObjects);\n            let empty = this.engine.wellEmpty(well);\n            if (empty) {\n              if (this.disableAddDeleteWell) {\n                if (this.engine.derivative.hasOwnProperty(index)) {\n                  well = $.extend(true, {}, this.emptyWellWithDefaultVal);\n                  this.engine.derivative[index] = well;\n                }\n              } else {\n                delete this.engine.derivative[index];\n              }\n            }\n          }, this);\n        }\n        // update multiplex remove all field\n        this._getAllMultipleVal(wells);\n        this.applyFieldWarning(wells);\n        // create well when default field is sent for the cases when user delete all fields during disabledNewDeleteWell mode\n        this._colorMixer();\n        this.derivativeChange();\n        this.addToUndoRedo();\n      },\n\n      processWellData: function(newData, curWell, noOfSelectedObjects) {\n        for (let id in newData) {\n          if (!newData.hasOwnProperty(id)) {\n            continue;\n          }\n          let newVal = newData[id];\n          if (newVal !== undefined && newVal !== null) {\n            if (newVal.multi) {\n              let preData = curWell[id];\n              newVal = this._getMultiData(preData, newVal, id, noOfSelectedObjects);\n            }\n            newVal = JSON.parse(JSON.stringify(newVal));\n          } else {\n            newVal = null;\n          }\n          curWell[id] = newVal;\n        }\n\n        return curWell\n      },\n\n      _getMultiData: function(preData, curData, fieldId, noOfSelectedObjects) {\n        let addNew = curData.added;\n        let removed = curData.removed;\n        if (addNew) {\n          if (preData) {\n            if (addNew.value) {\n              let add = true;\n              for (let listIdx in preData) {\n                if (!preData.hasOwnProperty(listIdx)) {\n                  continue;\n                }\n                let multiplexData = preData[listIdx];\n                // for cases when the add new data exist in well\n                if (multiplexData[fieldId].toString() === addNew.id.toString()) {\n                  add = false;\n                  // update subfield value\n                  preData = preData.map(function(val) {\n                    if (val[fieldId].toString() === addNew.id.toString()) {\n                      for (let subFieldId in val) {\n                        if (!val.hasOwnProperty(subFieldId)) {\n                          continue;\n                        }\n                        // over write previous data if only one well is selected\n                        if (subFieldId in addNew.value && subFieldId !== fieldId) {\n                          if (noOfSelectedObjects === 1) {\n                            val[subFieldId] = addNew.value[subFieldId];\n                          } else if (addNew.value[subFieldId]) {\n                            val[subFieldId] = addNew.value[subFieldId];\n                          }\n                        }\n                      }\n                    }\n                    return val;\n                  })\n                }\n              }\n              if (add) {\n                preData.push(addNew.value);\n              }\n            } else if (preData.indexOf(addNew) < 0) {\n              preData.push(addNew);\n            }\n          } else {\n            preData = [];\n            if (addNew.value) {\n              preData.push(addNew.value);\n            } else if (addNew) {\n              preData.push(addNew);\n            }\n          }\n        }\n\n        let removeListIndex = function(preData, removeIndex) {\n          let newPreData = [];\n          for (let idx in preData) {\n            if (!preData.hasOwnProperty(idx)) {\n              continue;\n            }\n            if (parseInt(idx) !== parseInt(removeIndex)) {\n              newPreData.push(preData[idx]);\n            }\n          }\n          return newPreData;\n        };\n\n        if (removed) {\n          let removeIndex;\n          // for multiplex field\n          if (removed.value) {\n            for (let listIdx in preData) {\n              let multiplexData = preData[listIdx];\n              if (multiplexData[fieldId].toString() === removed.id.toString()) {\n                removeIndex = listIdx;\n              }\n            }\n            // remove nested element\n            preData = removeListIndex(preData, removeIndex);\n          } else {\n            if (preData) {\n              removeIndex = preData.indexOf(removed);\n              if (removeIndex >= 0) {\n                preData = removeListIndex(preData, removeIndex);\n              }\n            }\n          }\n        }\n        if (preData && (preData.length === 0)) {\n          preData = null;\n        }\n        return preData\n      },\n\n      _colorMixer: function() {\n        this.engine.searchAndStack();\n        this.engine.applyColors();\n      },\n\n      derivativeChange: function() {\n        this._trigger(\"updateWells\", null, this);\n      },\n\n      createState: function() {\n        let derivative = $.extend(true, {}, this.engine.derivative);\n        let checkboxes = this.getCheckboxes();\n        let selectedIndices = this.selectedIndices.slice();\n\n        return {\n          \"derivative\": derivative,\n          \"checkboxes\": checkboxes,\n          \"selectedIndices\": selectedIndices,\n          \"requiredField\": this.requiredField\n        };\n      },\n\n      getPlate: function() {\n        let wells = {};\n        let derivative = this.engine.derivative;\n        for (let index in derivative) {\n          if (!derivative.hasOwnProperty(index)) {\n            continue;\n          }\n\n          let address = this.indexToAddress(index);\n          let well = derivative[index];\n          wells[address] = $.extend(true, {}, well);\n        }\n        let checkboxes = this.getCheckboxes();\n        let selectedAddresses = this.getSelectedAddresses();\n\n        return {\n          \"wells\": wells,\n          \"checkboxes\": checkboxes,\n          \"selectedAddresses\": selectedAddresses,\n          \"requiredField\": this.requiredField\n        };\n      }\n    };\n  }\n})(jQuery);","var plateMapWidget = plateMapWidget || {};\n\nplateMapWidget.addDataToFields = function() {\n\n  return {\n\n    _addDataToTabFields: function(well) {\n      // Configure how data is added to tab fields\n      for (let id in this.fieldMap) {\n        if (this.fieldMap.hasOwnProperty(id)) {\n          this._applyFieldData(id, well[id]);\n        }\n      }\n    },\n\n    _applyFieldData: function(id, v) {\n      if (v === undefined) {\n        v = null;\n      }\n      this.fieldMap[id].setValue(v);\n    }\n  }\n};\n","var plateMapWidget = plateMapWidget || {};\n\n(function($) {\n\n  plateMapWidget.addTabData = function() {\n\n    return {\n\n      fieldList: [],\n      fieldMap: {},\n      autoId: 1,\n\n      _addTabData: function() {\n        // Here we may need more changes because attributes format likely to change\n        let tabData = this.options.attributes.tabs;\n        let that = this;\n        this.requiredField = [];\n        let multiplexFieldArray = [];\n        tabData.forEach(function(tab, tabPointer) {\n          if (tab[\"fields\"]) {\n            let tabFields = tab[\"fields\"];\n            let fieldArray = [];\n            // Now we look for fields in the json\n            for (let field in tabFields) {\n              if (!tabFields.hasOwnProperty(field)) {\n                continue;\n              }\n              let data = tabFields[field];\n\n              if (!data.id) {\n                data.id = \"Auto\" + that.autoId++;\n                console.log(\"Field autoassigned id \" + data.id);\n              }\n              if (!data.type) {\n                data.type = \"text\";\n                console.log(\"Field \" + data.id + \" autoassigned type \" + data.type);\n              }\n\n              let field_val;\n              if (data.type === \"multiplex\") {\n                field_val = that._makeMultiplexField(data, tabPointer, fieldArray);\n                multiplexFieldArray.push(field_val);\n              } else {\n                field_val = that._makeRegularField(data, tabPointer, fieldArray, true);\n                if (data.type === \"multiselect\") {\n                  multiplexFieldArray.push(field_val);\n                }\n              }\n            }\n\n            that.allDataTabs[tabPointer][\"fields\"] = fieldArray;\n          } else {\n            console.log(\"unknown format in field initialization\");\n          }\n        });\n        that.multipleFieldList = multiplexFieldArray;\n      },\n\n      _makeSubField: function(data, tabPointer, fieldArray) {\n        let that = this;\n        if (!data.id) {\n          data.id = \"Auto\" + that.autoId++;\n          console.log(\"Field autoassigned id \" + data.id);\n        }\n        if (!data.type) {\n          data.type = \"text\";\n          console.log(\"Field \" + data.id + \" autoassigned type \" + data.type);\n        }\n        let wrapperDiv = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-default-field\");\n        let wrapperDivLeftSide = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-left-side\");\n        let wrapperDivRightSide = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-right-side\");\n        let nameContainer = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-name\").text(data.name);\n        let fieldContainer = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-container\");\n\n        $(wrapperDivRightSide).append(nameContainer);\n        $(wrapperDivRightSide).append(fieldContainer);\n        $(wrapperDiv).append(wrapperDivLeftSide);\n        $(wrapperDiv).append(wrapperDivRightSide);\n        $(that.allDataTabs[tabPointer]).append(wrapperDiv);\n\n        let field = {\n          id: data.id,\n          name: data.name,\n          root: wrapperDiv,\n          data: data,\n          required: data.required || false\n        };\n\n        fieldArray.push(field);\n        that.fieldMap[data.id] = field;\n\n        return field;\n      },\n\n      _makeRegularField: function(data, tabPointer, fieldArray, checkbox) {\n        let that = this;\n        let wrapperDiv = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-default-field\");\n        let wrapperDivLeftSide = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-left-side\");\n        let wrapperDivRightSide = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-right-side \");\n        let nameContainer = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-name\").text(data.name);\n        let fieldContainer = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-container\");\n\n        wrapperDivRightSide.append(nameContainer);\n        wrapperDivRightSide.append(fieldContainer);\n        wrapperDiv.append(wrapperDivLeftSide);\n        wrapperDiv.append(wrapperDivRightSide);\n        that.allDataTabs[tabPointer].append(wrapperDiv);\n\n        let field = {\n          id: data.id,\n          name: data.name,\n          root: wrapperDiv,\n          data: data,\n          required: data.required\n        };\n\n        if (field.required) {\n          that.requiredField.push(field.id);\n        }\n\n        fieldArray.push(field);\n        that.fieldList.push(field);\n        that.fieldMap[field.id] = field;\n\n        // Adding checkbox\n        if (checkbox) {\n          that._addCheckBox(field);\n        }\n        that._createField(field);\n\n        field.onChange = function() {\n          let v = field.getValue();\n          let data = {};\n          data[field.id] = v;\n          that._addAllData(data);\n        };\n        return field;\n      },\n\n      _makeMultiplexField: function(data, tabPointer, fieldArray) {\n        let that = this;\n        let wrapperDiv = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-default-field\");\n        let wrapperDivLeftSide = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-left-side\");\n        let wrapperDivRightSide = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-right-side \");\n        let nameContainer = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-name\").text(data.name);\n        let fieldContainer = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-container\");\n\n        wrapperDivRightSide.append(nameContainer);\n        wrapperDivRightSide.append(fieldContainer);\n        wrapperDiv.append(wrapperDivLeftSide);\n        wrapperDiv.append(wrapperDivRightSide);\n        that.allDataTabs[tabPointer].append(wrapperDiv);\n\n        let field = {\n          id: data.id,\n          name: data.name,\n          root: wrapperDiv,\n          data: data,\n          required: data.required\n        };\n\n        fieldArray.push(field);\n        that.fieldList.push(field);\n        that.fieldMap[data.id] = field;\n\n        let subFieldList = [];\n        //create subfields\n        let requiredSubField = [];\n        for (let subFieldKey in data.multiplexFields) {\n          if (!data.multiplexFields.hasOwnProperty(subFieldKey)) {\n            continue;\n          }\n          let subFieldData = data.multiplexFields[subFieldKey];\n          let subField = that._makeSubField(subFieldData, tabPointer, fieldArray);\n          subFieldList.push(subField);\n\n          // stores required  subField\n          if (subFieldData.required) {\n            requiredSubField.push(subField.id);\n          }\n        }\n\n        //store required field\n        if (field.required || requiredSubField.length) {\n          this.requiredField.push({\n            multiplexId: field.id,\n            subFields: requiredSubField\n          });\n        }\n\n        field.subFieldList = subFieldList;\n        that._createField(field);\n        that._addCheckBox(field);\n\n        subFieldList.forEach(function(subfield) {\n          subfield.mainMultiplexField = field;\n          fieldArray.push(subfield);\n          that._createField(subfield);\n          that._addCheckBox(subfield);\n          delete that.defaultWell[subfield.id];\n          // overwrite subField setvalue\n          subfield.onChange = function() {\n            let v = subfield.getValue();\n            let mainRefField = subfield.mainMultiplexField;\n            let curId = mainRefField.singleSelectValue();\n            //let curDataLs = mainRefField.detailData;\n            let curVal = {};\n            curVal[mainRefField.id] = curId;\n            //append subfields\n            curVal[subfield.id] = v;\n            let returnVal = {\n              id: curId,\n              value: curVal\n            };\n\n            field._changeMultiFieldValue(returnVal, null);\n            let curDataLs = mainRefField.detailData;\n            if (curDataLs !== null) {\n              curId = mainRefField.singleSelectValue();\n              curDataLs = curDataLs.map(function(curData) {\n                if (curData[mainRefField.id] === curId) {\n                  curData[subfield.id] = v;\n                }\n                return curData;\n              });\n            }\n            mainRefField.detailData = curDataLs;\n          };\n\n        });\n\n        return field;\n      }\n    }\n  }\n\n})(jQuery);\n","var plateMapWidget = plateMapWidget || {};\n\n(function($) {\n\n  plateMapWidget.addWarningMsg = function() {\n    // For those check boxes associated with every field in the tab\n    return {\n      fieldWarningMsg: function(field, text, include) {\n        let that = this;\n        let imgId = \"fieldWarning\" + field.id;\n        let img = $(\"<span>\").html(that._assets.warningImg).attr(\"id\", imgId).addClass(\"plate-field-warning-image\");\n        if (include) {\n          if (field.root.find(\"#\" + imgId).length <= 0) {\n            field.root.find(\".plate-setup-tab-name\").text(\" \" + field.name);\n            field.root.find(\".plate-setup-tab-name\").prepend(img);\n\n            let popText = $(\"<div/>\").addClass(\"pop-out-text\");\n            popText.text(text);\n            field.root.find(\".plate-setup-tab-name\").append(popText);\n\n            $(\"#\" + imgId).hover(function() {\n              popText[0].style.display = 'flex';\n            }, function() {\n              popText.hide();\n            });\n          }\n\n\n        } else {\n          if (field.root.find(\"#\" + imgId).length > 0) {\n            field.root.find(\".plate-setup-tab-name\").text(field.name);\n            $(\"#\" + imgId).remove();\n          }\n        }\n      },\n\n      removeWarningMsg: function(field, text, include) {\n        let that = this;\n        let imgId = \"fieldWarning\" + field.id;\n        let img = $(\"<span>\").html(that._assets.warningImg).attr(\"id\", imgId).addClass(\"plate-field-warning-image\");\n        //field.root.find(\".plate-setup-tab-name\").append('<img id=\"theImg\" src=\"theImg.png\" />')\n        if (include) {\n          field.root.find(\".plate-setup-tab-name\").append(img);\n\n          let popText = $(\"<div/>\").addClass(\"pop-out-text\");\n          popText.text(text);\n          field.root.find(\".plate-setup-tab-name\").append(popText);\n\n          $(\"#\" + imgId).hover(function() {\n            popText[0].style.display = 'inline-block';\n          }, function() {\n            popText.hide();\n          });\n\n        } else {\n          $(\"#\" + imgId).remove();\n          if (field.root.find(\"#\" + imgId).length > 0) {\n            //field.root.find(\".plate-setup-tab-name\").remove(img);\n            $(\"#\" + imgId).remove();\n          }\n        }\n      },\n\n      applyFieldWarning: function(wells) {\n        let that = this;\n        let fieldData = {};\n        that.fieldList.forEach(function(field) {\n          fieldData[field.id] = [];\n        });\n        wells.forEach(function(well) {\n          if (!that.engine.wellEmpty(well)) {\n            for (let fieldId in fieldData) {\n              if (fieldId in well) {\n                fieldData[fieldId].push(well[fieldId]);\n              } else {\n                fieldData[fieldId].push(null);\n              }\n            }\n          }\n        });\n        for (let i = 0; i < that.fieldList.length; i++) {\n          let field = that.fieldList[i];\n          if (field.applyMultiplexSubFieldColor) {\n            field.applyMultiplexSubFieldColor(fieldData[field.id]);\n          } else {\n            if (field.required) {\n              let include = false;\n              fieldData[field.id].forEach(function(val) {\n                // for multiselect\n                if (val instanceof Array) {\n                  if (val.length === 0) {\n                    include = true;\n                  }\n                } else {\n                  if (val === null) {\n                    include = true;\n                  }\n                }\n              });\n              //field.root.find(\".plate-setup-tab-name\").css(\"background\", color);\n              that.fieldWarningMsg(field, \"required field\", include);\n            }\n          }\n        }\n      }\n    }\n  }\n})(jQuery);","var plateMapWidget = plateMapWidget || {};\n\n(function($) {\n\n  plateMapWidget.bottomTable = function() {\n    // for bottom table\n    return {\n      _bottomScreen: function() {\n        this.bottomContainer = this._createElement(\"<div></div>\").addClass(\"plate-setup-bottom-container\");\n        this.bottomTableContainer = this._createElement(\"<div></div>\").addClass(\"plate-setup-bottom-table-container\");\n        this.bottomTable = this._createElement(\"<table></table>\").addClass(\"plate-setup-bottom-table\");\n        this.bottomTableHead = this._createElement(\"<thead></thead>\");\n        this.bottomTableBody = this._createElement(\"<tbody></tbody>\");\n        this.bottomTable.append(this.bottomTableHead);\n        this.bottomTable.append(this.bottomTableBody);\n        this.bottomTableContainer.append(this.bottomTable);\n        this.bottomContainer.append(this.bottomTableContainer);\n        this.container.append(this.bottomContainer);\n      },\n\n      addBottomTableHeadings: function() {\n\n        let row = this._createElement(\"<tr></tr>\");\n\n        let singleField = this._createElement(\"<th></th>\")\n          .text(\"Group\");\n        row.prepend(singleField);\n\n        this.rowCounter = 1;\n\n        for (let i = 0; i < this.globalSelectedAttributes.length; i++) {\n          let attr = this.globalSelectedAttributes[i];\n          let field = this.fieldMap[attr];\n          let singleField = this._createElement(\"<th></th>\").text(field.name);\n          row.append(singleField);\n          this.rowCounter = this.rowCounter + 1;\n        }\n\n        // Now we append all the captions at the place.\n        this.bottomTableBody.empty();\n        this.bottomTableHead.empty();\n        this.bottomTableHead.append(row);\n        this.adjustFieldWidth(this.bottomRow);\n      },\n\n      tileAttrText: function(tile, attr) {\n        let well = this.engine.derivative[tile.index];\n        let field = this.fieldMap[attr];\n        return field.getText(well[attr]);\n      },\n\n      addBottomTableRow: function(color, singleStack) {\n        let that = this;\n        let modelTile = this.allTiles[singleStack[0]];\n        let row = this._createElement(\"<tr></tr>\");\n        let plateIdDiv = this._createElement(\"<td></td>\").addClass(\"plate-setup-bottom-id\");\n        let numberText = this._createElement(\"<button/>\");\n        numberText.addClass(\"plate-setup-color-text\");\n        numberText.text(color);\n        plateIdDiv.append(numberText);\n\n        numberText.click(function(evt) {\n          let addressToSelect = singleStack.map(that.indexToAddress, that);\n          if (evt.ctrlKey) {\n            that.getSelectedAddresses().forEach(function(val) {\n              if (addressToSelect.indexOf(val) < 0) {\n                addressToSelect.push(val);\n              }\n            })\n          }\n          that.setSelectedAddresses(addressToSelect);\n        });\n\n        if (color > 0) {\n          color = ((color - 1) % (this.colorPairs.length - 1)) + 1;\n        }\n        let colorStops = this.colorPairs[color];\n\n        plateIdDiv.css(\"background\", \"linear-gradient(to right, \" + colorStops[0] + \" , \" + colorStops[1] + \")\");\n\n        row.append(plateIdDiv);\n\n        for (let i = 0; i < this.globalSelectedAttributes.length; i++) {\n          let attr = this.globalSelectedAttributes[i];\n          let text = this.tileAttrText(modelTile, attr);\n          let dataDiv = this._createElement(\"<td></td>\").text(text);\n          row.append(dataDiv);\n        }\n        this.bottomTableBody.append(row);\n        this.adjustFieldWidth(row);\n      },\n\n      bottomForFirstTime: function() {\n        this.addBottomTableHeadings();\n        // This is executed for the very first time.. !\n        let row = this._createElement(\"<tr></tr>\");\n\n        let colorStops = this.colorPairs[0];\n        let plateIdDiv = this._createElement(\"<td></td>\");\n        plateIdDiv.css(\"background\", \"-webkit-linear-gradient(left, \" + colorStops[0] + \" , \" + colorStops[1] + \")\");\n        row.append(plateIdDiv);\n        this.bottomTableBody.append(row);\n        this.createExportButton();\n      },\n\n      adjustFieldWidth: function(row) {\n\n        let length = this.rowCounter;\n        if ((length) * 150 > 1024) {\n          row.css(\"width\", (length) * 152 + \"px\");\n        }\n      },\n\n      downloadCSV: function(csv, filename) {\n        let csvFile;\n        let downloadLink;\n\n        // CSV file\n        csvFile = new Blob([csv], {\n          type: \"text/csv\"\n        });\n\n        // Download link\n        downloadLink = document.createElement(\"a\");\n\n        // File name\n        downloadLink.download = filename;\n\n        // Create a link to the file\n        downloadLink.href = window.URL.createObjectURL(csvFile);\n\n        // Hide download link\n        downloadLink.style.display = \"none\";\n\n        // Add the link to DOM\n        document.body.appendChild(downloadLink);\n\n        // Click download link\n        downloadLink.click();\n      },\n\n      exportData: function(format) {\n        let data = [];\n        let rows = document.querySelectorAll(\"table tr\");\n\n        let colorLocMap = {};\n        let colorLocIdxMap = this.engine.stackUpWithColor;\n        for (let colorIdx in colorLocIdxMap) {\n          if (colorLocIdxMap.hasOwnProperty(colorIdx)) {\n            colorLocMap[colorIdx] = colorLocIdxMap[colorIdx].map(this.indexToAddress, this);\n          }\n        }\n\n        for (let i = 0; i < rows.length; i++) {\n          let row = [],\n            cols = rows[i].querySelectorAll(\"td, th\");\n\n          for (let j = 0; j < cols.length; j++) {\n            let v = \"\";\n            if (cols[j].innerText) {\n              if (format === \"csv\") {\n                v = '\"' + cols[j].innerText.replace(/\"/g, '\"\"') + '\"';\n              } else {\n                v = cols[j].innerText;\n              }\n            }\n            row.push(v);\n\n            // add location column\n            if (i === 0 && j === 0) {\n              if (format === \"csv\") {\n                row.push('\"Location\"');\n              } else if (format === 'clipboard') {\n                row.push(\"Location\");\n              }\n\n            }\n            if (i !== 0 && j === 0) {\n              let loc = '';\n              if (colorLocMap[parseInt(cols[j].innerText)]) {\n                if (format === \"csv\") {\n                  loc = '\"' + colorLocMap[parseInt(cols[j].innerText)].join(\",\") + '\"';\n                } else if (format === 'clipboard') {\n                  loc = colorLocMap[parseInt(cols[j].innerText)].join(\",\");\n                }\n              }\n              row.push(loc);\n            }\n          }\n\n          if (format === \"csv\") {\n            data.push(row.join(\",\"));\n          } else if (format === 'clipboard') {\n            data.push(row.join(\"\\t\"));\n            //data.push(row);   // for text type\n          }\n\n        }\n        if (format === \"csv\") {\n          // Download CSV file\n          this.downloadCSV(data.join(\"\\n\"), 'table.csv');\n        } else if (format === 'clipboard') {\n          //return formatTableToString(data);   // for text type\n          return data.join(\"\\n\");\n        }\n      },\n\n      createExportButton: function() {\n        let that = this;\n        let overlayContainer = $(\"<div>\").addClass(\"plate-setup-bottom-control-container\");\n\n        let descriptionDiv = $(\"<div>\").addClass(\"plate-setup-overlay-text-container\");\n        descriptionDiv.text(\"Color groups\");\n        overlayContainer.append(descriptionDiv);\n\n        let buttonContainer = $(\"<div>\").addClass(\"plate-setup-overlay-bottom-button-container\");\n\n        // create export csv option\n        let exportButton = $(\"<button/>\").addClass(\"plate-setup-button\");\n        exportButton.text(\"Export CSV\");\n        buttonContainer.append(exportButton);\n\n        exportButton.click(function() {\n          that.exportData('csv');\n          exportButton.text(\"Exported\");\n          exportButton[0].classList.remove(\"plate-setup-button\");\n          exportButton.addClass(\"plate-setup-clicked-button\");\n          setTimeout(resetExportText, 3000);\n        });\n\n        function resetExportText() {\n          exportButton.text(\"Export CSV\");\n          exportButton[0].classList.remove(\"plate-setup-clicked-button\");\n          exportButton.addClass(\"plate-setup-button\");\n        }\n\n        // creat clipboard option, CLipboard is an external js file located in vendor/asset/javascripts\n        let clipboardButton = $(\"<button/>\").addClass(\"plate-setup-button\");\n        clipboardButton.text(\"Copy To Clipboard\");\n        buttonContainer.append(clipboardButton);\n\n        let clipboard = new ClipboardJS(clipboardButton.get(0), {\n          text: function() {\n            return that.exportData(\"clipboard\");\n          }\n        });\n\n        clipboard.on('success', function() {\n          clipboardButton.text(\"Copied as tab-delimited format\");\n          clipboardButton[0].classList.remove(\"plate-setup-button\");\n          clipboardButton.addClass(\"plate-setup-clicked-button\");\n          setTimeout(resetClipboardText, 3000);\n        });\n\n        function resetClipboardText() {\n          clipboardButton.text(\"Copy To Clipboard\");\n          clipboardButton[0].classList.remove(\"plate-setup-clicked-button\");\n          clipboardButton.addClass(\"plate-setup-button\");\n        }\n\n        clipboard.on('error', function() {\n          clipboardButton.text(\"Failed to copy table to clipboard: browser may be incompatible\");\n          setTimeout(resetClipboardText, 3000);\n        });\n\n        overlayContainer.append(buttonContainer);\n        this.bottomContainer.prepend(overlayContainer);\n      }\n    };\n  }\n})(jQuery);","var plateMapWidget = plateMapWidget || {};\n\n(function($) {\n\n  plateMapWidget.checkBox = function() {\n    // For those check boxes associated with every field in the tab\n    return {\n\n      globalSelectedAttributes: [],\n\n      _addCheckBox: function(field) {\n        var checkImage = $(\"<span>\").html(this._assets.dontImg).addClass(\"plate-setup-tab-check-box bg-light\")\n          .data(\"clicked\", false);\n        checkImage.data(\"linkedFieldId\", field.id);\n        field.root.find(\".plate-setup-tab-field-left-side\").empty().append(checkImage);\n        this._applyCheckboxHandler(checkImage); // Adding handler for change the image when clicked\n        field.checkbox = checkImage;\n      },\n\n      _applyCheckboxHandler: function(checkBoxImage) {\n        var that = this;\n        checkBoxImage.click(function() {\n          var checkBox = $(this);\n\n          var changes = {};\n          changes[checkBox.data(\"linkedFieldId\")] = !checkBox.data(\"clicked\");\n\n          that.changeCheckboxes(changes);\n        });\n      },\n\n      getCheckboxes: function () {\n        var fieldIds = this.globalSelectedAttributes.slice();\n        Object.values(this.globalSelectedMultiplexSubfield).forEach(function (subfieldIds) {\n            fieldIds = fieldIds.concat(subfieldIds);\n        });\n        return fieldIds;\n      },\n\n      changeSubFieldsCheckboxes: function(field, changes) {\n        var that = this;\n        var subFieldToInclude = [];\n\n        field.subFieldList.forEach(function(subField) {\n          var checkImage = subField.checkbox;\n          var fieldId = checkImage.data(\"linkedFieldId\");\n          var clicked = checkImage.data(\"clicked\");\n          if (fieldId in changes) {\n            clicked = Boolean(changes[fieldId]);\n          }\n          checkImage.data(\"clicked\", clicked);\n          if (clicked) {\n            checkImage.html(that._assets.doImg);\n            subFieldToInclude.push(subField.id);\n          } else {\n            checkImage.html(that._assets.dontImg);\n          }\n        });\n        return subFieldToInclude;\n      },\n\n      changeCheckboxes: function(changes, noUndoRedo) {\n        var gsa = [];\n        var multiplexCheckedSubField = {};\n        for (var i = 0; i < this.fieldList.length; i++) {\n          var field = this.fieldList[i];\n          if (field.checkbox) {\n            if (field.subFieldList) {\n              multiplexCheckedSubField[field.id] = this.changeSubFieldsCheckboxes(field, changes);\n            }\n\n            var checkImage = field.checkbox;\n            var fieldId = checkImage.data(\"linkedFieldId\");\n            var clicked = checkImage.data(\"clicked\");\n            if (fieldId in changes) {\n              clicked = Boolean(changes[fieldId]);\n            }\n            checkImage.data(\"clicked\", clicked);\n            if (clicked) {\n              gsa.push(fieldId);\n              checkImage.html(this._assets.doImg);\n            } else {\n              checkImage.html(this._assets.dontImg);\n            }\n          }\n        }\n        this.globalSelectedMultiplexSubfield = multiplexCheckedSubField;\n        this.globalSelectedAttributes = gsa;\n        this._clearPresetSelection();\n        this._colorMixer();\n        if (!noUndoRedo) {\n          this.addToUndoRedo();\n        }\n      },\n\n      setSubFieldCheckboxes: function(field, fieldIds) {\n        var that = this;\n        var subFieldToInclude = [];\n        field.subFieldList.forEach(function(subField) {\n          var checkImage = subField.checkbox;\n          var fieldId = checkImage.data(\"linkedFieldId\");\n          var clicked = fieldIds.indexOf(fieldId) >= 0;\n          checkImage.data(\"clicked\", clicked);\n          if (clicked) {\n            checkImage.html(that._assets.doImg);\n            subFieldToInclude.push(subField.id);\n          } else {\n            checkImage.html(that._assets.dontImg);\n          }\n        });\n        return subFieldToInclude;\n      },\n\n      setCheckboxes: function(fieldIds, noUndoRedo) {\n        fieldIds = fieldIds || [];\n        var gsa = [];\n        var multiplexCheckedSubField = {};\n\n        for (var i = 0; i < this.fieldList.length; i++) {\n          var field = this.fieldList[i];\n          if (field.checkbox) {\n            // special handling for multiplex field\n            if (field.subFieldList) {\n              multiplexCheckedSubField[field.id] = this.setSubFieldCheckboxes(field, fieldIds);\n            }\n\n            var checkImage = field.checkbox;\n            var fieldId = checkImage.data(\"linkedFieldId\");\n            var clicked = fieldIds.indexOf(fieldId) >= 0;\n            checkImage.data(\"clicked\", clicked);\n            if (clicked) {\n              gsa.push(fieldId);\n              checkImage.html(this._assets.doImg);\n            } else {\n\n              checkImage.html(this._assets.dontImg);\n            }\n          }\n        }\n        this.globalSelectedMultiplexSubfield = multiplexCheckedSubField;\n        this.globalSelectedAttributes = gsa;\n        this._clearPresetSelection();\n        this._colorMixer();\n        if (!noUndoRedo) {\n          this.addToUndoRedo();\n        }\n      }\n\n    };\n  }\n})(jQuery);","var plateMapWidget = plateMapWidget || {};\n\nplateMapWidget.colorManager = function() {\n\n  return {\n    // See these are color pairs for the gradient.\n    colorPairs: [\n      [\"#e6e6e6\", \"#808080\"],\n      [\"#66e8ff\", \"#0082c8\"],\n      [\"#ff7fb1\", \"#e6194b\"],\n      [\"#a2ffb1\", \"#3cb44b\"],\n      [\"#f784ff\", \"#911eb4\"],\n      [\"#ffe897\", \"#f58231\"],\n      [\"#6666ff\", \"#0000FF\"],\n      [\"#ffff7f\", \"#ffe119\"],\n      [\"#acffff\", \"#46f0f0\"],\n      [\"#ff98ff\", \"#f032e6\"],\n      [\"#ffffa2\", \"#d2f53c\"],\n      [\"#ffffff\", \"#fabebe\"],\n      [\"#66e6e6\", \"#008080\"],\n      [\"#ffffff\", \"#e6beff\"],\n      [\"#ffd48e\", \"#aa6e28\"],\n      [\"#e66666\", \"#800000\"],\n      [\"#ffffff\", \"#aaffc3\"],\n      [\"#e6e666\", \"#808000\"],\n      [\"#ffffff\", \"#ffd8b1\"],\n      [\"#66a9ef\", \"#004389\"],\n      [\"#ff6672\", \"#a7000c\"],\n      [\"#66db72\", \"#00750c\"],\n      [\"#b866db\", \"#520075\"],\n      [\"#ffa966\", \"#b64300\"],\n      [\"#ffff66\", \"#c0a200\"],\n      [\"#6dffff\", \"#07b1b1\"],\n      [\"#ff66ff\", \"#b100a7\"],\n      [\"#f9ff66\", \"#93b600\"],\n      [\"#ffe5e5\", \"#bb7f7f\"],\n      [\"#66a7a7\", \"#004141\"],\n      [\"#ffe5ff\", \"#a77fc0\"],\n      [\"#d19566\", \"#6b2f00\"],\n      [\"#ffffef\", \"#c0bb89\"],\n      [\"#d1ffea\", \"#6bc084\"],\n      [\"#a7a766\", \"#414100\"],\n      [\"#ffffd8\", \"#c09972\"],\n      [\"#a5ffff\", \"#3fc1ff\"],\n      [\"#ffbef0\", \"#ff588a\"],\n      [\"#e1fff0\", \"#7bf38a\"],\n      [\"#ffc3ff\", \"#d05df3\"],\n      [\"#ffffd6\", \"#ffc170\"],\n      [\"#a5a5ff\", \"#3f3fff\"],\n      [\"#ffffbe\", \"#ffff58\"],\n      [\"#ebffff\", \"#85ffff\"],\n      [\"#ffd7ff\", \"#ff71ff\"],\n      [\"#a5ffff\", \"#3fbfbf\"],\n      [\"#ffffcd\", \"#e9ad67\"],\n      [\"#ffa5a5\", \"#bf3f3f\"],\n      [\"#ffffa5\", \"#bfbf3f\"]\n    ]\n  }\n};\n","var plateMapWidget = plateMapWidget || {};\n\n(function($) {\n\n  function select2close(ev) {\n    if (ev.params.args.originalEvent) {\n      // When unselecting (in multiple mode)\n      ev.params.args.originalEvent.stopPropagation();\n    } else {\n      // When clearing (in single mode)\n      $(this).one('select2:opening', function(ev) { ev.preventDefault(); });\n    }\n  }\n\n  function select2fix(input) {\n    // prevents select2 open on clear as of v4.0.8\n    input.on('select2:unselecting', select2close);\n  }\n\n  function select2setData(input, data, selected) {\n    input.empty();\n    let dataAdapter = input.data('select2').dataAdapter;\n    dataAdapter.addOptions(dataAdapter.convertToOptions(data));\n    input.val(selected);\n  }\n\n  plateMapWidget.createField = function() {\n    // It creates those fields in the tab , there is 4 types of them.\n    return {\n\n      _createField: function(field) {\n        switch (field.data.type) {\n          case \"text\":\n            this._createTextField(field);\n            break;\n\n          case \"numeric\":\n            this._createNumericField(field);\n            break;\n\n          case \"select\":\n            this._createSelectField(field);\n            break;\n\n          case \"multiselect\":\n            this._createMultiSelectField(field);\n            break;\n\n          case \"boolean\":\n            this._createBooleanField(field);\n            break;\n\n          case \"multiplex\":\n            this._createMultiplexField(field);\n            break;\n        }\n      },\n\n      _createTextField: function(field) {\n        let id = field.id;\n        let that = this;\n        let input = this._createElement(\"<input>\").attr(\"id\", id)\n          .addClass(\"plate-setup-tab-input\");\n\n        field.root.find(\".plate-setup-tab-field-container\").append(input);\n        that.defaultWell[id] = null;\n\n        field.parseValue = function(v) {\n          if (v) {\n            v = String(v);\n          } else {\n            v = null;\n          }\n          return v;\n        };\n\n        field.getValue = function() {\n          return input.val().trim() || null;\n        };\n\n        field.setValue = function(v) {\n          input.val(v);\n        };\n\n        field.getText = function(v) {\n          if (v == null) {\n            return \"\";\n          }\n          return v;\n        };\n\n        field.disabled = function(bool) {\n          field.input.prop(\"disabled\", bool);\n        };\n\n        field.parseText = field.parseValue;\n\n        input.on(\"input\", function() {\n          field.onChange();\n        });\n\n        field.input = input;\n      },\n\n      _createOpts: function(config) {\n        let opts = {\n          allowClear: true,\n          placeholder: \"select\",\n          minimumResultsForSearch: 10\n        };\n        let data_specified = false;\n\n        if (config.options) {\n          opts.data = config.options;\n          data_specified = true;\n        }\n        if (config.ajax) {\n          opts.ajax = ajax;\n          data_specified = true;\n        }\n        if (!data_specified) {\n          throw \"Must specify data or ajax\";\n        }\n        return opts;\n      },\n\n      _createSelectField: function(field) {\n        let id = field.id;\n        let that = this;\n        let input = this._createElement(\"<select/>\").attr(\"id\", id)\n          .addClass(\"plate-setup-tab-select-field\");\n\n        field.root.find(\".plate-setup-tab-field-container\").append(input);\n        that.defaultWell[id] = null;\n\n        let opts = that._createOpts(field.data);\n        let optMap = {};\n        opts.data.forEach(function(opt) {\n          optMap[String(opt.id)] = opt;\n        });\n\n        input.select2(opts);\n        select2fix(input);\n\n        field.parseValue = function(value) {\n          let v = value;\n\n          if (v === \"\") {\n            v = null;\n          }\n          if (v == null) {\n            return null;\n          }\n          v = String(v);\n          if (v in optMap) {\n            return optMap[v].id;\n          } else {\n            throw \"Invalid value \" + value + \" for select field \" + id;\n          }\n        };\n\n        field.disabled = function(bool) {\n          field.input.prop(\"disabled\", bool);\n        };\n\n        field.getValue = function() {\n          return field.parseValue(input.val());\n        };\n\n        field.setValue = function(v) {\n          input.val(v);\n          input.trigger(\"change.select2\")\n        };\n\n        field.getText = function(v) {\n          if (v == null) {\n            return \"\";\n          }\n          return optMap[String(v)].text;\n        };\n\n        field.parseText = function(value) {\n          let v = value;\n\n          if (v === \"\") {\n            v = null;\n          }\n          if (v == null) {\n            return null;\n          }\n          v = String(v);\n          if (v in optMap) {\n            return optMap[v].text;\n          } else {\n            throw \"Invalid text value \" + value + \" for select field \" + id;\n          }\n        };\n\n        input.on(\"change\", function() {\n          field.onChange();\n        });\n\n        field.input = input;\n      },\n\n      _createMultiSelectField: function(field) {\n        let id = field.id;\n        let that = this;\n        let input = this._createElement(\"<select/>\").attr(\"id\", id)\n          .addClass(\"plate-setup-tab-multiselect-field\");\n        input.attr(\"multiple\", \"multiple\");\n\n        field.root.find(\".plate-setup-tab-field-container\").append(input);\n        that.defaultWell[id] = null;\n\n        let opts = that._createOpts(field.data);\n        opts.multiple = true;\n        let optMap = {};\n        opts.data.forEach(function(opt) {\n          optMap[String(opt.id)] = opt;\n        });\n        input.select2(opts);\n        select2fix(input);\n\n        field.disabled = function(bool) {\n          input.prop(\"disabled\", bool);\n        };\n\n        field._parseOne = function(val) {\n          val = String(val);\n          if (val in optMap) {\n            return optMap[val].id;\n          } else {\n            throw \"Invalid value \" + val + \" for multiselect field \" + id;\n          }\n        };\n\n        field._parseMany = function(vals) {\n          if (vals && vals.length) {\n            vals = vals.map(field._parseOne, this);\n          } else {\n            vals = null;\n          }\n          return vals;\n        };\n\n        field.parseValue = function(value) {\n          return field._parseMany(value);\n        };\n\n        field.getValue = function() {\n          return field._parseMany(input.val());\n        };\n\n        field.setValue = function(v) {\n          v = v || [];\n          input.val(v);\n          input.trigger(\"change.select2\");\n        };\n\n        field.getText = function(v) {\n          if (v == null) {\n            return \"\";\n          }\n          if (v.length > 0) {\n            return v.map(v => optMap[String(v)].text).join(\"; \");\n          }\n          return \"\";\n        };\n\n        field.multiOnChange = function(added, removed) {\n          if (added) {\n            added = added.id;\n          }\n          if (removed) {\n            removed = removed.id;\n          }\n          let data = {};\n          data[field.id] = {\n            multi: true,\n            added: added,\n            removed: removed\n          };\n          that._addAllData(data);\n        };\n\n        field.parseText = function(value) {\n          let v = value;\n          if (v && v.length) {\n            v = v.map(function(opt) {\n              opt = String(opt);\n              if (opt in optMap) {\n                return optMap[opt].text;\n              } else {\n                throw \"Invalid text value \" + opt + \" for multiselect field \" + id;\n              }\n            });\n          } else {\n            v = null;\n          }\n          return v;\n        };\n\n        input.on(\"select2:select\", function (e) {\n          let v = field._parseOne(e.params.data.id);\n          v = {id: v};\n          field.multiOnChange(v, null);\n        });\n\n        input.on(\"select2:unselect\", function (e) {\n          let v = field._parseOne(e.params.data.id);\n          v = {id: v};\n          field.multiOnChange(null, v);\n        });\n\n        field.input = input;\n\n        that._createDeleteButton(field);\n      },\n\n      _createNumericField: function(field) {\n        let id = field.id;\n        let data = field.data;\n        let that = this;\n        let input = this._createElement(\"<input>\").addClass(\"plate-setup-tab-input\")\n          .attr(\"placeholder\", data.placeholder || \"\").attr(\"id\", id);\n\n        field.root.find(\".plate-setup-tab-field-container\").append(input);\n        that.defaultWell[id] = null;\n\n        // Adding unit\n        let units = data.units || [];\n        let defaultUnit = data.defaultUnit || null;\n        let unitInput = null;\n        if (defaultUnit) {\n          if (units.length) {\n            if (units.indexOf(defaultUnit) < 0) {\n              defaultUnit = units[0];\n            }\n          } else {\n            units = [defaultUnit];\n          }\n        } else {\n          if (units.length) {\n            defaultUnit = units[0];\n          }\n        }\n\n        if (units.length) {\n          field.units = units;\n          field.hasUnits = true;\n          field.defaultUnit = defaultUnit;\n          if (units.length === 1) {\n            let unitText = $(\"<div></div>\").addClass(\"plate-setup-tab-unit\");\n            unitText.text(defaultUnit);\n            field.root.find(\".plate-setup-tab-field-container\").append(unitText);\n          } else {\n            unitInput = this._createElement(\"<select/>\").attr(\"id\", id)\n              .addClass(\"plate-setup-tab-label-select-field\");\n\n            field.root.find(\".plate-setup-tab-field-container\").append(unitInput);\n\n            let selected = null;\n            let unitData = units.map(function(unit) {\n              let o = {\n                id: unit,\n                text: unit\n              };\n              if (unit === defaultUnit) {\n                selected = unit;\n              }\n              return o;\n            });\n\n            let opts = {\n              data: unitData,\n              allowClear: false,\n              minimumResultsForSearch: 10\n            };\n\n            unitInput.select2(opts);\n            unitInput.val(selected);\n          }\n        }\n\n        field.disabled = function(bool) {\n          field.input.prop(\"disabled\", bool);\n          if (unitInput) {\n            unitInput.prop(\"disabled\", bool);\n          }\n        };\n\n        field.setUnitOpts = function(opts) {\n          field.units = opts || null;\n          field.defaultUnit = null;\n\n          let newUnits = [];\n          let selected = null;\n          if (field.units && field.units.length) {\n            field.defaultUnit = field.units[0];\n            newUnits = field.units.map(function(curUnit) {\n              let cleanUnit = {\n                id: curUnit,\n                text: curUnit\n              };\n              if (curUnit === field.defaultUnit) {\n                selected = curUnit;\n              }\n              return cleanUnit;\n            });\n          }\n\n          select2setData(unitInput, newUnits, selected);\n        };\n\n        field.parseValue = function(value) {\n          let v;\n          if ($.isPlainObject(value)) {\n            if (field.hasUnits) {\n              v = field.parseRegularValue(value.value);\n              if (v === null) {\n                return null;\n              }\n              return {\n                value: v,\n                unit: field.parseUnit(value.unit)\n              };\n            } else {\n              throw \"Value must be plain numeric for numeric field \" + id;\n            }\n          } else {\n            if (field.hasUnits) {\n              v = field.parseRegularValue(value);\n              if (v === null) {\n                return null;\n              }\n              return {\n                value: v,\n                unit: field.defaultUnit\n              };\n            } else {\n              return field.parseRegularValue(value);\n            }\n          }\n        };\n\n        field.getValue = function() {\n          let v = field.getRegularValue();\n\n          if ((v === null) || isNaN(v)) {\n            return null;\n          } else if (field.hasUnits) {\n            let returnVal = {\n              value: v,\n              unit: field.getUnit()\n            };\n\n            if (field.data.hasMultiplexUnit) {\n              // include unitTypeId and UnitId to returnVal\n              let unitMap = field.data.unitMap;\n              for (let unitTypeKey in unitMap) {\n                if (!unitMap.hasOwnProperty(unitTypeKey)) {\n                  continue;\n                }\n                let unitTypeUnits = unitMap[unitTypeKey];\n                unitTypeUnits.forEach(function(unit) {\n                  if (unit.text === returnVal.unit) {\n                    returnVal['unitTypeId'] = unitTypeKey;\n                    returnVal['unitId'] = unit.id;\n                  }\n                })\n              }\n            }\n            return returnVal;\n          } else {\n            return v;\n          }\n        };\n\n        field.setValue = function(value) {\n          if (field.hasUnits) {\n            if ($.isPlainObject(value)) {\n              field.setUnit(value.unit || field.defaultUnit);\n              field.setRegularValue(value.value);\n\n            } else {\n              field.setRegularValue(value);\n              field.setUnit(field.defaultUnit)\n            }\n          } else {\n            field.setRegularValue(value);\n          }\n        };\n\n        field.parseRegularValue = function(value) {\n          if (value == null) {\n            return null;\n          }\n          let v = String(value).trim();\n          if (v === \"\") {\n            return null;\n          }\n          v = Number(value);\n          if (isNaN(v)) {\n            throw \"Invalid value \" + value + \" for numeric field \" + id;\n          }\n          return v;\n        };\n\n        field.getRegularValue = function() {\n          let v = input.val().trim();\n          if (v === \"\") {\n            v = null;\n          } else {\n            v = Number(v);\n          }\n          return v;\n        };\n\n        field.setRegularValue = function(value) {\n          input.val(value);\n        };\n\n        field.parseUnit = function(unit) {\n          if (unit == null || unit === \"\") {\n            return field.defaultUnit;\n          }\n          for (let i = 0; i < units.length; i++) {\n            if (unit.toLowerCase() === units[i].toLowerCase()) {\n              return units[i];\n            }\n          }\n          throw \"Invalid unit \" + unit + \" for field \" + id;\n        };\n\n        field.getUnit = function() {\n          if (unitInput) {\n            return unitInput.val();\n          } else {\n            return field.defaultUnit;\n          }\n        };\n\n        field.setUnit = function(unit) {\n          if (unitInput) {\n            unit = unit || field.defaultUnit;\n            unitInput.val(unit);\n            unitInput.trigger(\"change.select2\");\n          }\n        };\n\n        // val now contains unit\n        field.getText = function(val) {\n          if (typeof (val) === 'object' && val) {\n            let v = val.value;\n            let u = val.unit;\n            if (v == null) {\n              return \"\";\n            }\n            v = v.toString();\n            if (!u) {\n              u = defaultUnit;\n            }\n            if (u) {\n              v = v + \" \" + u;\n            }\n            return v;\n          } else {\n            return field.getRegularText(val);\n          }\n        };\n\n        field.getRegularText = function(v) {\n          if (v == null) {\n            return \"\";\n          }\n          v = v.toString();\n          return v;\n        };\n\n        field.parseText = function(v) {\n          let textVal = field.parseValue(v);\n          if (textVal && typeof (textVal) === \"object\") {\n            return textVal.value + textVal.unit;\n          } else if (textVal) {\n            return textVal\n          } else {\n            return null;\n          }\n        };\n\n        input.on(\"input\", function() {\n          let v = field.getRegularValue();\n          if (isNaN(v)) {\n            //flag field as invalid\n            input.addClass(\"invalid\");\n          } else {\n            input.removeClass(\"invalid\");\n          }\n          field.onChange();\n        });\n        if (unitInput) {\n          unitInput.on(\"change\", function() {\n            field.onChange();\n          });\n        }\n\n        field.input = input;\n        field.unitInput = unitInput;\n      },\n\n      _createBooleanField: function(field) {\n        let id = field.id;\n        let that = this;\n        let input = this._createElement(\"<select/>\").attr(\"id\", id)\n          .addClass(\"plate-setup-tab-select-field\");\n        that.defaultWell[id] = null;\n\n        field.root.find(\".plate-setup-tab-field-container\").append(input);\n        let tval = {\n          id: \"true\",\n          text: \"true\"\n        };\n        let fval = {\n          id: \"false\",\n          text: \"false\"\n        };\n        let opts = {\n          data: [tval, fval],\n          placeholder: \"select\",\n          allowClear: true,\n          minimumResultsForSearch: -1\n        };\n\n        input.select2(opts);\n        select2fix(input);\n\n        field.disabled = function(bool) {\n          field.input.prop(\"disabled\", bool);\n        };\n\n        field.parseValue = function(value) {\n          if (value == null) {\n            return null;\n          }\n          let v = String(value).trim().toLowerCase();\n          if (v === \"true\") {\n            v = true;\n          } else if (v === \"false\") {\n            v = false;\n          } else if (v === \"\") {\n            v = null;\n          } else {\n            throw \"Invalid value \" + value + \" for boolean field \" + id;\n          }\n          return v;\n        };\n\n        field.getValue = function() {\n          let v = input.val();\n          switch (v) {\n            case \"true\":\n              return true;\n            case \"false\":\n              return false;\n            default:\n              return null;\n          }\n        };\n\n        field.setValue = function(v) {\n          if (v === 1 || v === true || v === \"true\") {\n            v = \"true\";\n          } else if (v === 0 || v === false || v === \"false\") {\n            v = \"false\";\n          } else {\n            v = null;\n          }\n          input.val(v);\n          input.trigger(\"change.select2\");\n        };\n\n        field.getText = function(v) {\n          if (v == null) {\n            return \"\";\n          }\n          return v.toString();\n        };\n\n        field.parseText = field.parseValue;\n\n        input.on(\"change\", function() {\n          field.onChange();\n        });\n\n        field.input = input;\n      },\n\n      _createMultiplexField: function(field) {\n        let that = this;\n        // make correct multiplex data\n        this._createMultiSelectField(field);\n        // overwrite default well for multiplex field\n        that.defaultWell[field.id] = [];\n\n        // single select\n        let nameContainer1 = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-name-singleSelect\").text(\"Select to edit\");\n        let fieldContainer1 = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-container-singleSelect\");\n        field.root.find(\".plate-setup-tab-field-right-side\").append(nameContainer1, fieldContainer1);\n\n        field.singleSelect = this._createElement(\"<select/>\").attr(\"id\", field.id + \"SingleSelect\")\n          .addClass(\"plate-setup-tab-multiplex-single-select-field\");\n\n        field.singleSelect.appendTo(fieldContainer1);\n        let opts = {\n          allowClear: false,\n          placeholder: \"select\",\n          minimumResultsForSearch: 10,\n          data: []\n        };\n        field.singleSelect.select2(opts);\n        select2fix(field.singleSelect);\n\n        let multiselectSetValue = field.setValue;\n\n        field.singleSelectValue = function() {\n          let v = field.singleSelect.val();\n          if (v === \"\") {\n            return null;\n          }\n          if (v == null) {\n            return null;\n          }\n          return field._parseOne(v)\n        };\n\n        let setSingleSelectOptions = function(data, selected) {\n          data = data || [];\n\n          if (!selected) {\n            if (data.length) {\n              selected = data[0].id;\n            } else {\n              selected = null;\n            }\n          }\n          select2setData(field.singleSelect, data, selected);\n          field.singleSelect.prop(\"disabled\", data.length === 0);\n          field.singleSelect.trigger(\"change.select2\");\n        };\n\n        let singleSelectChange = function() {\n          let v = field.singleSelectValue();\n\n          field.updateSubFieldUnitOpts(v);\n\n          let curData = field.detailData || [];\n          let curSubField = null;\n          curData.forEach(function(val) {\n            if (val[field.id] === v) {\n              curSubField = val;\n            }\n          });\n\n          if (curSubField) {\n            // setvalue for subfield\n            field.subFieldList.forEach(function(subField) {\n              subField.disabled(false);\n              subField.setValue(curSubField[subField.id]);\n            });\n          } else {\n            field.subFieldList.forEach(function(subField) {\n              subField.disabled(true);\n              subField.setValue(null);\n            });\n          }\n          that.readOnlyHandler();\n        };\n\n        setSingleSelectOptions([]);\n        field.singleSelect.on(\"change.select2\", singleSelectChange);\n\n        field._changeMultiFieldValue = function(added, removed) {\n          let newSubFieldValue = {};\n          for (let subFieldName in field.data.multiplexFields) {\n            if (field.data.multiplexFields.hasOwnProperty(subFieldName)) {\n              let subFieldId = field.data.multiplexFields[subFieldName].id;\n              newSubFieldValue[subFieldId] = null;\n            }\n          }\n\n          let val;\n          if (added) {\n            if (added.value) {\n              val = added.value;\n            } else {\n              newSubFieldValue[field.id] = added.id;\n              val = newSubFieldValue;\n            }\n            added = {\n              id: added.id,\n              value: val\n            };\n          }\n\n          if (removed) {\n            if (removed.value) {\n              val = removed.value;\n            } else {\n              newSubFieldValue[field.id] = removed.id;\n              val = newSubFieldValue;\n            }\n            removed = {\n              id: removed.id,\n              value: val\n            };\n          }\n\n          let data = {};\n          data[field.id] = {\n            multi: true,\n            added: added,\n            removed: removed\n          };\n          that._addAllData(data);\n        };\n\n        // overwrite multiplex set value\n        field.setValue = function(v) {\n          // used to keep track of initially loaded multiplex data\n          field.detailData = v;\n          let multiselectValues = null;\n          if (v && v.length) {\n            multiselectValues = v.map(val => val[field.id]);\n          }\n\n          multiselectSetValue(multiselectValues);\n          let newOptions = field.input.select2('data') || [];\n          setSingleSelectOptions(newOptions);\n          singleSelectChange();\n        };\n\n        field.disabled = function(bool) {\n          field.input.prop(\"disabled\", bool);\n          field.subFieldList.forEach(function(subField) {\n            subField.disabled(bool);\n          });\n          if (bool) {\n            nameContainer1.text(\"Select to inspect\");\n          } else {\n            nameContainer1.text(\"Select to edit\");\n          }\n        };\n\n        field.parseValue = function(value) {\n          let v = value;\n          if (v && v.length) {\n            v = v.map(function(opt) {\n              let valMap = {};\n              valMap[field.id] = opt[field.id];\n              for (let subFieldId in opt) {\n                if (opt.hasOwnProperty(subFieldId)) {\n                  field.subFieldList.forEach(function(subField) {\n                    if (subField.id === subFieldId) {\n                      valMap[subField.id] = subField.parseValue(opt[subFieldId]);\n                    }\n                  });\n                }\n              }\n              return valMap;\n            });\n          } else {\n            v = null;\n          }\n          return v;\n        };\n\n        field.updateSubFieldUnitOpts = function(val) {\n          let curOpts;\n          field.data.options.forEach(function(opt) {\n            if (opt.id === val) {\n              curOpts = opt;\n            }\n          });\n          field.subFieldList.forEach(function(subField) {\n            if (subField.data.hasMultiplexUnit) {\n              if (curOpts && curOpts.hasOwnProperty(\"unitOptions\")) {\n                subField.setUnitOpts(curOpts.unitOptions[subField.id]);\n              } else {\n                subField.setUnitOpts(null);\n              }\n            }\n          })\n        };\n\n        field.multiOnChange = function(added, removed) {\n          field._changeMultiFieldValue(added, removed);\n          let v = field.getValue();\n          let curData = field.detailData;\n          let curIds = [];\n          let curOpt = null;\n          //reshape data for saveback\n          if (curData) {\n            curIds = curData.map(val => val[field.id]);\n          }\n\n          let newMultiplexVal = [];\n          let selectList = [];\n          if (v) {\n            v.forEach(function(selectedVal) {\n              if (curData) {\n                curData.forEach(function(val) {\n                  if (val[field.id] === selectedVal) {\n                    newMultiplexVal.push(val)\n                  }\n                });\n              }\n              // cases when adding new data\n              if (curIds.indexOf(selectedVal) < 0) {\n                let newVal = {};\n                newVal[field.id] = selectedVal;\n\n                field.updateSubFieldUnitOpts(selectedVal);\n                field.subFieldList.forEach(function(subfield) {\n                  // special handling for subfield which has multiplexUnit\n                  if (subfield.hasUnits) {\n                    if (subfield.data.hasMultiplexUnit) {\n                      subfield.disabled(false);\n                      field.data.options.forEach(function(opt) {\n                        if (opt.id === selectedVal) {\n                          let val = {\n                            value: null,\n                            unit: subfield.units[0]\n                          };\n                          newVal[subfield.id] = subfield.parseValue(val);\n                        }\n                      });\n                    } else {\n                      if (subfield.data.units) {\n                        if (subfield.data.units.length > 1) {\n                          subfield.disabled(false);\n                        }\n                      }\n                      let val = {\n                        value: null,\n                        unit: subfield.defaultUnit\n                      };\n                      newVal[subfield.id] = subfield.parseValue(val);\n                    }\n                  } else {\n                    newVal[subfield.id] = subfield.parseValue(null);\n                  }\n                });\n                newMultiplexVal.push(newVal);\n              }\n            });\n\n            // make data for single select options\n            v.forEach(function(selectVal) {\n              field.data.options.forEach(function(opt) {\n                if (opt.id === selectVal) {\n                  selectList.push(opt);\n                }\n              });\n            });\n\n            let selected = field.singleSelectValue();\n            for (let i = 0; i < v.length; i++) {\n              if (added && (added.id === v[i])) {\n                curOpt = v[i];\n                break;\n              } else if (i === 0) {\n                curOpt = v[i];\n              } else if (v[i] === selected) {\n                curOpt = v[i];\n              }\n            }\n          }\n\n          field.detailData = newMultiplexVal;\n          setSingleSelectOptions(selectList, curOpt);\n          singleSelectChange();\n        };\n\n        field.getText = function(v) {\n          if (v === null) {\n            return \"\";\n          }\n          // get subfields that is selected from the checkbox\n          if (field.id in that.globalSelectedMultiplexSubfield) {\n            let checkedSubfields = that.globalSelectedMultiplexSubfield[field.id];\n            let returnVal = [];\n            for (let valIdx in v) {\n              if (!v.hasOwnProperty(valIdx)) {\n                continue;\n              }\n              let subV = v[valIdx];\n              let subText = [];\n              for (let optId in field.data.options) {\n                if (field.data.options.hasOwnProperty(optId)) {\n                  let opt = field.data.options[optId];\n                  if (opt.id === subV[field.id]) {\n                    subText.push(opt.text);\n                  }\n                }\n              }\n              field.subFieldList.forEach(function(subField) {\n                if (checkedSubfields.indexOf(subField.id) >= 0) {\n                  let x = subField.getText(subV[subField.id]);\n                  subText.push(subField.name + \": \" + x);\n                }\n              });\n              returnVal.push(\"{\" + subText.join(\", \") + \"}\");\n            }\n            return returnVal.join(\";\");\n          }\n        };\n\n        field.parseText = function(v) {\n          if (v === null) {\n            return \"\";\n          } else {\n            let returnVal = [];\n            for (let valIdx in v) {\n              if (!v.hasOwnProperty(valIdx)) {\n                continue;\n              }\n              let subV = v[valIdx];\n              let subText = [];\n              for (let optId in field.data.options) {\n                if (field.data.options.hasOwnProperty(optId)) {\n                  let opt = field.data.options[optId];\n                  if (opt.id === subV[field.id]) {\n                    subText.push(opt.text);\n                  }\n                }\n              }\n              field.subFieldList.forEach(function(subField) {\n                let x = subField.getText(subV[subField.id]);\n                if (x) {\n                  subText.push(x);\n                }\n              });\n              returnVal.push(subText);\n            }\n            return returnVal;\n          }\n        };\n\n        field.checkMultiplexCompletion = function(valList) {\n          let valCount = 0;\n          let completionPct = 0;\n          let include = false;\n\n          function getSubfieldStatus(vals) {\n            let req = 0;\n            let fill = 0;\n            for (let subFieldId in field.subFieldList) {\n              if (!field.subFieldList.hasOwnProperty(subFieldId)) {\n                continue;\n              }\n              let subField = field.subFieldList[subFieldId];\n              let curVal = vals[subField.id];\n              if (subField.required) {\n                include = true;\n                req++;\n                if (typeof curVal === 'object' && curVal) {\n                  if (curVal.value) {\n                    fill++;\n                  }\n                } else if (curVal) {\n                  fill++;\n                }\n              }\n            }\n            return fill / req;\n          }\n\n          // for cases has value in multiplex field\n          if (valList) {\n            if (valList.length > 0) {\n              for (let idx in valList) {\n                if (valList.hasOwnProperty(idx)) {\n                  valCount++;\n                  let vals = valList[idx];\n                  completionPct += getSubfieldStatus(vals);\n                }\n              }\n            } else if (field.required) {\n              include = true;\n              valCount = 1;\n            }\n          } else if (field.required) {\n            include = true;\n            valCount = 1;\n          }\n\n          return {\n            include: include,\n            completionPct: completionPct / valCount\n          };\n        };\n\n        // valList contains all of the vals for selected val\n        field.applyMultiplexSubFieldColor = function(valList) {\n          function updateSubFieldWarningMap(vals) {\n            for (let subFieldId in field.subFieldList) {\n              if (!field.subFieldList.hasOwnProperty(subFieldId)) {\n                continue;\n              }\n              let subField = field.subFieldList[subFieldId];\n              // loop through each well's multiplexval list\n              if (vals === null) {\n                if (field.required && subField.required) {\n                  subFieldWarningMap[subField.id].warningStatus.push(true);\n                }\n              } else if (typeof (vals) === \"object\") {\n                if (vals.length === 0) {\n                  if (field.required && subField.required) {\n                    subFieldWarningMap[subField.id].warningStatus.push(true);\n                  }\n                } else {\n                  for (let multiplexIdx in vals) {\n                    if (!vals.hasOwnProperty(multiplexIdx)) {\n                      continue;\n                    }\n                    let curVal = vals[multiplexIdx][subField.id];\n                    if (subField.required) {\n                      if (typeof (curVal) === 'object' && curVal) {\n                        if (!curVal.value) {\n                          subFieldWarningMap[subField.id].warningStatus.push(true);\n                        } else {\n                          subFieldWarningMap[subField.id].warningStatus.push(false);\n                        }\n                      } else if (!curVal) {\n                        subFieldWarningMap[subField.id].warningStatus.push(true);\n                      } else {\n                        subFieldWarningMap[subField.id].warningStatus.push(false);\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n\n          let subFieldWarningMap = {};\n          field.subFieldList.forEach(function(subField) {\n            if (subField.required) {\n              subFieldWarningMap[subField.id] = {\n                field: subField,\n                warningStatus: []\n              };\n            }\n          });\n\n          valList.forEach(function(multiplexVals) {\n            updateSubFieldWarningMap(multiplexVals);\n          });\n          // turn off main field when all subfield are filled\n\n          let mainFieldStatus = [];\n          for (let subFieldId in subFieldWarningMap) {\n            if (!subFieldWarningMap.hasOwnProperty(subFieldId)) {\n              continue;\n            }\n            let subField = subFieldWarningMap[subFieldId].field;\n            if (subFieldWarningMap[subFieldId].warningStatus.indexOf(true) >= 0) {\n              let text = subField.name + \" is a required subfield for \" + field.name + \", please make sure all \" + field.name + \" have \" + subField.name;\n              if (field.required) {\n                that.fieldWarningMsg(subField, text, true);\n                mainFieldStatus.push(true);\n              } else {\n                that.fieldWarningMsg(subField, text, true);\n                mainFieldStatus.push(true);\n              }\n            } else {\n              that.fieldWarningMsg(subField, \"none\", false);\n              mainFieldStatus.push(false);\n            }\n          }\n          let mainFieldWarning = mainFieldStatus.indexOf(true) >= 0;\n          let warningText;\n          if (field.required) {\n            warningText = field.name + \" is a required field, please also fix missing required subfield(s) below\";\n          } else {\n            warningText = field.name + \" is not a required field, please fix missing required subfield(s) below or remove selected \" + field.name;\n          }\n          that.fieldWarningMsg(field, warningText, mainFieldWarning);\n        };\n\n        field.parseMainFieldVal = function(val) {\n          let optMap = field.data.options;\n          for (let idx = 0; idx < optMap.length; idx++) {\n            let curOpt = optMap[idx];\n            if (curOpt.id === val) {\n              return curOpt.text\n            }\n          }\n        };\n      },\n\n      _deleteDialog: function(field) {\n        let that = this;\n\n        let valMap = field.allSelectedMultipleVal;\n        let valToRemove;\n        if (valMap) {\n          valToRemove = Object.keys(valMap);\n        } else {\n          valToRemove = [];\n        }\n\n\n        let dialogDiv = $(\"<div/>\").addClass(\"plate-modal\");\n        this.container.append(dialogDiv);\n\n        function killDialog() {\n          dialogDiv.hide();\n          dialogDiv.remove();\n        }\n\n        let dialogContent = $(\"<div/>\").addClass(\"plate-modal-content\").css('width', '550px').appendTo(dialogDiv);\n        let tableArea = $(\"<div/>\").appendTo(dialogContent);\n        let buttonRow = $(\"<div/>\").addClass(\"dialog-buttons\").css(\"justify-content\", \"flex-end\").appendTo(dialogContent);\n\n        if (valToRemove.length > 0) {\n          // apply CSS property for table\n          $(\"<p/>\").text(field.name + \" in selected wells: choose items to delete and click the delete button below\").appendTo(tableArea);\n\n          let table = that._deleteDialogTable(field, valMap);\n          table.appendTo(tableArea);\n          table.addClass(\"plate-popout-table\");\n          table.find('td').addClass(\"plate-popout-td\");\n          table.find('th').addClass(\"plate-popout-th\");\n          table.find('tr').addClass(\"plate-popout-tr\");\n          if (!that.readOnly) {\n            let deleteCheckedButton = $(\"<button class='multiple-field-manage-delete-button'>Delete Checked Items</button>\");\n            buttonRow.append(deleteCheckedButton);\n            deleteCheckedButton.click(function() {\n              table.find(\"input:checked\").each(function() {\n                let val = this.value;\n                field.multiOnChange(null, {id: val});\n              });\n              // refresh selected fields after updating the multiplex field value\n              that.decideSelectedFields();\n              killDialog();\n            });\n          }\n\n        } else {\n          $(\"<p/>\").text(\"No \" + field.name + \" in the selected wells\").appendTo(tableArea);\n        }\n\n        let cancelButton = $(\"<button>Cancel</button>\");\n        buttonRow.append(cancelButton);\n        cancelButton.click(killDialog);\n\n        dialogDiv.show();\n\n        window.onclick = function(event) {\n          if (event.target === dialogDiv[0]) {\n            killDialog();\n          }\n        }\n      },\n\n      _deleteDialogTable: function(field, valMap) {\n        let that = this;\n        let colName = [field.name, \"Counts\"]; //Added because it was missing... no idea what the original should have been\n        if (!that.readOnly) {\n          colName.push(\"Delete\");\n        }\n        let table = $('<table/>');\n        let thead = $('<thead/>').appendTo(table);\n        let tr = $('<tr/>').appendTo(thead);\n\n        tr.append(colName.map(function(text) {\n          return $('<th/>').text(text);\n        }));\n\n        let tbody = $(\"<tbody/>\").appendTo(table);\n\n        field.data.options.forEach(function(opt) {\n          if (opt.id in valMap) {\n            let tr = $('<tr/>').appendTo(tbody);\n            let checkbox = $(\"<input type='checkbox'>\").prop(\"value\", opt.id);\n            $(\"<td/>\").text(opt.text).appendTo(tr);\n            $(\"<td/>\").text(valMap[opt.id]).appendTo(tr);\n            if (!that.readOnly) {\n              $(\"<td/>\").append(checkbox).appendTo(tr);\n            }\n          }\n        });\n\n        return table;\n      },\n\n      _createDeleteButton: function(field) {\n        let that = this;\n        let deleteButton = $(\"<button/>\").addClass(\"plate-setup-remove-all-button\");\n        deleteButton.id = field.id + \"Delete\";\n        deleteButton.text(\"Manage \" + field.name + \"...\");\n        let buttonContainer = that._createElement(\"<div></div>\").addClass(\"plate-setup-remove-all-button-container\");\n        buttonContainer.append(deleteButton);\n\n        field.deleteButton = deleteButton;\n        field.root.find(\".plate-setup-tab-field-right-side\").append(buttonContainer);\n\n        deleteButton.click(function() {\n          that._deleteDialog(field);\n        });\n      }\n\n    };\n  }\n})(jQuery);","var plateMapWidget = plateMapWidget || {};\n\n(function($) {\n\n  plateMapWidget.engine = function(THIS) {\n    // Methods which look after data changes and stack up accordingly\n    // Remember THIS points to plateMapWidget and 'this' points to engine\n    // Use THIS to refer parent this.\n    return {\n      engine: {\n\n        derivative: {},\n        colorMap: new Map(),\n        stackUpWithColor: {},\n        stackPointer: 2,\n\n        wellEmpty: function(well) {\n          for (let prop in well) {\n            if (!well.hasOwnProperty(prop)) {\n              continue;\n            }\n            let curVal = well[prop];\n            if (curVal !== null && curVal !== undefined) {\n              if (Array.isArray(curVal)) {\n                if (curVal.length > 0) {\n                  return false;\n                }\n              } else {\n                return false;\n              }\n            }\n          }\n          return true;\n        },\n\n        searchAndStack: function() {\n          // This method search and stack the change we made.\n          this.stackUpWithColor = {};\n          this.stackPointer = 1;\n          let derivativeJson = {};\n          for (let idx in this.derivative) {\n            if (!this.derivative.hasOwnProperty(idx)) {\n              continue;\n            }\n            let data = this.derivative[idx];\n            let wellData = {};\n            for (let i = 0; i < THIS.globalSelectedAttributes.length; i++) {\n              let attr = THIS.globalSelectedAttributes[i];\n\n              if (attr in THIS.globalSelectedMultiplexSubfield) {\n                let selectedSubFields = THIS.globalSelectedMultiplexSubfield[attr];\n                let newMultiplexVal = [];\n                for (let multiplexIdx in data[attr]) {\n                  if (!data[attr].hasOwnProperty(multiplexIdx)) {\n                    continue;\n                  }\n                  let curMultiplexVals = data[attr][multiplexIdx];\n                  let newVal = {};\n                  newVal[attr] = curMultiplexVals[attr];\n                  selectedSubFields.forEach(function(subFieldId) {\n                    newVal[subFieldId] = curMultiplexVals[subFieldId];\n                  });\n                  newMultiplexVal.push(newVal);\n                }\n                wellData[attr] = newMultiplexVal;\n              } else {\n                if (data[attr] != null) {\n                  wellData[attr] = data[attr];\n                }\n              }\n            }\n            if ($.isEmptyObject(wellData)) {\n              derivativeJson[idx] = null;\n            } else {\n              derivativeJson[idx] = JSON.stringify(wellData);\n            }\n          }\n\n          while (!$.isEmptyObject(derivativeJson)) {\n            let keys = Object.keys(derivativeJson).map(parseFloat);\n            keys.sort(function(a, b) {\n              return a - b;\n            });\n\n            let refDerivativeIndex = keys[0];\n            let referenceDerivative = derivativeJson[refDerivativeIndex];\n            let arr = [];\n\n            if (!referenceDerivative) {\n              // if no checked box has value, push it to first spot\n              if (this.stackUpWithColor[0]) {\n                this.stackUpWithColor[0].push(refDerivativeIndex);\n              } else {\n                this.stackUpWithColor[0] = [refDerivativeIndex];\n              }\n\n              delete derivativeJson[refDerivativeIndex];\n            } else {\n              // if checked boxes have values\n              for (let i = 0; i < keys.length; i++) {\n                let idx = keys[i];\n                if (referenceDerivative === derivativeJson[idx]) {\n                  arr.push(idx);\n                  this.stackUpWithColor[this.stackPointer] = arr;\n                  delete derivativeJson[idx];\n                }\n              }\n              if (arr.length > 0)\n                this.stackPointer++;\n            }\n          }\n        },\n\n        applyColors: function() {\n\n          let wholeNoTiles = 0;\n          let wholePercentage = 0;\n\n          THIS.addBottomTableHeadings();\n\n          for (let i = 0; i < THIS.allTiles.length; i++) {\n            let tile = THIS.allTiles[i];\n            THIS.setTileVisible(tile, false);\n          }\n\n          for (let color = 0; color < this.stackPointer; color++) {\n            let arr = this.stackUpWithColor[color];\n            if (arr) {\n              THIS.addBottomTableRow(color, arr);\n\n              for (let i = 0; i < arr.length; i++) {\n                wholeNoTiles++;\n                let index = this.stackUpWithColor[color][i];\n                let tile = THIS.allTiles[index];\n                let well = this.derivative[index];\n                this.colorMap.set(index, color);\n                THIS.setTileColor(tile, color);\n                // Checks if all the required fields are filled\n                let completion = this.checkCompletion(well, tile);\n                THIS.setTileComplete(tile, completion === 1);\n                wholePercentage = wholePercentage + completion;\n              }\n            }\n          }\n\n          wholePercentage = Math.floor(100 * wholePercentage / wholeNoTiles);\n\n          if (isNaN(wholePercentage)) {\n            THIS.overLayTextContainer.text(\"Completion Percentage: 0%\");\n          } else {\n            THIS.overLayTextContainer.text(\"Completion Percentage: \" + wholePercentage + \"%\");\n          }\n          THIS.selectObjectInBottomTab();\n        },\n\n        checkCompletion: function(wellData) {\n          let req = 0;\n          let fill = 0;\n          for (let i = 0; i < THIS.fieldList.length; i++) {\n            let field = THIS.fieldList[i];\n            if (field.checkMultiplexCompletion) {\n              // also apply color\n              let multiplexStatus = field.checkMultiplexCompletion(wellData[field.id]);\n              if (multiplexStatus.include) {\n                fill += multiplexStatus.completionPct;\n                req++;\n              }\n            } else {\n              if (field.required) {\n                req++;\n                if (wellData[field.id] !== null) {\n                  fill++;\n                }\n              }\n            }\n          }\n          if (req === fill) {\n            return 1;\n          }\n          return fill / req;\n        },\n      }\n    }\n  }\n})(jQuery);","var plateMapWidget = plateMapWidget || {};\n\nplateMapWidget.assets = function() {\n  return {\n    _assets: {\n      doImg: '&#10003;',\n      dontImg: '',\n      warningImg: '&#9888;'\n    }\n  };\n};\n","var plateMapWidget = plateMapWidget || {};\n\n(function($) {\n\n  plateMapWidget.interface = function() {\n    // interface holds all the methods to put the interface in place\n    return {\n\n      _createInterface: function() {\n\n        let divIdentifier = '<div></div>';\n        this.container = this._createElement(divIdentifier).addClass(\"plate-setup-wrapper\");\n        this.topSection = this._createElement(divIdentifier).addClass(\"plate-setup-top-section\");\n\n        this.topLeft = this._createElement(divIdentifier).addClass(\"plate-setup-top-left\");\n        this.topRight = this._createElement(divIdentifier).addClass(\"plate-setup-top-right\");\n\n        this.overLayContainer = this._createElement(divIdentifier).addClass(\"plate-setup-overlay-container\");\n        this.canvasContainer = this._createElement(divIdentifier).addClass(\"plate-setup-canvas-container\");\n\n        this._createOverLay();\n        $(this.topLeft).append(this.overLayContainer);\n        $(this.topLeft).append(this.canvasContainer);\n\n        $(this.topSection).append(this.topLeft);\n        $(this.topSection).append(this.topRight);\n\n        $(this.container).append(this.topSection);\n        $(this.element).append(this.container);\n\n        this._createSvg();\n\n        this._createTabAtRight();\n        this._createTabs();\n\n        this._placePresetTabs();\n        // Bottom of the screen\n        this._bottomScreen();\n\n        this.bottomForFirstTime();\n\n        let that = this;\n        this._setShortcuts();\n        $(document.body).keyup(function(e) {\n          that._handleShortcuts(e);\n        });\n\n        this._configureUndoRedoArray();\n      },\n\n      _createElement: function(element) {\n        return $(element);\n      },\n\n      _setShortcuts: function() {\n        let that = this;\n        window.addEventListener(\"cut\", function(e) {\n          if (document.activeElement === document.body) {\n            that.copyCriteria();\n            that.clearCriteria();\n            e.preventDefault();\n          }\n        });\n        window.addEventListener(\"copy\", function(e) {\n          if (document.activeElement === document.body) {\n            that.copyCriteria();\n            e.preventDefault();\n          }\n        });\n        window.addEventListener(\"paste\", function(e) {\n          if (document.activeElement === document.body) {\n            that.pasteCriteria();\n            e.preventDefault();\n          }\n        });\n      },\n\n      _handleShortcuts: function(e) {\n        if (document.activeElement === document.body) {\n          if (e.keyCode === 46) {\n            this.clearCriteria();\n            e.preventDefault();\n          } else if (e.ctrlKey || e.metaKey) {\n            if (e.keyCode === 90) {\n              if (e.shiftKey) {\n                this.redo();\n              } else {\n                this.undo();\n              }\n              e.preventDefault();\n            } else if (e.keyCode === 89) {\n              this.redo();\n              e.preventDefault();\n            }\n          }\n        }\n      },\n    };\n  }\n})(jQuery);","var plateMapWidget = plateMapWidget || {};\n\nplateMapWidget.loadPlate = function() {\n  // Methods which look after data changes and stack up accordingly\n  // Remember THIS points to plateMapWidget and 'this' points to engine\n  return {\n\n    loadPlate: function(data) {\n      //sanitize input\n      let derivative = {};\n      for (let address in data.wells) {\n        let well = data.wells[address];\n        let index = this.addressToIndex(address);\n        derivative[index] = this.sanitizeWell(well);\n      }\n      let checkboxes = data.checkboxes || [];\n      let indices = this.sanitizeAddresses(data.selectedAddresses);\n      if (indices.length === 0) {\n        indices = [0];\n      }\n\n      let sanitized = {\n        \"derivative\": derivative,\n        \"checkboxes\": checkboxes,\n        \"selectedIndices\": indices,\n      };\n\n      this.setData(sanitized);\n    },\n\n    sanitizeAddresses: function(selectedAddresses) {\n      selectedAddresses = selectedAddresses || [];\n      let indices = selectedAddresses.map(this.addressToIndex, this);\n      indices.sort();\n      indices = indices.filter((index, i) => indices.indexOf(index) === i);\n      return indices;\n    },\n\n    sanitizeWell: function(well) {\n      let newWell = {};\n      this.fieldList.forEach(function (field) {\n        newWell[field.id] = field.parseValue(well[field.id]);\n      });\n      return newWell;\n    },\n\n    setData: function(data, quiet) {\n      this.engine.derivative = data.derivative;\n      this.setCheckboxes(data.checkboxes, true);\n      this.setSelectedIndices(data.selectedIndices, true);\n      this.derivativeChange();\n      if (!quiet) {\n        this.addToUndoRedo();\n      }\n    },\n\n  }\n};\n","var plateMapWidget = plateMapWidget || {};\n\n(function($) {\n\n  plateMapWidget.overlay = function() {\n    // overlay holds all the methods to put the part just above the canvas which contains all those\n    // 'completion percentage' annd 'copy Criteria' button etc ...\n    return {\n\n      _createOverLay: function() {\n\n        let that = this;\n        this.overLayTextContainer = this._createElement(\"<div></div>\").addClass(\"plate-setup-overlay-text-container\");\n        this.overLayTextContainer.text(\"Completion Percentage:\");\n        this.overLayContainer.append(this.overLayTextContainer);\n        this.overLayButtonContainer = this._createElement(\"<div></div>\").addClass(\"plate-setup-overlay-button-container\");\n        this.overLayContainer.append(this.overLayButtonContainer);\n\n        this.clearCriteriaButton = this._createElement(\"<button />\").addClass(\"plate-setup-button\");\n        this.clearCriteriaButton.text(\"Clear\");\n        this.overLayButtonContainer.append(this.clearCriteriaButton);\n\n        this.clearCriteriaButton.click(function() {\n          that.clearCriteria();\n        });\n\n        this.copyCriteriaButton = this._createElement(\"<button />\").addClass(\"plate-setup-button\");\n        this.copyCriteriaButton.text(\"Copy\");\n        this.overLayButtonContainer.append(this.copyCriteriaButton);\n\n        this.copyCriteriaButton.click(function() {\n          that.copyCriteria();\n        });\n\n        this.pasteCriteriaButton = this._createElement(\"<button />\").addClass(\"plate-setup-button\");\n        this.pasteCriteriaButton.text(\"Paste\");\n        this.overLayButtonContainer.append(this.pasteCriteriaButton);\n\n        this.pasteCriteriaButton.click(function() {\n          that.pasteCriteria();\n        });\n\n        this.undoButton = this._createElement(\"<button />\").addClass(\"plate-setup-button\");\n        this.undoButton.text(\"Undo\");\n        this.overLayButtonContainer.append(this.undoButton);\n\n        this.undoButton.click(function() {\n          that.undo();\n        });\n\n        this.redoButton = this._createElement(\"<button />\").addClass(\"plate-setup-button\");\n        this.redoButton.text(\"Redo\");\n        this.overLayButtonContainer.append(this.redoButton);\n\n        this.redoButton.click(function() {\n          that.redo();\n        });\n\n      },\n\n      clearCriteria: function() {\n        if (this.selectedIndices && this.selectedIndices.length) {\n          let hasWellUpdate = false;\n          let selectedIndices = this.selectedIndices;\n          let well;\n          for (let i = 0; i < selectedIndices.length; i++) {\n            let index = selectedIndices[i];\n            if (index in this.engine.derivative) {\n              // handling for clearing well when not allowed to add or delete wells\n              if (this.disableAddDeleteWell) {\n                if (this.engine.derivative.hasOwnProperty(index)) {\n                  well = $.extend(true, {}, this.emptyWellWithDefaultVal);\n                  this.engine.derivative[index] = well;\n                }\n              } else {\n                delete this.engine.derivative[index];\n              }\n              hasWellUpdate = true;\n            }\n          }\n\n          if (hasWellUpdate) {\n            this._colorMixer();\n            this.decideSelectedFields();\n            this.derivativeChange();\n            this.addToUndoRedo();\n          }\n        } else {\n          alert(\"Please select any well\");\n        }\n      },\n\n      copyCriteria: function() {\n        if (this.selectedIndices && this.selectedIndices.length) {\n          let wells = this._getSelectedWells();\n          this.commonData = this._getCommonData(wells);\n        } else {\n          alert(\"Please select any well.\");\n        }\n      },\n\n      pasteCriteria: function() {\n        if (this.commonData) {\n          this._addAllData(this.commonData);\n          this.decideSelectedFields();\n        }\n      }\n    };\n  }\n})(jQuery);","$.widget(\"DNA.plateMap\", {\n\n  plateMapWidget: {},\n\n  options: {\n    value: 0\n  },\n\n  addressToLoc: function(address) {\n    let m = /^([A-Z]+)(\\d+)$/.exec(address.trim().toUpperCase());\n    if (m) {\n      let row_v = m[1];\n      let col = parseInt(m[2]) - 1;\n      let row = 0;\n      for (let i = 0; i < row_v.length; i++) {\n        let c = row_v.charCodeAt(i) - 65;\n        if (i) {\n          row += 1;\n          row *= 26;\n          row += c;\n        } else {\n          row = c;\n        }\n      }\n      return {\n        r: row,\n        c: col\n      };\n    } else {\n      throw address + \" not a proper plate address\";\n    }\n  },\n\n  locToIndex: function(loc, dimensions) {\n    if (!dimensions) {\n      dimensions = this.dimensions;\n    }\n    if (!(loc.r >= 0 && loc.r < dimensions.rows)) {\n      throw \"Row index \" + (loc.r + 1) + \" invalid\";\n    }\n    if (!(loc.c >= 0 && loc.c < dimensions.cols)) {\n      throw \"Column index \" + (loc.c + 1) + \" invalid\";\n    }\n    return loc.r * dimensions.cols + loc.c;\n  },\n\n  addressToIndex: function(address, dimensions) {\n    let loc = this.addressToLoc(address);\n    return this.locToIndex(loc, dimensions);\n  },\n\n  _rowKey: function(i) {\n    let c1 = i % 26;\n    let c2 = (i - c1) / 26;\n    let code = String.fromCharCode(65 + c1);\n    if (c2 > 0) {\n      code = String.fromCharCode(64 + c2) + code;\n    }\n    return code;\n  },\n\n  _colKey: function (i) {\n    return (i+1).toString(10);\n  },\n\n  indexToLoc: function(index, dimensions) {\n    if (!dimensions) {\n      dimensions = this.dimensions;\n    }\n\n    if (index >= dimensions.rows * dimensions.cols) {\n      throw \"Index too high: \" + index.toString(10);\n    }\n    let loc = {};\n    loc.c = index % dimensions.cols;\n    loc.r = (index - loc.c) / dimensions.cols;\n\n    return loc;\n  },\n\n  locToAddress: function(loc) {\n    return this._rowKey(loc.r) + this._colKey(loc.c);\n  },\n\n  indexToAddress: function(index, dimensions) {\n    let loc = this.indexToLoc(index, dimensions);\n    return this.locToAddress(loc);\n  },\n\n  getDimensions: function() {\n    return $.extend(true, {}, this.dimensions);\n  },\n\n  _create: function() {\n    let rows = parseInt(this.options.numRows || 8);\n    let cols = parseInt(this.options.numCols || 12);\n    this.dimensions = {\n      rows: rows,\n      cols: cols\n    };\n    this.rowIndex = [];\n    for (let i = 0; i < rows; i++) {\n      this.rowIndex.push(this._rowKey(i));\n    }\n\n    this.target = (this.element[0].id) ? \"#\" + this.element[0].id : \".\" + this.element[0].className;\n\n    // Import classes from other files.. Here we import it using extend and add it to this\n    // object. internally we add to widget.DNA.getPlates.prototype.\n    // Helpers are methods which return other methods and objects.\n    // add Objects to plateMapWidget and it will be added to this object.\n    // set read only well\n    if (this.options.readOnly) {\n      this.isReadOnly(true);\n    }\n\n    for (let component in plateMapWidget) {\n      if (plateMapWidget.hasOwnProperty(component)) {\n        // Incase some properties has to initialize with data from options hash,\n        // we provide it sending this object.\n        $.extend(this, new plateMapWidget[component](this));\n      }\n    }\n\n    this._createInterface();\n\n    this._trigger(\"created\", null, this);\n\n    return this;\n  },\n\n  _init: function() {\n    // This is invoked when the user use the plugin after _create is called.\n    // The point is _create is invoked for the very first time and for all other\n    // times _init is used.\n  },\n\n  // wellsData follows syntax: {A1:{field1: val1, field2: val2}, A2:{field1: val1, field2: val2}}\n  getTextDerivative: function(wellsData) {\n    let textDerivative = {};\n    let fieldMap = this.fieldMap;\n    for (let address in wellsData) {\n      if (!wellsData.hasOwnProperty(address)) {\n        continue;\n      }\n      let textValWell = {};\n      let textFieldIdWell = {};\n      let curWellData = wellsData[address];\n      for (let fieldId in curWellData) {\n        if (!curWellData.hasOwnProperty(fieldId)) {\n          continue;\n        }\n        if (fieldId in fieldMap) {\n          let field = fieldMap[fieldId];\n          let textVal = field.parseText(curWellData[fieldId]);\n          textFieldIdWell[field.name] = textVal;\n          textValWell[fieldId] = textVal;\n        } else {\n          // do not convert if not a field\n          textFieldIdWell[fieldId] = curWellData[fieldId];\n          textValWell[fieldId] = curWellData[fieldId];\n        }\n      }\n      textDerivative[address] = {\n        textVal: textValWell,\n        textFieldVal: textFieldIdWell\n      };\n    }\n\n    return textDerivative;\n  },\n\n  // wellsData follows syntax: {A1:{field1: val1, field2: val2}, A1:{field1: val1, field2: val2}}\n  getWellsDifferences: function(wellsHash) {\n    let wells = [];\n    for (let wellId in wellsHash) {\n      if (wellsHash.hasOwnProperty(wellId)) {\n        wells.push(wellsHash[wellId]);\n      }\n    }\n    let differentWellsVals = {};\n    if (wells.length > 1) {\n      let commonWell = this._getCommonWell(wells);\n      let allFieldVal = {};\n      for (let fieldIdx in wells[0]) {\n        if (wells[0].hasOwnProperty(fieldIdx)) {\n          allFieldVal[fieldIdx] = [];\n        }\n      }\n      for (let address in wellsHash) {\n        if (!wellsHash.hasOwnProperty(address)) {\n          continue;\n        }\n        let diffWellVal = {};\n        let curWellData = wellsHash[address];\n        for (let fieldId in curWellData) {\n          if (!curWellData.hasOwnProperty(fieldId)) {\n            continue;\n          }\n          let commonVal = commonWell[fieldId];\n          let curVal = curWellData[fieldId];\n          if (commonVal === undefined) {\n            commonVal = null;\n          }\n          if (curVal === undefined) {\n            curVal = null;\n          }\n          let newVal = null;\n          if (Array.isArray(curVal)) {\n            commonVal = commonVal || [];\n            // get uncommonVal\n            newVal = [];\n            for (let idx = 0; idx < curVal.length; idx++) {\n              let curMultiVal = curVal[idx];\n              // multiplex field\n              if (curMultiVal && typeof (curMultiVal) === \"object\") {\n                if (!this.containsObject(curMultiVal, commonVal)) {\n                  newVal.push(curMultiVal);\n                  if (!this.containsObject(curMultiVal, allFieldVal[fieldId])) {\n                    allFieldVal[fieldId].push(curMultiVal);\n                  }\n                }\n              } else {\n                if (commonVal.indexOf(curMultiVal) < 0) {\n                  newVal.push(curMultiVal);\n                  if (!allFieldVal[fieldId].indexOf(curMultiVal) >= 0) {\n                    allFieldVal[fieldId].push(curMultiVal);\n                  }\n                }\n              }\n            }\n          } else if (curVal && typeof (curVal) === \"object\") {\n            if (commonVal && typeof (commonVal) === \"object\") {\n              if (!((curVal.value === commonVal.value) || (curVal.unit === commonVal.unit))) {\n                newVal = curVal;\n                if (!this.containsObject(curVal, allFieldVal[fieldId])) {\n                  allFieldVal[fieldId].push(curVal);\n                }\n              }\n            } else {\n              newVal = curVal;\n              if (!this.containsObject(curVal, allFieldVal[fieldId])) {\n                allFieldVal[fieldId].push(curVal);\n              }\n            }\n          } else if (curVal !== commonVal) {\n            newVal = curVal;\n            if (!allFieldVal[fieldId].indexOf(curVal) >= 0) {\n              allFieldVal[fieldId].push(curVal);\n            }\n          }\n          diffWellVal[fieldId] = newVal;\n        }\n\n        differentWellsVals[address] = diffWellVal;\n      }\n\n      // clean up step for fields that are empty\n      for (let fieldId in allFieldVal) {\n        if (!allFieldVal.hasOwnProperty(fieldId)) {\n          continue;\n        }\n        if (allFieldVal[fieldId].length === 0) {\n          for (let address in differentWellsVals) {\n            if (!differentWellsVals.hasOwnProperty(address)) {\n              continue;\n            }\n            delete differentWellsVals[address][fieldId];\n          }\n        }\n      }\n\n      return differentWellsVals;\n    } else if (wells.length > 0) {\n      let differentWellsVals = {};\n      for (let address in wellsHash) {\n        if (!wellsHash.hasOwnProperty(address)) {\n          continue;\n        }\n        let diffWellVal = {};\n        let curWellData = wellsHash[address];\n        for (let fieldId in curWellData) {\n          if (!curWellData.hasOwnProperty(fieldId)) {\n            continue;\n          }\n          let curVal = curWellData[fieldId];\n          if (Array.isArray(curVal)) {\n            if (curVal.length > 0) {\n              diffWellVal[fieldId] = curVal\n            }\n          } else if (curVal) {\n            diffWellVal[fieldId] = curVal;\n          }\n        }\n        differentWellsVals[address] = diffWellVal;\n      }\n\n      return differentWellsVals;\n    }\n  },\n\n  setFieldsDisabled: function(flag) {\n    this.fieldList.forEach(function(field) {\n      field.disabled(flag);\n    });\n  },\n\n  isReadOnly: function(flag) {\n    this.readOnly = !!flag;\n    this.readOnlyHandler();\n  },\n\n  readOnlyHandler: function() {\n    if (this.readOnly) {\n      this.overLayButtonContainer.css(\"display\", \"none\");\n      $('.multiple-field-manage-delete-button').css(\"display\", \"none\");\n      this.setFieldsDisabled(true);\n    } else {\n      this.overLayButtonContainer.css(\"display\", \"flex\");\n      $('.multiple-field-manage-delete-button').css(\"display\", \"none\");\n      if (!this.disableAddDeleteWell) {\n        this.setFieldsDisabled(false);\n      }\n    }\n  },\n\n  disableAddDeleteWell: null,\n\n  // column_with_default_val will be used to determine empty wells, format: {field_name: default_val}\n  isDisableAddDeleteWell: function(flag, emptyDefaultWell) {\n    if (flag) {\n      let emptyWellWithDefaultVal = $.extend(true, {}, this.defaultWell);\n      if (emptyDefaultWell) {\n        for (let field in emptyDefaultWell) {\n          if (emptyDefaultWell.hasOwnProperty(field)) {\n            if (field in emptyWellWithDefaultVal) {\n              emptyWellWithDefaultVal[field] = emptyDefaultWell[field]\n            } else {\n              console.log(\"No field for key: \" + key + \", please contact support\");\n            }\n          }\n        }\n      }\n      this.disableAddDeleteWell = true;\n      this.addressAllowToEdit = this.getWellSetAddressWithData();\n      // configure undo redo action\n      this.actionPointer = 0;\n      this.undoRedoArray = [this.createState()];\n      this.emptyWellWithDefaultVal = emptyWellWithDefaultVal;\n    } else {\n      this.disableAddDeleteWell = false;\n      this.setFieldsDisabled(false);\n      this.emptyWellWithDefaultVal = null;\n    }\n  },\n\n  selectObjectInBottomTab: function() {\n    let colors = [];\n    let selectedIndices = this.selectedIndices;\n    for (let i = 0; i < selectedIndices.length; i++) {\n      let index = selectedIndices[i];\n      let well = this.engine.derivative[index];\n      if (well) {\n        let color = this.engine.colorMap.get(index);\n        if (colors.indexOf(color) < 0) {\n          colors.push(color);\n        }\n      }\n    }\n    let trs = document.querySelectorAll('table.plate-setup-bottom-table tr');\n    for (let i = 1; i < trs.length; i++) { // start at 1 to skip the table headers\n      let tr = trs[i];\n      let td = tr.children[0];\n      let isSelected = colors.indexOf(Number(td.querySelector('button').innerHTML)) >= 0;\n      tr.classList.toggle(\"selected\", isSelected);\n    }\n  },\n\n  getSelectedIndex: function() {\n    return this.selectedIndices;\n  },\n\n  getSelectedAddresses: function() {\n    return this.selectedIndices.map(function(index) {\n      return this.allTiles[index].address;\n    }, this);\n  },\n\n  setSelectedAddresses: function(addresses, noUndoRedo) {\n    let indices = this.sanitizeAddresses(addresses);\n    this.setSelectedIndices(indices, noUndoRedo);\n  },\n\n  setSelectedIndices: function (indices, noUndoRedo) {\n    if (!indices || indices.length === 0) {\n      indices = [0];\n    }\n    // Indices should be sanitized\n    this.setSelection(indices);\n    //this._colorMixer();\n    this.decideSelectedFields();\n    this._trigger(\"selectedWells\", null, {selectedAddress: this.getSelectedAddresses()});\n    this.selectObjectInBottomTab();\n    if (!noUndoRedo) {\n      this.addToUndoRedo();\n    }\n  }\n\n});\n","var plateMapWidget = plateMapWidget || {};\n\n(function($) {\n\n  plateMapWidget.preset = function() {\n    // All the preset action goes here\n    return {\n\n      presets: [],\n\n      _placePresetTabs: function() {\n        let presets = this.options.attributes.presets;\n\n        if (presets && presets.length) {\n          this.wellAttrContainer = this._createElement(\"<div></div>\").addClass(\"plate-setup-well-attr-container\")\n            .text(\"Checkbox presets\");\n          this.tabContainer.append(this.wellAttrContainer);\n\n          this.presetTabContainer = this._createElement(\"<div></div>\").addClass(\"plate-setup-preset-container\");\n          this.tabContainer.append(this.presetTabContainer);\n\n          for (let i = 0; i < presets.length; i++) {\n            let preset = presets[i];\n            let divText = this._createElement(\"<div></div>\").addClass(\"plate-setup-preset-tab-div\")\n              .text(preset.title);\n\n            let presetButton = this._createElement(\"<div></div>\").addClass(\"plate-setup-preset-tab\")\n              .data(\"preset\", preset.fields).append(divText);\n            this.presetTabContainer.append(presetButton);\n\n            let that = this;\n            presetButton.click(function() {\n              let preset = $(this);\n              that._selectPreset(preset);\n            });\n            this.presets.push(presetButton);\n          }\n        }\n      },\n\n      _clearPresetSelection: function() {\n        for (let j = 0; j < this.presets.length; j++) {\n          let p = this.presets[j];\n          p.removeClass(\"plate-setup-preset-tab-selected\")\n            .addClass(\"plate-setup-preset-tab\");\n        }\n      },\n\n      _selectPreset: function(preset) {\n        this.setCheckboxes(preset.data(\"preset\"));\n        preset.removeClass(\"plate-setup-preset-tab\")\n          .addClass(\"plate-setup-preset-tab-selected\");\n      },\n    };\n  }\n})(jQuery);","var plateMapWidget = plateMapWidget || {};\n\n(function(SVG) {\n\n  plateMapWidget.svgCreate = function() {\n    //\n    return {\n\n      baseSizes: {\n        spacing: 48,\n        tile_radius: 22,\n        center_radius_complete: 10,\n        center_radius_incomplete: 14,\n        label_size: 14,\n        label_spacing: 24,\n        text_size: 13,\n        stroke: 0.5,\n        gap: 2\n      },\n\n      allTiles: [],\n\n      _createSvg: function() {\n        this.svg = new SVG(this.canvasContainer[0]);\n        this.svg.attr('preserveAspectRatio', 'xMidYMin meet');\n        let ls = this.baseSizes.label_spacing;\n\n        this.svg.viewbox(-ls, -ls, ls + this.dimensions.cols * this.baseSizes.spacing, ls + this.dimensions.rows * this.baseSizes.spacing);\n\n        this.wellShadow = this.svg.gradient('radial', function (stop) {\n          stop.at(0.8, 'rgba(0,0,0,0.1)');\n          stop.at(1, 'rgba(0,0,0,0.2)');\n        }).from(\"50%\", \"50%\").to(\"50%\", \"55%\").radius(\"50%\").attr('id', 'wellShadow');\n\n        this.wellColors = this.colorPairs.map(function (pair, i) {\n            return this.svg.gradient('linear', function (stop) {\n                stop.at(0, pair[0]);\n                stop.at(1, pair[1]);\n            }).from(0, 0).to(0, 1).id('wellColor' + i.toString());\n        }, this);\n\n        this._fixRowAndColumn();\n        this._putCircles();\n        this._svgEvents();\n      },\n\n      _fixRowAndColumn: function () {\n        let cols = this.dimensions.cols;\n        let rows = this.dimensions.rows;\n\n        let rh = this.svg.nested().attr({'x': -this.baseSizes.label_spacing / 2.0}).addClass('rowHead');\n        let ch = this.svg.nested().attr({'y': -this.baseSizes.label_spacing / 2.0}).addClass('colHead');\n\n        for (let i = 0; i < rows; i++) {\n          rh.plain(this._rowKey(i)).attr({y: this.baseSizes.spacing * (i + 0.5)});\n        }\n        for (let i = 0; i < cols; i++) {\n          ch.plain(this._colKey(i)).attr({x: this.baseSizes.spacing * (i + 0.5)});\n        }\n      },\n\n      _putCircles: function () {\n        let cols = this.dimensions.cols;\n        let rows = this.dimensions.rows;\n        this.allTiles = Array(cols * rows);\n\n        for (let row = 0; row < rows; row++) {\n          for (let col = 0; col < cols; col++) {\n            let tile = this._createTile(row, col);\n            this.allTiles[tile.index] = tile;\n          }\n        }\n      },\n\n      _createTile: function (r, c) {\n        let g = this.svg.nested().move(this.baseSizes.spacing * c, this.baseSizes.spacing * r).addClass('tile');\n        let m = this.baseSizes.spacing / 2.0;\n\n        let d = {\"tile\": g};\n        d.r = r;\n        d.c = c;\n        d.index = this.locToIndex(d);\n        d.address = this.locToAddress(d);\n\n        g.rect(this.baseSizes.spacing, this.baseSizes.spacing).addClass('highlight');\n        g.circle(this.baseSizes.tile_radius * 2).center(m, m).addClass('well').fill(this.wellShadow);\n\n        let tf = g.group().addClass('fill');\n        d[\"circle\"] = tf.circle(this.baseSizes.tile_radius * 2).center(m, m).addClass('circle').fill(this.wellColors[0]);\n        tf.circle(this.baseSizes.center_radius_complete * 2).center(m, m).addClass('center');\n        tf.circle(this.baseSizes.center_radius_incomplete * 2).center(m, m).addClass('center_incomplete');\n        d[\"label\"] = tf.plain(\"0\").attr({x: m, y: m}).addClass('label');\n\n        return d;\n      },\n\n      setTileComplete: function (tile, complete) {\n        if (complete) {\n          tile.tile.removeClass('incomplete');\n        } else {\n          tile.tile.addClass('incomplete');\n        }\n      },\n\n      setTileVisible: function (tile, visible) {\n        if (visible) {\n          tile.tile.removeClass('empty');\n        } else {\n          tile.tile.addClass('empty');\n        }\n      },\n\n      setTileColor: function (tile, color) {\n        this.setTileVisible(tile, true);\n        tile.colorIndex = parseInt(color);\n        tile.label.plain(String(tile.colorIndex));\n\n        if (color > 0) {\n          color = ((color - 1) % (this.wellColors.length - 1)) + 1;\n        }\n\n        tile.circle.fill(this.wellColors[color])\n      }\n    };\n  }\n})(SVG);","var plateMapWidget = plateMapWidget || {};\n\n(function($) {\n\n  plateMapWidget.svgEvents = function() {\n    // This object contains Menu items and how it works;\n    return {\n      colorToIndex: {},\n      selectedIndices: [],\n\n      _svgEvents: function() {\n        // Set up event handling.\n        let that = this;\n\n        function getMousePosition(evt) {\n          let CTM = that.svg.node.getScreenCTM();\n          return {\n            x: (evt.clientX - CTM.e) / CTM.a,\n            y: (evt.clientY - CTM.f) / CTM.d\n          };\n        }\n\n        function dimCoord(v, max) {\n          max = max - 1;\n          if (v < 0) {\n            return 0;\n          } else if (v >= max) {\n            return max;\n          } else {\n            return Math.trunc(v);\n          }\n        }\n\n        function posToLoc(pos) {\n          let s = that.baseSizes.spacing;\n          let c = dimCoord(pos.x / s, that.dimensions.cols);\n          let r = dimCoord(pos.y / s, that.dimensions.rows);\n          return {r: r, c: c}\n        }\n\n        function selectionBoxPosition(pos0, pos1) {\n          let d0 = posToLoc(pos0);\n          let d1 = posToLoc(pos1);\n          let s = that.baseSizes.spacing;\n\n          let x0 = Math.min(d0.c, d1.c) * s;\n          let y0 = Math.min(d0.r, d1.r) * s;\n\n          if (pos0.x < 0) {\n            d0.c = that.dimensions.cols - 1;\n          }\n          if (pos0.y < 0) {\n            d0.r = that.dimensions.rows - 1;\n          }\n\n          let x1 = (Math.max(d0.c, d1.c) + 1) * s;\n          let y1 = (Math.max(d0.r, d1.r) + 1) * s;\n\n          return {\n            x: x0,\n            y: y0,\n            width: x1 - x0,\n            height: y1 - y0,\n          };\n        }\n\n        function selectTiles(pos0, pos1, secondary) {\n          let d0 = posToLoc(pos0);\n          let d1 = posToLoc(pos1);\n          let extending = true;\n          if (secondary) {\n            // if d0 is already selected, we are deselecting\n            let startIdx = that.locToIndex(d0);\n            extending = that.selectedIndices.indexOf(startIdx) < 0;\n          }\n          let c0 = Math.min(d0.c, d1.c);\n          let r0 = Math.min(d0.r, d1.r);\n\n          if (pos0.x < 0) {\n            d0.c = that.dimensions.cols - 1;\n          }\n          if (pos0.y < 0) {\n            d0.r = that.dimensions.rows - 1;\n          }\n\n          let c1 = Math.max(d0.c, d1.c);\n          let r1 = Math.max(d0.r, d1.r);\n\n          let indices = [];\n\n          for (let r = r0; r <= r1; r++) {\n            for (let c = c0; c <= c1; c++) {\n              let index = that.locToIndex({'r': r, 'c': c});\n              indices.push(index)\n            }\n          }\n          if (secondary) {\n            if (extending) {\n              that.selectedIndices.forEach(function (index) {\n                if (indices.indexOf(index) < 0) {\n                  indices.push(index);\n                }\n              });\n            } else {\n              indices = that.selectedIndices.filter(index => indices.indexOf(index) < 0);\n            }\n          }\n\n          that.setSelectedIndices(indices.sort());\n        }\n\n        let selectionBox;\n\n        function startDrag(evt) {\n          if (selectionBox) {\n            selectionBox.remove();\n          }\n          let pos = getMousePosition(evt);\n          let attrs = selectionBoxPosition(pos, pos);\n          selectionBox = that.svg.rect().attr(attrs).fill('rgba(0, 0, 1, 0.2)');\n          selectionBox.data('origin', pos);\n        }\n\n        function drag(evt) {\n          if (selectionBox) {\n            let pos = getMousePosition(evt);\n            let attrs = selectionBoxPosition(selectionBox.data('origin'), pos);\n            selectionBox.attr(attrs);\n          }\n        }\n\n        function endDrag(evt) {\n          if (selectionBox) {\n            let startPos = selectionBox.data('origin');\n            let pos = getMousePosition(evt);\n            selectTiles(startPos, pos, evt.shiftKey);\n            selectionBox.remove();\n            selectionBox = null;\n          }\n        }\n\n        this.svg.node.addEventListener('mousedown', startDrag);\n        this.svg.node.addEventListener('mousemove', drag);\n        this.svg.node.addEventListener('mouseleave', endDrag);\n        this.svg.node.addEventListener('mouseup', endDrag);\n\n        $(that.target).on(\"loadPlate\", function(evt, data) {\n          // This method should be compatible to redo/undo.\n          that.loadPlate(JSON.parse(data));\n        });\n      },\n\n      setSelection: function(selectedIndices) {\n        this.selectedIndices = selectedIndices;\n        this._setSelectedTiles();\n        document.activeElement.blur();\n      },\n\n      _setSelectedTiles: function() {\n        // Update selected tile display only\n        let selectedIndices = this.selectedIndices;\n        this.allTiles.forEach(function(tile) {\n          let selected = selectedIndices.indexOf(tile.index) >= 0;\n          if (selected) {\n            tile.tile.addClass('selected');\n          } else {\n            tile.tile.removeClass('selected');\n          }\n        })\n      },\n\n      _getSelectedWells: function() {\n        return this.selectedIndices.map(function(index) {\n          let well = this.engine.derivative[index];\n          if (!well) {\n            well = this.defaultWell;\n          }\n          return well;\n        }, this);\n      },\n\n      containsObject: function(obj, list) {\n        function deepEqual (x, y) {\n          if (x === y) {\n            return true;\n          } else if ((typeof x == \"object\" && x != null) && (typeof y == \"object\" && y != null)) {\n            if (Object.keys(x).length !== Object.keys(y).length) {\n              return false;\n            }\n            for (let prop in x) {\n              if (x.hasOwnProperty(prop)) {\n                if (y.hasOwnProperty(prop)) {\n                  if (!deepEqual(x[prop], y[prop])) {\n                    return false;\n                  }\n                } else {\n                  return false;\n                }\n              }\n            }\n            return true;\n          } else {\n            return false;\n          }\n        }\n\n        if (list) {\n          for (let i = 0; i < list.length; i++) {\n            if (deepEqual(obj, list[i])) {\n              return true;\n            }\n          }\n        }\n        return false;\n      },\n\n      _getCommonData: function(wells) {\n        if (wells.length) {\n          let commonData = $.extend(true, {}, wells[0]);\n          for (let i = 1; i < wells.length; i++) {\n            let well = wells[i];\n            for (let field in commonData) {\n              if (!commonData.hasOwnProperty(field)) {\n                continue;\n              }\n              let commonVal = commonData[field];\n              if (commonVal === undefined) {\n                commonVal = null;\n              }\n              let wellVal = well[field];\n              if (wellVal === undefined) {\n                wellVal = null;\n              }\n              if (Array.isArray(commonVal)) {\n                let commonArr = [];\n                for (let i = 0; i < commonVal.length; i++) {\n                  let v = commonVal[i];\n                  // for multiplex field\n                  if (v && typeof (v) === \"object\") {\n                    if (this.containsObject(v, wellVal)) {\n                      commonArr.push(v);\n                    }\n                  } else {\n                    if ($.inArray(v, wellVal) >= 0) {\n                      commonArr.push(v);\n                    }\n                  }\n                }\n                commonData[field] = commonArr;\n              } else {\n                if (wellVal && typeof (wellVal) === \"object\" && commonVal && typeof (commonVal) === \"object\") {\n                  if ((wellVal.value !== commonVal.value) || (wellVal.unit !== commonVal.unit)) {\n                    delete commonData[field];\n                  }\n                } else if (commonVal !== wellVal) {\n                  delete commonData[field];\n                }\n              }\n            }\n          }\n          return commonData;\n        } else {\n          return this.defaultWell;\n        }\n      },\n\n      _getCommonWell: function (wells) {\n        let commonData = this._getCommonData(wells);\n        return this.sanitizeWell(commonData);\n      },\n\n      _getAllMultipleVal: function(wells) {\n        let multipleFieldList = this.multipleFieldList;\n\n        multipleFieldList.forEach(function(multiplexField) {\n          if (wells.length) {\n            let curMultipleVal = {};\n            wells.forEach(function(wellData) {\n              let id = multiplexField.id;\n              if (wellData[id]) {\n                if (wellData[id].length > 0) {\n                  wellData[id].forEach(function(multipleVal) {\n                    if (typeof (multipleVal) === 'object') {\n                      if (multipleVal[id] in curMultipleVal) {\n                        curMultipleVal[multipleVal[id]]++;\n                      } else {\n                        curMultipleVal[multipleVal[id]] = 1;\n                      }\n                    } else {\n                      if (multipleVal in curMultipleVal) {\n                        curMultipleVal[multipleVal]++;\n\n                      } else {\n                        curMultipleVal[multipleVal] = 1;\n                      }\n                    }\n                  })\n                }\n              }\n            });\n            multiplexField.allSelectedMultipleVal = curMultipleVal;\n          } else {\n            multiplexField.allSelectedMultipleVal = null\n          }\n        });\n      },\n\n      decideSelectedFields: function() {\n        let wells = this._getSelectedWells();\n        this._getAllMultipleVal(wells);\n        this.applyFieldWarning(wells);\n        let well = this._getCommonWell(wells);\n        this._addDataToTabFields(well);\n      },\n\n      // get all wells that have data\n      getWellSetAddressWithData: function() {\n        let indices = Object.keys(this.engine.derivative).map(Number).sort();\n        return indices.map(this.indexToAddress, this)\n      }\n\n    };\n  }\n})(jQuery);","var plateMapWidget = plateMapWidget || {};\n\n(function($) {\n\n  plateMapWidget.tabs = function() {\n    // Tabs create and manage tabs at the right side of widget.\n    return {\n\n      allTabs: [],\n\n      defaultWell: {},\n\n      allDataTabs: [], // To hold all the tab contents. this contains all the tabs and its elements and elements\n      // Settings as a whole. its very usefull, when we have units for a specific field.\n      // it goes like tabs-> individual field-> units and checkbox\n\n      _createTabAtRight: function() {\n        this.tabContainer = this._createElement(\"<div></div>\").addClass(\"plate-setup-tab-container\");\n        $(this.topRight).append(this.tabContainer);\n      },\n\n      _createTabs: function() {\n        // this could be done using z-index. just imagine few cards stacked up.\n        // Check if options has tab data.\n        // Originally we will be pulling tab data from developer.\n        // Now we are building upon dummy data.\n        this.tabHead = this._createElement(\"<div></div>\").addClass(\"plate-setup-tab-head\");\n        $(this.tabContainer).append(this.tabHead);\n\n        let tabData = this.options.attributes.tabs;\n        let that = this;\n\n        tabData.forEach(function(tab, tabIndex) {\n          that.allTabs[tabIndex] = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab\");\n          $(that.allTabs[tabIndex]).data(\"index\", tabIndex)\n            .text(tab.name);\n\n          $(that.allTabs[tabIndex]).click(function() {\n            that._tabClickHandler(this);\n          });\n\n          $(that.tabHead).append(that.allTabs[tabIndex]);\n        });\n\n        this.tabDataContainer = this._createElement(\"<div></div>\").addClass(\"plate-setup-tab-data-container\");\n        $(this.tabContainer).append(this.tabDataContainer);\n\n        this._addDataTabs(tabData);\n\n        $(this.allTabs[0]).click();\n\n        this._addTabData();\n      },\n\n      _tabClickHandler: function(clickedTab) {\n\n        if (this.selectedTab) {\n          $(this.selectedTab).removeClass(\"plate-setup-tab-selected\")\n            .addClass(\"plate-setup-tab\");\n\n          let previouslyClickedTabIndex = $(this.selectedTab).data(\"index\");\n          $(this.allDataTabs[previouslyClickedTabIndex]).css(\"z-index\", 0);\n          this.readOnlyHandler();\n        }\n\n        $(clickedTab).addClass(\"plate-setup-tab-selected\");\n\n        this.selectedTab = clickedTab;\n\n        let clickedTabIndex = $(clickedTab).data(\"index\");\n        $(this.allDataTabs[clickedTabIndex]).css(\"z-index\", 1000);\n      },\n\n      _addDataTabs: function(tabs) {\n        this.allDataTabs = tabs.map(function () {\n          return this._createElement(\"<div></div>\").addClass(\"plate-setup-data-div\").css(\"z-index\", 0);\n        }, this);\n        $(this.tabDataContainer).append(this.allDataTabs);\n      }\n    };\n  }\n})(jQuery);","var plateMapWidget = plateMapWidget || {};\n\n(function($) {\n\n  plateMapWidget.undoRedoManager = function() {\n\n    return {\n\n      undoRedoArray: [],\n\n      actionPointer: null,\n\n      addToUndoRedo: function() {\n        var state = this.createState();\n        if (this.actionPointer != null) {\n          var i = this.actionPointer + 1;\n          if (i < this.undoRedoArray.length) {\n            this.undoRedoArray.splice(i, this.undoRedoArray.length - i);\n          }\n        }\n        this.actionPointer = null;\n        this.undoRedoArray.push(state);\n      },\n\n      _configureUndoRedoArray: function() {\n\n        var data = {\n          checkboxes: [],\n          derivative: {},\n          selectedIndices: [0]\n        };\n\n        this.undoRedoArray = [];\n        this.actionPointer = null;\n        this.undoRedoArray.push($.extend({}, data));\n      },\n\n      clearHistory: function () {\n        this.undoRedoArray = this.undoRedoArray.slice(-1);\n        this.actionPointer = null;\n      },\n\n      undo: function() {\n        console.log(\"undo\");\n        return this.shiftUndoRedo(-1);\n      },\n\n      redo: function() {\n        console.log(\"redo\");\n        return this.shiftUndoRedo(1);\n      },\n\n      shiftUndoRedo: function(pointerDiff) {\n        var pointer = this.actionPointer;\n        if (pointer == null) {\n          pointer = this.undoRedoArray.length - 1;\n        }\n        pointer += pointerDiff;\n        return this.setUndoRedo(pointer);\n      },\n\n      setUndoRedo: function(pointer) {\n        if (pointer < 0) {\n          return false;\n        }\n        if (pointer >= this.undoRedoArray.length) {\n          return false;\n        }\n        this.actionPointer = pointer;\n        this.setData(this.undoRedoArray[pointer], true);\n        return true;\n      }\n    }\n  };\n\n})(jQuery);"]}